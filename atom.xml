<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HaoTengFei的博客</title>
  <icon>https://www.gravatar.com/avatar/0eeb18220046cab3a51a59e41706b36d</icon>
  <subtitle>凡心所向，素履以往；生如逆旅，一苇以航</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://haotengfei.com/"/>
  <updated>2017-09-21T13:37:39.570Z</updated>
  <id>http://haotengfei.com/</id>
  
  <author>
    <name>HaoTengFei</name>
    <email>374521128@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解js中的this</title>
    <link href="http://haotengfei.com/2017/09/15/about_this/"/>
    <id>http://haotengfei.com/2017/09/15/about_this/</id>
    <published>2017-09-15T11:52:00.000Z</published>
    <updated>2017-09-21T13:37:39.570Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><ul><li>js 的 this 绑定问题，让多数新手懵逼，部分老手觉得恶心,这是因为this的绑定 ‘难以捉摸’，出错的时候还往往不知道为什么，相当反逻辑。</li><li>那么今天，我们就来深入理解下js中的this</li></ul></blockquote><p>让我们考略下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> people = &#123;</div><div class="line">    name : <span class="string">"海洋饼干"</span>,</div><div class="line">    getName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    xxx.onclick =  people.getName;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><a id="more"></a><p>在平时搬砖时比较常见的this绑定问题，大家可能也写给或者遇到过，当xxx.onclick触发时，输出什么呢 ？</p><p>为了方便测试，我将代码简化:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span></div><div class="line"> people = &#123;</div><div class="line">    Name: <span class="string">"海洋饼干"</span>,</div><div class="line">    getName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.Name);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> bar = people.getName;</div><div class="line">bar();    </div><div class="line"><span class="comment">// undefined</span></div></pre></td></tr></table></figure><p>通过这个小例子带大家感受一下 this恶心的地方，我最开始遇到这个问题的时候也是一脸懵逼，因为代码里的 this在创建时指向非常明显啊，指向自己 people 对象，但是实际上指向 window 对象，这就是我马上要和大家说的<mark> this 绑定规则 </mark>  </p><h3 id="什么是this"><a href="#什么是this" class="headerlink" title="什么是this"></a>什么是this</h3><p>1、this是javaScript的关键字之一，他是对象自动生成的一个内部对象，只能在对象内部使用，随着函数的使用场合不同，this的值会发生变化<br>2、this指向什么，完全取决于什么地方以什么方式调用，而不是创建时。(比较多人误解的地方)(他非常语义化，this在英文中的含义就是这，这个，但是这个其实起到一个误导作用，因为this并不是一成不变的，并不一定指向当前 这个)</p><h3 id="this的绑定规则"><a href="#this的绑定规则" class="headerlink" title="this的绑定规则"></a>this的绑定规则</h3><p><b>掌握了下面介绍的4种绑定的规则，那么你只要看到函数调用就可以判断 this 的指向了</b></p><h4 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h4><p>考略下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;   </div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span> ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);    <span class="comment">// 10</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">foo();</div></pre></td></tr></table></figure><p>这种就是典型的默认绑定，我们看看foo调用的位置，”光杆司令“，像 这种直接使用而不带任何修饰的函数调用 ，就 默认且只能 应用 默认绑定。</p><p>那默认绑定到哪呢，一般是<mark> window </mark>上，严格模式下 是 <mark> undefined </mark></p><h4 id="隐性绑定"><a href="#隐性绑定" class="headerlink" title="隐性绑定"></a>隐性绑定</h4><p>代码说话:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">      a : <span class="number">10</span>,</div><div class="line">    foo : foo</div><div class="line">&#125;</div><div class="line">foo();                <span class="comment">// ?</span></div><div class="line">obj.foo();            <span class="comment">// ?</span></div></pre></td></tr></table></figure><p>答案：undefined    10</p><p>foo()的这个写法熟悉吗，就是我们刚刚写的默认绑定,等价于打印 window.a,故输出 undefined,下面 obj.foo()这种大家应该经常写，这其实就是我们马上要讨论的 隐性绑定 。</p><p>函数foo执行的时候有了上下文对象，即 obj。这种情况下，函数里的this默认绑定为上下文对象，等价于打印 obj.a,故输出 10。</p><p>如果是链性的关系，比如 xx.yy.obj.foo();, 上下文取函数的直接上级，即紧挨着的那个，或者说对象链的最后一个。</p><h4 id="显性绑定"><a href="#显性绑定" class="headerlink" title="显性绑定"></a>显性绑定</h4><p><b>隐性绑定的限制</b></p><p>在我们刚刚的 隐性绑定中有一个致命的限制，就是上下文必须包含我们的函数 ，例： varobj={foo:foo},如果上下文不包含我们的函数用隐性绑定明显是要出错的，不可能每个对象都要加这个函数 ,那样的话扩展,维护性太差了，我们接下来聊的就是直接 给函数强制性绑定this。</p><p><mark> call apply bind </mark></p><p>这里我们就要用到 js 给我们提供的函数 call 和 apply，它们的作用都是改变函数的this指向，第一个参数都是 设置this对象。</p><p>两个函数的区别：</p><p>1、call从第二个参数开始所有的的参数都是 原函数的参数。<br>2、apply只接受两个参数，且第二个参数必须是数组，这个数组代表原函数的参数列表。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(a+b);</div><div class="line">&#125;</div><div class="line">foo.call(<span class="literal">null</span>,<span class="string">'海洋'</span>,<span class="string">'饼干'</span>);         <span class="comment">// 海洋饼干  这里this指向不重要就写null了</span></div><div class="line">foo.apply(<span class="literal">null</span>, [<span class="string">'海洋'</span>,<span class="string">'饼干'</span>]);     <span class="comment">// 海洋饼干</span></div></pre></td></tr></table></figure><p>除了call、apply函数以外，还有一个改变this的函数bind，它和call、apply都不同</p><p>bind只有一个函数，且不会立刻执行，只是将一个值绑定到函数的this上，并将绑定好的函数返回；例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span> : <span class="number">10</span> &#125;;</div><div class="line">foo = foo.bind(obj);</div><div class="line">foo();                    <span class="comment">// 10</span></div></pre></td></tr></table></figure><p>开始正题，上代码，就用上面隐性绑定的例子 :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = &#123;    </div><div class="line">    a : <span class="number">10</span>            <span class="comment">//去掉里面的foo</span></div><div class="line">&#125;</div><div class="line">foo.call(obj);        <span class="comment">// 10</span></div></pre></td></tr></table></figure><p>我们将隐性绑定例子中的 上下文对象 里的函数去掉了，显然现在不能用 上下文.函数 这种形式来调用函数，大家看代码里的显性绑定代码 foo.call(obj)，看起来很怪，和我们之前所了解的函数调用不一样。</p><p>其实call 是 foo 上的一个函数,在改变this指向的同时执行这个函数。</p><h4 id="new-绑定"><a href="#new-绑定" class="headerlink" title="new 绑定"></a>new 绑定</h4><p><b>什么是 new？</b></p><p>学过面向对象的小伙伴对new肯定不陌生，js的new和传统的面向对象语言的new的作用都是创建一个新的对象，但是他们的机制完全不同。</p><p>创建一个新对象少不了一个概念，那就是 构造函数，传统的面向对象 构造函数 是类里的一种特殊函数，要创建对象时使用 new类名()的形式去调用类中的构造函数，而js中就不一样了。</p><blockquote><p>js中的只要用new修饰的 函数就是’构造函数’，准确来说是 函数的 构造调用，因为在js中并不存在所谓的’构造函数’。</p></blockquote><p>那么用new 做到函数的 构造调用后，js帮我们做了什么工作呢:</p><p>1、创造一个新对象<br>2、把这个新对象的 <code>__proto__</code> 属性指向 原函数的prototype属性(继承原函数的原型)<br>3、将这个新对象绑定到此函数的this上<br>4、返回新对象，如果这个函数没有返回其他对象</p><p><b>new 绑定</b></p><p>不哔哔，看代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;    </div><div class="line">  <span class="keyword">this</span>.a = <span class="number">10</span>;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line">foo();                    <span class="comment">// window对象</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a);    <span class="comment">// 10   默认绑定</span></div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> foo();      <span class="comment">// foo&#123; a : 10 &#125;  创建的新对象的默认名为函数名</span></div><div class="line">                          <span class="comment">// 然后等价于 foo &#123; a : 10 &#125;;  var obj = foo;</span></div><div class="line"><span class="built_in">console</span>.log(obj.a);       <span class="comment">// 10    new绑定</span></div></pre></td></tr></table></figure><blockquote><p>使用new调用函数后，函数会 以自己的名字 命名 和 创建 一个新的对象，并返回。</p></blockquote><p>特别注意的是：如果原函数返回一个对象类型，那么将无法返回新对象，你将丢失绑定this的新对象。<br>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;    </div><div class="line">  <span class="keyword">this</span>.a = <span class="number">10</span>;    </div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"捣蛋鬼"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> foo();</div><div class="line"><span class="built_in">console</span>.log(obj.a);       <span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(obj);         <span class="comment">// "捣蛋鬼"</span></div></pre></td></tr></table></figure><h3 id="this-绑定优先级"><a href="#this-绑定优先级" class="headerlink" title="this 绑定优先级"></a>this 绑定优先级</h3><blockquote><p>new 绑定 &gt; 显性绑定 &gt; 隐式绑定 &gt; 默认绑定</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1、如果函数被 new 修饰</p><p>this绑定的是新创造的对象，例：<code>var bar = new foo()</code> 函数foo中的 this 就是一个叫foo的新创建的对象，然后将这个对象赋值给bar，这样的绑定方式叫 new 绑定。</p><p>2、如果函数是使用 call apply bind 来调用的</p><p>this的绑定是 call apply bind 的第一个参数，例：<code>foo.call(obj)</code> foo中的 this 就是 obj 这样的绑定方式叫 显性绑定。</p><p>3、如果函数是在某个 上下文对象 下被调用</p><p>this绑定的是哪个上下文对象，例：<code>var obj = {foo : foo};obj.foo();</code> foo中的this就是 obj 这样的绑定方式叫 隐性绑定。</p><p>4、如果都不是，使用默认绑定</p><p>例：<code>function foo(){...} foo()</code> foo中的this就是window(严格模式下默认绑定到undefined)这样的绑定方式叫 默认绑定</p><h3 id="面试题解析"><a href="#面试题解析" class="headerlink" title="面试题解析"></a>面试题解析</h3><p>1.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  x: <span class="number">20</span>,</div><div class="line">  f: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);        <span class="comment">// ?     </span></div><div class="line">    <span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);    </div><div class="line">    &#125;</div><div class="line">    foo();                      <span class="comment">// ?</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">obj.f();</div></pre></td></tr></table></figure><p>答案：20   10</p><p>解析 ：考点 1. this默认绑定 2. this隐性绑定<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  x: <span class="number">20</span>,</div><div class="line">  f: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);    <span class="comment">// 20</span></div><div class="line">                            <span class="comment">// 典型的隐性绑定,这里 f 的this指向上下文 obj ,即输出 20</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123; </div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.x); </div><div class="line">    &#125;</div><div class="line">    foo();        <span class="comment">// 10</span></div><div class="line">                  <span class="comment">//有些人在这个地方就想当然的觉得 foo 在函数 f 里,也在 f 里执行，</span></div><div class="line">                  <span class="comment">//那 this 肯定是指向obj 啊 , 仔细看看我们说的this绑定规则 , 对应一下很容易</span></div><div class="line">                  <span class="comment">//发现这种'光杆司令'，是我们一开始就示范的默认绑定,这里this绑定的是window</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">obj.f();</div></pre></td></tr></table></figure></p><p>2.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">arg</span>)</span>&#123;    </div><div class="line">  <span class="keyword">this</span>.a = arg;    </div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> a = foo(<span class="number">1</span>);          </div><div class="line"><span class="keyword">var</span> b = foo(<span class="number">10</span>);         </div><div class="line"><span class="built_in">console</span>.log(a.a);    <span class="comment">// ?</span></div><div class="line"><span class="built_in">console</span>.log(b.a);    <span class="comment">// ?</span></div></pre></td></tr></table></figure><p>答案：undefined    10</p><p>解析：考点 1. 全局污染 2. this默认绑定</p><p>这道题很有意思，问题基本上都集中在第一undefined上，这其实是题目的小陷阱，但是追栈的过程绝对精彩。</p><p>让我们一步步分析这里发生了什么：</p><p>1、foo(1)执行，应该不难看出是默认绑定吧 , this指向了window，函数里等价于 <code>window.a = 1,return window</code>;<br>2、<code>var a = foo(1)</code> 等价于 <code>window.a = window</code> , 很多人都忽略了<mark> var a 就是window.a </mark>，将刚刚赋值的 1 替换掉了。<br>3、所以这里的 a 的值是 window , a.a 也是window ， 即<code>window.a = window ; window.a.a = window</code>;<br>4、foo(10) 和第一次一样，都是默认绑定，这个时候，将window.a 赋值成 10 ，注意这里是关键，原来<code>window.a = window</code> ,现在被赋值成了10，变成了值类型，所以现在 <code>a.a = undefined</code>。(验证这一点只需要将<code>var b = foo(10)</code>;删掉，这里的 a.a 还是window)<br>5、<code>var b = foo(10)</code>; 等价于 <code>window.b = window</code>;</p><p>本题中所有变量的值，<code>a = window.a = 10 , a.a = undefined , b = window , b.a = window.a = 10</code>;</p><p>3.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  x: <span class="number">20</span>,</div><div class="line">  f: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.x); &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> bar = obj.f;</div><div class="line"><span class="keyword">var</span> obj2 = &#123;</div><div class="line">  x: <span class="number">30</span>,</div><div class="line">  f: obj.f</div><div class="line">&#125;</div><div class="line">obj.f();          <span class="comment">// ?</span></div><div class="line">bar();            <span class="comment">// ?</span></div><div class="line">obj2.f();         <span class="comment">// ?</span></div></pre></td></tr></table></figure><p>答案：20  10   30</p><p>解析：传说中的送分题，考点，辨别this绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    x: <span class="number">20</span>,</div><div class="line">    f: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.x); &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> bar = obj.f;</div><div class="line"><span class="keyword">var</span> obj2 = &#123;</div><div class="line">    x:<span class="number">30</span>,</div><div class="line">    f: obj.f</div><div class="line">&#125;</div><div class="line">obj.f();    <span class="comment">// 20</span></div><div class="line">            <span class="comment">//有上下文，this为obj，隐性绑定</span></div><div class="line">bar();      <span class="comment">// 10</span></div><div class="line">            <span class="comment">//'光杆司令' 默认绑定  （ obj.f 只是普通的赋值操作 ）</span></div><div class="line">obj2.f();   <span class="comment">//30</span></div><div class="line">            <span class="comment">//不管 f 函数怎么折腾，this只和 执行位置和方式有关，即我们所说的绑定规则</span></div></pre></td></tr></table></figure><ol><li>压轴题了</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log (<span class="number">1</span>); &#125;;    </div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">2</span>);&#125;;</div><div class="line"></div><div class="line">foo.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">3</span>);&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">4</span>);&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">5</span>);&#125;</div><div class="line"></div><div class="line">foo.getName ();                <span class="comment">// ?   </span></div><div class="line">getName ();                    <span class="comment">// ?   </span></div><div class="line">foo().getName ();              <span class="comment">// ?  </span></div><div class="line">getName ();                    <span class="comment">// ?   </span></div><div class="line"><span class="keyword">new</span> foo.getName ();            <span class="comment">// ?   </span></div><div class="line"><span class="keyword">new</span> foo().getName ();          <span class="comment">// ?   </span></div><div class="line"><span class="keyword">new</span> <span class="keyword">new</span> foo().getName ();      <span class="comment">// ?</span></div></pre></td></tr></table></figure><p>答案：2  4  1  1  2  3  3</p><p>解析：考点 1. new绑定 2.隐性绑定 3. 默认绑定 4.变量污染（用词不一定准确）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log (<span class="number">1</span>); &#125;; </div><div class="line">    <span class="comment">//只要函数一执行，这里的getName 将创建到全局window上</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;                               </div><div class="line">&#125;</div><div class="line">foo.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">2</span>);&#125;;</div><div class="line"><span class="comment">//这个getName和上面的不同，是直接添加到函数foo上的</span></div><div class="line">foo.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">3</span>);&#125;; </div><div class="line"><span class="comment">// 这个getName直接添加到foo的原型上，在用new创建新对象时将直接添加到新对象上 </span></div><div class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">4</span>);&#125;; </div><div class="line"><span class="comment">// 和foo函数里的getName一样, 将创建到全局window上</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">5</span>);&#125;</div><div class="line"><span class="comment">// 同上，但是这个函数不会被使用，因为函数声明的提升优先级最高，所以上面的函数表达式将永远替换        </span></div><div class="line"><span class="comment">// 这个同名函数，除非在函数表达式赋值前去调用getName()，但是在本题中，函数调用都在函数表达式之后，所以这个函数可以忽略了</span></div><div class="line"><span class="comment">// 这两个函数的区别就是，上面的函数如果提前调用，则函数名是undefined，调用会报错；而下面的函数可以提前调用</span></div><div class="line"><span class="comment">// 通过上面对 getName的分析基本上答案已经出来了</span></div><div class="line">foo.getName ();                <span class="comment">// 2                               </span></div><div class="line"><span class="comment">// 下面为了方便，我就使用输出值来简称每个getName函数                               </span></div><div class="line"><span class="comment">// 这里有小伙伴疑惑是在 2 和 3 之间，觉得应该是3 , 但其实直接设置foo.prototype上的属性，对当前这个对象的属性是没有影响的,如果要使用的话，可以foo.prototype.getName() 这样调用 ，这里需要知道的是 3 并不会覆盖 2，两者不冲突 ( 当你使用new 创建对象时，这里的 Prototype 将自动绑定到新对象上，即用new 构造调用的第二个作用)</span></div><div class="line">getName ();                    <span class="comment">// 4                               </span></div><div class="line"><span class="comment">// 这里涉及到函数提升的问题，不知道的小伙伴只需要知道 5 会被 4 覆盖，虽然 5 在 4 的下面，其实 js 并不是完全的自上而下。会先预解析函数提升和变量提升(不赋值)也就是说先当与：function getName () &#123; console.log(5);&#125;;  var getName;  getName = function () &#123; console.log(4);&#125;;  所以在执行的过程中 4 就会把 5 覆盖(其次他们都不是在函数之前调用的)</span></div><div class="line">foo().getName ();              <span class="comment">// 1                               </span></div><div class="line"><span class="comment">// 这里的foo函数执行完成了两件事, 1. 将window.getName设置为1;  2. 返回window , 故等价于 window.getName(); 输出 1</span></div><div class="line">getName ();                    <span class="comment">// 1                              </span></div><div class="line"><span class="comment">// 刚刚上面的函数刚把window.getName设置为1,故同上 输出 1</span></div><div class="line"><span class="keyword">new</span> foo.getName ();            <span class="comment">// 2                               </span></div><div class="line"><span class="comment">// new 对一个函数进行构造调用 , 即 foo.getName ,构造调用也是调用啊,该执行还是执行，然后返回一个新对象，输出 2 (虽然这里没有接收新创建的对象但是我们可以猜到，是一个函数名为 foo.getName 的对象且__proto__属性里有一个getName函数，是上面设置的 3 函数)</span></div><div class="line"><span class="keyword">new</span> foo().getName ();          <span class="comment">// 3                              </span></div><div class="line"><span class="comment">// 这里特别的地方就来了,new 是对一个函数进行构造调用,它直接找到了离它最近的函数,foo(),并返回了应该新对象,等价于 var obj = new foo();obj.getName(); 这样就很清晰了,输出的是之前绑定到prototype上的那个getName  3 ,因为使用new后会将函数的prototype继承给 新对象</span></div><div class="line"><span class="keyword">new</span> <span class="keyword">new</span> foo().getName ();      <span class="comment">// 3                               </span></div><div class="line"><span class="comment">// 哈哈，这个看上去很吓人，让我们来分解一下：                             </span></div><div class="line"><span class="comment">// var obj = new foo();                              </span></div><div class="line"><span class="comment">// var obj1 = new obj.getName();                              </span></div><div class="line"><span class="comment">// 好了，仔细看看, 这不就是上两题的合体吗,obj 有getName 3, 即输出3                            </span></div><div class="line"><span class="comment">// obj 是一个函数名为 foo的对象,obj1是一个函数名为obj.getName的对象</span></div></pre></td></tr></table></figure><h3 id="箭头函数的this绑定"><a href="#箭头函数的this绑定" class="headerlink" title="箭头函数的this绑定"></a>箭头函数的this绑定</h3><p>箭头函数，一种特殊的函数，不使用 function关键字，而是使用 =&gt;，学名 胖箭头(2333),它和普通函数的区别：</p><p>1、箭头函数不使用我们上面介绍的四种绑定，而是完全根据外部作用域来决定this。(它的父级是使用我们的规则的哦)<br>2、箭头函数的this绑定无法被修改 (这个特性非常爽)</p><p>先看个代码巩固一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;    </div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">foo.a = <span class="number">10</span>;</div><div class="line"><span class="comment">// 1. 箭头函数关联父级作用域this</span></div><div class="line"><span class="keyword">var</span> bar = foo();            <span class="comment">// foo默认绑定</span></div><div class="line">bar();                      <span class="comment">// undefined 哈哈，是不是有小伙伴想当然了</span></div><div class="line"><span class="keyword">var</span> baz = foo.call(foo);    <span class="comment">// foo 显性绑定</span></div><div class="line">baz();                      <span class="comment">// 10 </span></div><div class="line"><span class="comment">// 2. 箭头函数this不可修改</span></div><div class="line"><span class="comment">//这里我们使用上面的已经绑定了foo 的 baz</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    a : <span class="number">999</span></div><div class="line">&#125;</div><div class="line">baz.call(obj);              <span class="comment">// 10</span></div></pre></td></tr></table></figure><p>来来来，实战一下，还记得我们之前第一个例子吗，将它改成箭头函数的形式(可以彻底解决恶心的this绑定问题)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> people = &#123;    </div><div class="line">  Name : <span class="string">"海洋饼干"</span>,</div><div class="line">  getName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.Name);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> bar = people.getName;</div><div class="line">bar();    <span class="comment">// undefined</span></div></pre></td></tr></table></figure><p>修改后:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> people = &#123;</div><div class="line">  Name : <span class="string">"海洋饼干"</span>,</div><div class="line">  getName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.Name);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> bar = people.getName(); <span class="comment">//获得一个永远指向people的函数，不用想this了,岂不是美滋滋？</span></div><div class="line">bar();    <span class="comment">// 海洋饼干</span></div></pre></td></tr></table></figure><p>可能会有人不解为什么在箭头函数外面再套一层，直接写不就行了吗，搞这么麻烦干嘛，其实这也是箭头函数很多人用不好的地方.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj= &#123;</div><div class="line">  that : <span class="keyword">this</span>,</div><div class="line">  bar : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  baz : <span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(obj.that);  <span class="comment">// window</span></div><div class="line">obj.bar()();            <span class="comment">// obj</span></div><div class="line">obj.baz();              <span class="comment">// window</span></div></pre></td></tr></table></figure><p>1、我们先要搞清楚一点，obj的当前作用域是window,如 obj.that === window。<br>2、如果不用function（function有自己的函数作用域）将其包裹起来，那么默认绑定的父级作用域就是window。<br>3、用function包裹的目的就是将箭头函数绑定到当前的对象上。函数的作用域是当前这个对象，然后箭头函数会自动绑定函数所在作用域的this，即obj。</p><blockquote><p>End..参考书籍：你不知道的JavaScript&lt;上卷&gt;  KYLE SIMPSON 著　（推荐）</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;js 的 this 绑定问题，让多数新手懵逼，部分老手觉得恶心,这是因为this的绑定 ‘难以捉摸’，出错的时候还往往不知道为什么，相当反逻辑。&lt;/li&gt;
&lt;li&gt;那么今天，我们就来深入理解下js中的this&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;让我们考略下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; people = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name : &lt;span class=&quot;string&quot;&gt;&quot;海洋饼干&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    getName : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.onload = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    xxx.onclick =  people.getName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="summary" scheme="http://haotengfei.com/tags/summary/"/>
    
      <category term="this" scheme="http://haotengfei.com/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>前端常见跨域解决方案(全)</title>
    <link href="http://haotengfei.com/2017/09/08/cross_domain/"/>
    <id>http://haotengfei.com/2017/09/08/cross_domain/</id>
    <published>2017-09-08T11:52:00.000Z</published>
    <updated>2017-09-19T02:08:26.254Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><ul><li>最近参考一些网上的资料，结合自己的个人经历对前端跨域的问题进行了一些总结</li></ul></blockquote><h3 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h3><ul><li>跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里的跨域是广义的</li><li>广义的跨域：<br>1.) 资源跳转：A链接、重定向、表单提交<br>2.) 资源嵌入：<code>&lt;link&gt;、&lt;script&gt;、&lt;img&gt;、&lt;frame&gt;</code>等dom标签，还有样式中的<code>background：url()、@font-face()</code>等文件外链<br>3.) 脚本请求：js发起的ajax请求、dom和js对象的跨域操作</li><li>其实我们通常所说的跨域是狭义的，是由浏览器的<mark> 同源策略 </mark>限制的一类请求场景</li></ul><a id="more"></a><h3 id="什么是同源策略"><a href="#什么是同源策略" class="headerlink" title="什么是同源策略"></a>什么是同源策略</h3><p>同源策略/SOP(Same origin policy)是一种约定，由Netscape公司1995年引入浏览器的，他是浏览器最核心、也是最基本的功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指”协议+域名+端口”三者相同，即使两个不同的域名指向同一个IP地址，也非同源。</p><p>同源策略限制分为以下几种行为：<br>1.) Cookie、LocalStorage、IndexDB无法读取<br>2.) DOM和Js对象无法获得的<br>3.) ajax请求无法发送的</p><h3 id="常见的跨域场景"><a href="#常见的跨域场景" class="headerlink" title="常见的跨域场景"></a>常见的跨域场景</h3><table><thead><tr><th style="text-align:center">URL</th><th style="text-align:center">说明</th><th style="text-align:center">是否允许通信</th></tr></thead><tbody><tr><td style="text-align:center"><code>http://www.qq.com/a.js</code><br><code>http://www.qq.com/b.js</code><br><code>http://www.qq.com/c/c.js</code></td><td style="text-align:center">同一域名，不同文件或路径</td><td style="text-align:center">允许</td></tr><tr><td style="text-align:center"><code>http://www.qq.com:8000</code><br><code>http://www.qq.com</code></td><td style="text-align:center">同一域名，不同端口</td><td style="text-align:center">不允许</td></tr><tr><td style="text-align:center"><code>http://www.qq.com/a.js</code><br><code>https://www.qq.com/b.js</code></td><td style="text-align:center">同一域名，不同协议</td><td style="text-align:center">不允许</td></tr><tr><td style="text-align:center"><code>http://www.qq.com/a.js</code><br><code>http://192.168.4.1/b.js</code></td><td style="text-align:center">域名和域名对应相同的IP</td><td style="text-align:center">不允许</td></tr><tr><td style="text-align:center"><code>http://www.qq.com/a.js</code><br><code>http://x.qq.com/b.js</code><br><code>http://qq.com/c.js</code></td><td style="text-align:center">主域相同，子域不同</td><td style="text-align:center">不允许</td></tr><tr><td style="text-align:center"><code>http://www.qq1.com/a.js</code><br><code>http://www.qq2.com/b.js</code></td><td style="text-align:center">不同域名</td><td style="text-align:center">不允许</td></tr></tbody></table><h3 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h3><p>1、通过jsonp跨域<br>2、document.domain + iframe跨域<br>3、location.hash + iframe<br>4、window.name + iframe跨域<br>5、postMessage跨域<br>6、跨域资源共享(CORS)<br>7、nginx代理跨域<br>8、nodejs中间件代理跨域<br>9、WebSocket协议跨域</p><h4 id="通过jsonp跨域"><a href="#通过jsonp跨域" class="headerlink" title="通过jsonp跨域"></a>通过jsonp跨域</h4><p>通常为了减轻web服务器的负载，我们把js、css、img等静态资源分离到另一台独立域名的服务器上，在html页面中再通过相应的标签从不同域名下加载静态资源，而被浏览器允许，基于此原理，我们可以通过动态创建script，再请求一个带参网址实现跨域通信</p><p>1.) 原生实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">  script.type = <span class="string">'text/javascript'</span>;</div><div class="line"></div><div class="line">  <span class="comment">// 传参并指定回调执行函数为onBack</span></div><div class="line">  script.src = <span class="string">'http://www.domain2.com:8080/login?user=admin&amp;callback=onBack'</span>;</div><div class="line">  <span class="built_in">document</span>.head.appendChild(script);</div><div class="line"></div><div class="line">  <span class="comment">// 回调执行函数</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onBack</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">      alert(<span class="built_in">JSON</span>.stringify(res));</div><div class="line">  &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><p>服务端返回如下(返回时即执行全局函数)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onBack(&#123;<span class="string">"status"</span>: <span class="literal">true</span>, <span class="string">"user"</span>: <span class="string">"admin"</span>&#125;)</div></pre></td></tr></table></figure><p>2.) jquery的ajax：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    url: <span class="string">'http://www.domain2.com:8080/login'</span>,</div><div class="line">    type: <span class="string">'get'</span>,</div><div class="line">    dataType: <span class="string">'jsonp'</span>,  <span class="comment">// 请求方式为jsonp</span></div><div class="line">    jsonpCallback: <span class="string">"onBack"</span>,    <span class="comment">// 自定义回调函数名</span></div><div class="line">    data: &#123;&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>3.) vue.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$http.jsonp(<span class="string">'http://www.domain2.com:8080/login'</span>, &#123;</div><div class="line">    params: &#123;&#125;,</div><div class="line">    jsonp: <span class="string">'onBack'</span></div><div class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(res); </div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>4.) 后端node.js代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> server = http.createServer();</div><div class="line"></div><div class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> params = qs.parse(req.url.split(<span class="string">'?'</span>)[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">var</span> fn = params.callback;</div><div class="line"></div><div class="line">    <span class="comment">// jsonp返回设置</span></div><div class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/javascript'</span> &#125;);</div><div class="line">    res.write(fn + <span class="string">'('</span> + <span class="built_in">JSON</span>.stringify(params) + <span class="string">')'</span>);</div><div class="line"></div><div class="line">    res.end();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(<span class="string">'8080'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at port 8080...'</span>);</div></pre></td></tr></table></figure><p><b>jsonp缺点：只能实现get一种请求</b></p><h4 id="document-domain-iframe跨域"><a href="#document-domain-iframe跨域" class="headerlink" title="document.domain + iframe跨域"></a>document.domain + iframe跨域</h4><p>此方案仅限主域相同，子域不同的跨域应用场景。</p><p>实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。</p><p>1.) 父窗口：<code>http://www.domain.com/a.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;iframe id=<span class="string">"iframe"</span> src=<span class="string">"http://child.domain.com/b.html"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></div><div class="line">&lt;script&gt;</div><div class="line">    <span class="built_in">document</span>.domain = <span class="string">'domain.com'</span>;</div><div class="line">    <span class="keyword">var</span> user = <span class="string">'admin'</span>;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><p>2.) 子窗口：<code>http://child.domain.com/b.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="built_in">document</span>.domain = <span class="string">'domain.com'</span>;</div><div class="line">    <span class="comment">// 获取父窗口中变量</span></div><div class="line">    alert(<span class="string">'get js data from parent ---&gt; '</span> + <span class="built_in">window</span>.parent.user);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><h4 id="location-hash-iframe跨域"><a href="#location-hash-iframe跨域" class="headerlink" title="location.hash + iframe跨域"></a>location.hash + iframe跨域</h4><p>实现原理： a欲与b跨域相互通信，通过中间页c来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</p><p>具体实现：A域：a.html -&gt; B域：b.html -&gt; A域：c.html，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。</p><p>1.) a.html：<code>http://www.domain1.com/a.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;iframe id=<span class="string">"iframe"</span> src=<span class="string">"http://www.domain2.com/b.html"</span> style=<span class="string">"display:none;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></div><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 向b.html传hash值</span></div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        iframe.src = iframe.src + <span class="string">'#user=admin'</span>;</div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 开放给同域c.html的回调方法</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onCallback</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">        alert(<span class="string">'data from c.html ---&gt; '</span> + res);</div><div class="line">    &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><p>2.) b.html：<code>http://www.domain2.com/b.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;iframe id=<span class="string">"iframe"</span> src=<span class="string">"http://www.domain1.com/c.html"</span> style=<span class="string">"display:none;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></div><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 监听a.html传来的hash值，再传给c.html</span></div><div class="line">    <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        iframe.src = iframe.src + location.hash;</div><div class="line">    &#125;;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><p>3.) c.html：<code>http://www.domain1.com/c.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="comment">// 监听b.html传来的hash值</span></div><div class="line">    <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 再通过操作同域a.html的js回调，将结果传回</span></div><div class="line">        <span class="built_in">window</span>.parent.parent.onCallback(<span class="string">'hello: '</span> + location.hash.replace(<span class="string">'#user='</span>, <span class="string">''</span>));</div><div class="line">    &#125;;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><h4 id="window-name-iframe-跨域"><a href="#window-name-iframe-跨域" class="headerlink" title="window.name + iframe 跨域"></a>window.name + iframe 跨域</h4><p>window.name属性的独特之处：name的值在不同的页面(甚至不同的域名)加载后依然存在，并且可以支持非常长的name值(2MB)</p><p>1.) a.html：<code>http://www.domain1.com/a.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> proxy = <span class="function"><span class="keyword">function</span>(<span class="params">url, callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> state = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 加载跨域页面</span></div><div class="line">    iframe.src = url;</div><div class="line"></div><div class="line">    <span class="comment">// onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span></div><div class="line">    iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (state === <span class="number">1</span>) &#123;</div><div class="line">            <span class="comment">// 第2次onload(同域proxy页)成功后，读取同域window.name中数据</span></div><div class="line">            callback(iframe.contentWindow.name);</div><div class="line">            destoryFrame();</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state === <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// 第1次onload(跨域页)成功后，切换到同域代理页面</span></div><div class="line">            iframe.contentWindow.location = <span class="string">'http://www.domain1.com/proxy.html'</span>;</div><div class="line">            state = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="built_in">document</span>.body.appendChild(iframe);</div><div class="line"></div><div class="line">    <span class="comment">// 获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">destoryFrame</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        iframe.contentWindow.document.write(<span class="string">''</span>);</div><div class="line">        iframe.contentWindow.close();</div><div class="line">        <span class="built_in">document</span>.body.removeChild(iframe);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 请求跨域b页面数据</span></div><div class="line">proxy(<span class="string">'http://www.domain2.com/b.html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    alert(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>2.) proxy.html：<code>http://www.domain1.com/proxy....</code></p><p>中间代理页，与a.html同域，内容为空即可</p><p>3.) b.html：<code>http://www.domain2.com/b.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="built_in">window</span>.name = <span class="string">'This is domain2 data!'</span>;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><p><b>总结：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传到本地域。这个就巧妙的绕过了浏览器的跨域访问限制，但同时他又是安全操作</b></p><h4 id="postMessage跨域"><a href="#postMessage跨域" class="headerlink" title="postMessage跨域"></a>postMessage跨域</h4><p>postMessage是HTML5 XMLHttpRequest Level2中的API，且是为数不多的可以跨域操作的window属性之一，它可以用于解决以下方面的问题：</p><p>a.) 页面和其他打开的新窗口的数据传递<br>b.) 多窗口之间的消息传递<br>c.) 页面与嵌套的iframe消息传递<br>d.) 上面三个场景的跨域数据传递</p><p>用法：postMessage(data,origin)方法接受两个参数<br>data：html5规范支持任意的基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参数的时候最好用JSON.stringify()序列化<br>origin：协议 + 主机 + 端口号，也可以设置为”*”,表示可以传递给任意的窗口，如果要指定和当前的窗口同源的话可设置为”/“</p><p>1.) a.html：<code>http://www.domain1.com/a.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;iframe id=<span class="string">"iframe"</span> src=<span class="string">"http://www.domain2.com/b.html"</span> style=<span class="string">"display:none;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></div><div class="line">&lt;script&gt;       </div><div class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</div><div class="line">    iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> data = &#123;</div><div class="line">            name: <span class="string">'aym'</span></div><div class="line">        &#125;;</div><div class="line">        <span class="comment">// 向domain2传送跨域数据</span></div><div class="line">        iframe.contentWindow.postMessage(<span class="built_in">JSON</span>.stringify(data), <span class="string">'http://www.domain2.com'</span>);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 接受domain2返回数据</span></div><div class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        alert(<span class="string">'data from domain2 ---&gt; '</span> + e.data);</div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><p>2.) b.html：<code>http://www.domain2.com/b.html</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="comment">// 接收domain1的数据</span></div><div class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        alert(<span class="string">'data from domain1 ---&gt; '</span> + e.data);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(e.data);</div><div class="line">        <span class="keyword">if</span> (data) &#123;</div><div class="line">            data.number = <span class="number">16</span>;</div><div class="line"></div><div class="line">            <span class="comment">// 处理后再发回domain1</span></div><div class="line">            <span class="built_in">window</span>.parent.postMessage(<span class="built_in">JSON</span>.stringify(data), <span class="string">'http://www.domain1.com'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><h4 id="跨域资源共享-CROS"><a href="#跨域资源共享-CROS" class="headerlink" title="跨域资源共享(CROS)"></a>跨域资源共享(CROS)</h4><p>普通跨域请求：只服务端设置Access-Control-Allow-Origin即可，前端无需设置，若要带cookie请求：前后端都需要设置。</p><p>需注意的是：由于同源策略的限制，所读取的cookie为跨域请求接口所在域的cookie，而非当前页。如果想实现当前页cookie的写入，可参考下文：七、nginx反向代理中设置proxy_cookie_domain 和 八、NodeJs中间件代理中cookieDomainRewrite参数的设置。</p><p>目前，所有浏览器都支持该功能(IE8+：IE8/9需要使用XDomainRequest对象来支持CORS）)，CORS也已经成为主流的跨域解决方案。</p><p>一：前端设置：</p><p>1.) 原生ajax</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 前端设置是否带cookie</span></div><div class="line">xhr.withCredentials = <span class="literal">true</span>;</div></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest(); <span class="comment">// IE8/9需用window.XDomainRequest兼容</span></div><div class="line"></div><div class="line"><span class="comment">// 前端设置是否带cookie</span></div><div class="line">xhr.withCredentials = <span class="literal">true</span>;</div><div class="line"></div><div class="line">xhr.open(<span class="string">'post'</span>, <span class="string">'http://www.domain2.com:8080/login'</span>, <span class="literal">true</span>);</div><div class="line">xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</div><div class="line">xhr.send(<span class="string">'user=admin'</span>);</div><div class="line"></div><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</div><div class="line">        alert(xhr.responseText);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>2.) jQuery ajax</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    ...</div><div class="line">   xhrFields: &#123;</div><div class="line">       withCredentials: <span class="literal">true</span>    <span class="comment">// 前端设置是否带cookie</span></div><div class="line">   &#125;,</div><div class="line">   crossDomain: <span class="literal">true</span>,   <span class="comment">// 会让请求头中包含跨域的额外信息，但不会含cookie</span></div><div class="line">    ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>3.) vue框架</p><p>在vue-resource封装的ajax组件中加入以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Vue.http.options.credentials = <span class="literal">true</span></div></pre></td></tr></table></figure><p>二：服务端的设置</p><p>若后端设置成功，前端浏览器控制台则不会出现跨域报错信息，反之，说明没设成功。</p><p>1.) Java后台：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 导入包：import javax.servlet.http.HttpServletResponse;</span></div><div class="line"><span class="comment"> * 接口参数中定义：HttpServletResponse response</span></div><div class="line"><span class="comment"> */</span></div><div class="line">response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"http://www.domain1.com"</span>);  <span class="comment">// 若有端口需写全（协议+域名+端口）</span></div><div class="line">response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</div></pre></td></tr></table></figure><p>2.) Nodejs后台示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> server = http.createServer();</div><div class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</div><div class="line"></div><div class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> postData = <span class="string">''</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 数据块接收中</span></div><div class="line">    req.addListener(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</div><div class="line">        postData += chunk;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 数据接收完毕</span></div><div class="line">    req.addListener(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        postData = qs.parse(postData);</div><div class="line"></div><div class="line">        <span class="comment">// 跨域后台设置</span></div><div class="line">        res.writeHead(<span class="number">200</span>, &#123;</div><div class="line">            <span class="string">'Access-Control-Allow-Credentials'</span>: <span class="string">'true'</span>,     <span class="comment">// 后端允许发送Cookie</span></div><div class="line">            <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'http://www.domain1.com'</span>,    <span class="comment">// 允许访问的域（协议+域名+端口）</span></div><div class="line">            <span class="string">'Set-Cookie'</span>: <span class="string">'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'</span>   <span class="comment">// HttpOnly:脚本无法读取cookie</span></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        res.write(<span class="built_in">JSON</span>.stringify(postData));</div><div class="line">        res.end();</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(<span class="string">'8080'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at port 8080...'</span>);</div></pre></td></tr></table></figure><h4 id="nginx代理跨域"><a href="#nginx代理跨域" class="headerlink" title="nginx代理跨域"></a>nginx代理跨域</h4><p>1、 nginx配置解决iconfont跨域</p><p>浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">  add_header Access-Control-Allow-Origin *;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2、 nginx反向代理接口跨域</p><p>跨域原理： 同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨越问题。</p><p>实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。</p><p>nginx具体配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#proxy服务器</div><div class="line">server &#123;</div><div class="line">    listen       <span class="number">81</span>;</div><div class="line">    server_name  www.domain1.com;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass   http:<span class="comment">//www.domain2.com:8080;  #反向代理</span></div><div class="line">        proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名</div><div class="line">        index  index.html index.htm;</div><div class="line"></div><div class="line">        # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</div><div class="line">        add_header Access-Control-Allow-Origin http:<span class="comment">//www.domain1.com;  #当前端只跨域不带cookie时，可为*</span></div><div class="line">        add_header Access-Control-Allow-Credentials <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>1.) 前端代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line"></div><div class="line"><span class="comment">// 前端开关：浏览器是否读写cookie</span></div><div class="line">xhr.withCredentials = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">// 访问nginx中的代理服务器</span></div><div class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'http://www.domain1.com:81/?user=admin'</span>, <span class="literal">true</span>);</div><div class="line">xhr.send();</div></pre></td></tr></table></figure><p>2.) Nodejs后台示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> server = http.createServer();</div><div class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</div><div class="line"></div><div class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> params = qs.parse(req.url.substring(<span class="number">2</span>));</div><div class="line"></div><div class="line">    <span class="comment">// 向前台写cookie</span></div><div class="line">    res.writeHead(<span class="number">200</span>, &#123;</div><div class="line">        <span class="string">'Set-Cookie'</span>: <span class="string">'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'</span>   <span class="comment">// HttpOnly:脚本无法读取</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    res.write(<span class="built_in">JSON</span>.stringify(params));</div><div class="line">    res.end();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(<span class="string">'8080'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at port 8080...'</span>);</div></pre></td></tr></table></figure><h4 id="Nodejs中间件代理跨域"><a href="#Nodejs中间件代理跨域" class="headerlink" title="Nodejs中间件代理跨域"></a>Nodejs中间件代理跨域</h4><p>node中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的cookie写入，方便接口登录认证。</p><p>1、 非vue框架的跨域（2次跨域）</p><p>利用node + express + http-proxy-middleware搭建一个proxy服务器。</p><p>1.) 前端代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line"></div><div class="line"><span class="comment">// 前端开关：浏览器是否读写cookie</span></div><div class="line">xhr.withCredentials = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">// 访问http-proxy-middleware代理服务器</span></div><div class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'http://www.domain1.com:3000/login?user=admin'</span>, <span class="literal">true</span>);</div><div class="line">xhr.send();</div></pre></td></tr></table></figure><p>2.) 中间件服务器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> proxy = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.use(<span class="string">'/'</span>, proxy(&#123;</div><div class="line">    <span class="comment">// 代理跨域目标接口</span></div><div class="line">    target: <span class="string">'http://www.domain2.com:8080'</span>,</div><div class="line">    changeOrigin: <span class="literal">true</span>,</div><div class="line"></div><div class="line">    <span class="comment">// 修改响应头信息，实现跨域并允许带cookie</span></div><div class="line">    onProxyRes: <span class="function"><span class="keyword">function</span>(<span class="params">proxyRes, req, res</span>) </span>&#123;</div><div class="line">        res.header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'http://www.domain1.com'</span>);</div><div class="line">        res.header(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="string">'true'</span>);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 修改响应信息中的cookie域名</span></div><div class="line">    cookieDomainRewrite: <span class="string">'www.domain1.com'</span>  <span class="comment">// 可以为false，表示不修改</span></div><div class="line">&#125;));</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Proxy server is listen at port 3000...'</span>);</div></pre></td></tr></table></figure><p>3.) Nodejs后台同( nginx )</p><p>2、 vue框架的跨域（1次跨域）</p><p>利用node + webpack + webpack-dev-server代理接口跨域。在开发环境下，由于vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域，无须设置headers跨域信息了。</p><p>webpack.config.js部分配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    entry: &#123;&#125;,</div><div class="line">    <span class="built_in">module</span>: &#123;&#125;,</div><div class="line">    ...</div><div class="line">    devServer: &#123;</div><div class="line">        historyApiFallback: <span class="literal">true</span>,</div><div class="line">        proxy: [&#123;</div><div class="line">            context: <span class="string">'/login'</span>,</div><div class="line">            target: <span class="string">'http://www.domain2.com:8080'</span>,  <span class="comment">// 代理跨域目标接口</span></div><div class="line">            changeOrigin: <span class="literal">true</span>,</div><div class="line">            cookieDomainRewrite: <span class="string">'www.domain1.com'</span>  <span class="comment">// 可以为false，表示不修改</span></div><div class="line">        &#125;],</div><div class="line">        noInfo: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="WebSocket协议跨域"><a href="#WebSocket协议跨域" class="headerlink" title="WebSocket协议跨域"></a>WebSocket协议跨域</h4><p>WebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现。</p><p>原生WebSocket API使用起来不太方便，我们使用Socket.io，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。</p><p>1.) 前端代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;user input：&lt;input type=<span class="string">"text"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">&lt;script src=<span class="string">"./socket.io.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">var</span> socket = io(<span class="string">'http://www.domain2.com:8080'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 连接成功处理</span></div><div class="line">socket.on(<span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 监听服务端消息</span></div><div class="line">    socket.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'data from server: ---&gt; '</span> + msg); </div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 监听服务端关闭</span></div><div class="line">    socket.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Server socket has closed.'</span>); </div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>)[<span class="number">0</span>].onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    socket.send(<span class="keyword">this</span>.value);</div><div class="line">&#125;;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><p>2.) Nodejs socket后台：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> socket = <span class="built_in">require</span>(<span class="string">'socket.io'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 启http服务</span></div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.writeHead(<span class="number">200</span>, &#123;</div><div class="line">        <span class="string">'Content-type'</span>: <span class="string">'text/html'</span></div><div class="line">    &#125;);</div><div class="line">    res.end();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(<span class="string">'8080'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at port 8080...'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 监听socket连接</span></div><div class="line">socket.listen(server).on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">client</span>) </span>&#123;</div><div class="line">    <span class="comment">// 接收信息</span></div><div class="line">    client.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">        client.send(<span class="string">'hello：'</span> + msg);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'data from client: ---&gt; '</span> + msg);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 断开处理</span></div><div class="line">    client.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Client socket has closed.'</span>); </div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="古老的Flash代理跨域"><a href="#古老的Flash代理跨域" class="headerlink" title="古老的Flash代理跨域"></a>古老的Flash代理跨域</h4><p>flash有点末落了，这里就不详细介绍了</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>简单的跨域请求jsonp即可，复杂的cors，窗口之间 JS跨域postMessage，开发环境下接口跨域用nginx反向代理或node中间件比较方便</p><blockquote><p>End..</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;最近参考一些网上的资料，结合自己的个人经历对前端跨域的问题进行了一些总结&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;什么是跨域&quot;&gt;&lt;a href=&quot;#什么是跨域&quot; class=&quot;headerlink&quot; title=&quot;什么是跨域&quot;&gt;&lt;/a&gt;什么是跨域&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里的跨域是广义的&lt;/li&gt;
&lt;li&gt;广义的跨域：&lt;br&gt;1.) 资源跳转：A链接、重定向、表单提交&lt;br&gt;2.) 资源嵌入：&lt;code&gt;&amp;lt;link&amp;gt;、&amp;lt;script&amp;gt;、&amp;lt;img&amp;gt;、&amp;lt;frame&amp;gt;&lt;/code&gt;等dom标签，还有样式中的&lt;code&gt;background：url()、@font-face()&lt;/code&gt;等文件外链&lt;br&gt;3.) 脚本请求：js发起的ajax请求、dom和js对象的跨域操作&lt;/li&gt;
&lt;li&gt;其实我们通常所说的跨域是狭义的，是由浏览器的&lt;mark&gt; 同源策略 &lt;/mark&gt;限制的一类请求场景&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="summary" scheme="http://haotengfei.com/tags/summary/"/>
    
      <category term="cross-domain" scheme="http://haotengfei.com/tags/cross-domain/"/>
    
  </entry>
  
  <entry>
    <title>关于Git</title>
    <link href="http://haotengfei.com/2017/04/05/about_git/"/>
    <id>http://haotengfei.com/2017/04/05/about_git/</id>
    <published>2017-04-05T11:40:00.000Z</published>
    <updated>2017-09-19T01:05:06.572Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><ul><li><b>本篇主要分为以下三个方面</b><ul><li>Shell和vi</li><li>版本控制</li><li>Git</li></ul></li><li>篇幅略长，一定要有耐心..</li></ul></blockquote><a id="more"></a><h3 id="Shell和vi"><a href="#Shell和vi" class="headerlink" title="Shell和vi"></a>Shell和vi</h3><h4 id="什么是shell"><a href="#什么是shell" class="headerlink" title="什么是shell"></a>什么是shell</h4><p>在计算机科学中，Shell俗称壳，用来区别于Kernel（核），是指“提供使用者使用界面”的软件（命令解析器）。它类似于DOS下的command和后来的cmd.exe。它接收用户命令，然后调用相应的应用程序。</p><h4 id="shell分类"><a href="#shell分类" class="headerlink" title="shell分类"></a>shell分类</h4><p>1、图形界面shell：通过提供友好的可视化界面，调用相应应用程序，如windows系列操作系统，Linux系统上的图形化应用程序GNOME、KDE等<br>2、命令行shell：通过键盘输入特定命令的方式，调用相应的应用程序，如windows系统的cmd.exe、Windows PowerShell，Linux系统的Bourne shell ( sh)、Bourne Again shell ( bash)等</p><h4 id="认识bash这个shell"><a href="#认识bash这个shell" class="headerlink" title="认识bash这个shell"></a>认识bash这个shell</h4><ul><li>在window系统下使用bash，需要一个软件，这个软件模拟集成了bash大部分命令</li><li>各个 shell 的功能都差不多， Linux 默认使用 bash ，所以我们主要学习bash的使用</li><li>bash命令格式<ul><li>命令 <code>[-options]  [参数]，如：tar  zxvf  demo.tar.gz</code></li><li>查看帮助：命令 <code>--help</code></li></ul></li><li>bash常见命令<ul><li>pwd (Print Working Directory) 查看当前目录</li><li>cd (Change Directory) 切换目录，如 cd /etc</li><li>ls (List) 查看当前目录下内容，如 <code>ls -al</code></li><li>mkdir (Make Directory) 创建目录，如 mkdir blog</li><li>touch 创建文件，如 touch index.html</li><li>cat 查看文件全部内容，如 cat index.html</li><li>less 查看文件，如more /etc/passwd、less /etc/passwd</li><li>rm (remove) 删除文件，如 <code>rm index.html、rm -rf  blog</code></li><li>rmdir (Remove Directory) 删除文件夹，只能删除空文件夹，不常用</li><li>mv (move) 移动文件或重命名，如 mv index.html./demo/index.html</li><li>cp (copy) 复制文件，cp index.html ./demo/index.html</li><li>tab 自动补全，连按两次会将所有匹配内容显示出来</li><li><code>&gt; 和 &gt;&gt;重定向，如echo hello world! &gt; README.md，&gt;覆盖 &gt;&gt;追加</code></li><li>| 管道符可以将多个命令连接使用，上一次（命令）的执行结果当成下一次（命令）的参数</li><li>grep 匹配内容，一般结合管道符使用(过滤)    </li></ul></li></ul><h4 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h4><p>如同Windows下的记事本，vi编辑器是Linux下的标配，通过它我们可以创建、编辑文件。它是一个随系统一起安装的文本编辑软件<br><strong>1、三种模式</strong><br>vi编辑器提供了3种模式，分别是命令模式、插入模式、底行模式，每种模式下用户所能进行的操作是不一样的</p><ul><li>3种模式的切换如下图所示：<br><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%871.png?raw=true" alt="模式切换图"><br>通过上图我们发现，输入模式是不能直接切换到末行模式的，必须要先切回到命令模式（按ESC键）<br><strong>2、使用vi/vim编辑器</strong><br>a) 打开/创建文件， vi 文件路径<br>b) 底行模式 :w保存，:w filenme另存为<br>c) 底行模式 :q退出<br>d) 底行模式 :wq保存并退出<br>e) 底行模式 :e! 撤销更改，返回到上一次保存的状态<br>f) 底行模式 :q! 不保存强制退出<br>g) 底行模式 :set nu 设置行号<br>h) 命令模式 ZZ（大写）保存并退出<br>i) 命令模式 u辙销操作，可多次使用<br>j) 命令模式 dd删除当前行<br>k) 命令模式 yy复制当前行<br>l) 命令模式 p 粘贴内容<br>m) 命令模式 ctrl+f向前翻页<br>n) 命令模式 ctrl+b向后翻页<br>o) 命令模式 i进入编辑模式，当前光标处插入<br>p) 命令模式 a进入编辑模式，当前光标后插入<br>q) 命令模式 A进入编辑模式，光标移动到行尾<br>r) 命令模式 o进入编辑模式，当前行下面插入新行<br>s) 命令模式 O进入编辑模式，当前行上面插入新行<br><strong>当我们处在编辑模式的情况下，和我们在Windows编辑器的使用相似</strong><h4 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h4></li><li>SSH是一种网络协议，用于计算机之间的加密登录</li><li>SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的是OpenSSH，它是自由软件，应用非常广泛</li><li>如果要在Windows系统中使用SSH，会用到另一种软件PuTTY</li><li>格式：ssh user@host<ul><li>user 代表真实存在的用户host代表要登录的远程计算机</li></ul></li><li>常见有两种加密技术，分别是对称性加密和非对称性加密，SSH属于后者</li><li>对称加密算法在加密和解密时使用的是同一个密钥；而非对称加密算法需要两个密钥来进行加密和解密，这两个秘钥分别是公开密钥（public key，简称公钥）和私有密钥（private key，简称私钥）</li><li><b>工作原理</b><ul><li>公钥和私钥是成对出现，可以通过<code>ssh-keygen -t rsa</code>来创建，既可以通过密钥来加密数据，也可以通过私钥来加密数据，如果是以公钥进行的数据加密，只能与之相对应的私钥才可以解密，相反如果以私钥进行的数据加密，则只能与之对应的公钥才可以将数据进行解密，这样就可以提高信息传递的安全性</li></ul></li><li><b>免密码登录（待定）</b><ul><li>我们可以将本地机器上的公钥保存到特定的远程计算机上，这样当我们再次登录访问这台远程计算机时就可以实现免密码登录了</li><li>1、<code>ssh-keygen -t rsa</code>会创建公钥和密钥（默认在用户目录/.ssh目录下）</li><li>2、<code>ssh-copy-id user@host</code>添加到对应远程主机的用户目录/.ssh目录下</li><li>3、也可以登录远程主机，进入到用户目录/.ssh目录下手动创建authorized_keys文件，并将自已的公钥粘入该文件</li></ul></li></ul><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><h4 id="关于版本控制"><a href="#关于版本控制" class="headerlink" title="关于版本控制"></a>关于版本控制</h4><ul><li>版本控制（Version Control Systems）是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。这个系统可以自动帮我们备份文件的每一次更改，并且可以非常方便的恢复到任意的备份（版本）状态</li><li>举例：我们通常都是手动的重命名一个文件进行备份的，index.html改成index1.html或者index.html.bak等形式，然后这种方式对于单个文件我们还能够管理，但是对于整个项目而言，就会成为噩梦了！！！我们不得不借助于软件来实现</li><li>实现版本控制的软件有很多种类，大致可以分为本地版本控制系统、集中式版本控制系统、分布式版本控制系统<h4 id="本地版本控制系统"><a href="#本地版本控制系统" class="headerlink" title="本地版本控制系统"></a>本地版本控制系统</h4></li></ul><p>借助软件我们可以记录下文件的每一次修改，如下图所示，文件被修改后，记录下了3个版本，这样我们通过版本控制系统（软件）便可以非常方便的恢复到任意版本</p><p><img style="width:70%" src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%872.png?raw=true" alt="本地版本控制系统图"></p><p>这种类型的版本控制系统，功能比较单一，比如很难实现多人协同开发，所以现在几乎很少使用了</p><h4 id="集中式版本控制系统"><a href="#集中式版本控制系统" class="headerlink" title="集中式版本控制系统"></a>集中式版本控制系统</h4><p>实际开发环境，一个项目通常是由多人协作共同完成的，如何让在不同终端上的开发者协同工作成了亟待解决的问题，集中式版本控制系统便应运而生了。它通过单一的集中管理的服务器，保存所有文件的修订版本，协同工作的开发者都通过客户端连到这台服务器，取出最新的文件或者提交更新。其代表为SVN，如下图所示</p><p><img style="width:70%" src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%873.png?raw=true" alt="集中式版本控制系统图"></p><p>这种方式很好解决了多人协同开发的问题，但是也有一个弊端，如果集中管理的服务器出现故障，将会导致数据（版本）丢失的风险，另外协同开发者从集中服务器中更新数据时，严重依赖网络，如果网络不佳，也给开发带来诸多不便</p><h4 id="分布式版本控制系统"><a href="#分布式版本控制系统" class="headerlink" title="分布式版本控制系统"></a>分布式版本控制系统</h4><p>分布式版本控制系统，则不需要中央服务器，每个协同开发者都拥有一个完整的版本库，这么一来，任何协同开发者用的服务器发生故障，事后都可以用其它协同开发者本地仓库恢复</p><p>由于版本库在本地计算机，也便不再受网络影响了。如果要将本地的修改，推送给其它协同开发者，还需要一台共享服务器，所有开发者通过这台共享服务器同步和更新数据。如下图所示</p><p><img style="width:65%" src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%874.png?raw=true" alt="分布式版本控制系统图"></p><p>分布式版本控制系统弥补了前面两种版本控制系统的缺陷，成为了版本控制的首选方案。其代表就是Git</p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><h4 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h4><ul><li>Window安装：<ul><li><a href="http://git-scm.com/download/win下载Git客户端软件，和普通软件安装方式一样" target="_blank" rel="external">http://git-scm.com/download/win下载Git客户端软件，和普通软件安装方式一样</a></li></ul></li><li>Linux安装：<ul><li>CentOS发行版：sudo yum install git</li><li>Ubuntu发行版：<code>sudo apt-get install git</code></li></ul></li><li>Mac安装：<ul><li>打开Terminal直接输入git命令，会自动提示，按提示引导安装即可</li></ul></li></ul><h4 id="Git工作原理"><a href="#Git工作原理" class="headerlink" title="Git工作原理"></a>Git工作原理</h4><p>为了更好的学习Git，我们们必须了解Git管理我们文件的4种状态，分别为未追踪（untracked）、已提交（committed）、已修改（modified）和已暂存（staged），由此引入 Git 项目的3个工作区域的概念：Git 仓库、工作目录以及暂存区域</p><p><strong>Git仓库</strong>目录是Git用来保存项目的元数据和对象数据库的地方。 这是Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据<br><strong>工作目录</strong>是对项目的某个版本独立提取出来的内容。这些从Git仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改<br><strong>暂存区域</strong>是一个文件，保存了下次将提交的文件列表信息，一般在Git仓库目录中。有时候也被称作“索引”（Index），不过一般说法还是叫暂存区域</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%875.png?raw=true" alt="Git工作原理图"></p><ul><li>基本的Git工作流程如下：<ul><li>在工作目录中修改文件</li><li>暂存文件，将文件的快照放入暂存区域</li><li>提交文件，找到暂存区域的文件，将快照永久性存储到Git仓库目录</li></ul></li></ul><h4 id="Git本地仓库"><a href="#Git本地仓库" class="headerlink" title="Git本地仓库"></a>Git本地仓库</h4><p>Git本地仓库指的是开发者计算机中的仓库</p><h5 id="Git基础"><a href="#Git基础" class="headerlink" title="Git基础"></a>Git基础</h5><p>命令行方式：任意目录（建议开发根目录）右键 &gt; Git Bash Here<br>1、配置用户<br>配置用户的意义在于记录开发者信息，以便在版本控制记录开发者的操作行为，如lion于2016-08-24解决了一个bug</p><ul><li><code>git config --global user.name</code> “自已的名字”</li><li><code>git config --global user.email</code> “自已的邮箱地址”</li><li><code>--global</code> 配置当前用户所有仓库</li><li>注：配置用户只需要执行1次，可以重复使用<br>2、初始化仓库<br>我们如果想要利用git进行版本控制，需要将现有项目初始化为一个仓库，或者将一个已有的使用git进行版本控制的仓库克隆到本地<br><code>git init</code></li></ul><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%876.png?raw=true" alt=""></p><p>git init会在当前项目目录中创建一个名为.git的隐藏目录，这个目录包含了暂存区和仓库两个区域，有了这个隐藏目录就可以使用git来管理项目了，通过<code>ls  -al</code> 可以查看</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%877.png?raw=true" alt=""></p><p>3、查看文件状态</p><p>初始化仓库后便可以进行开发了，进入到刚刚创建好并初始为仓库的目录，添加我们开发需要的文件<br>通过git status可以检测当前仓库文件的状态（未追踪untracked）</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%878.png?raw=true" alt=""></p><p>注：git会忽略空的目录</p><p>4、添加文件到暂存区</p><p>假设经过一段时间的开发后，需要把已开发的部分暂存起来等待提交，使用git add 添加到暂存区<br>git add 文件名/ 文件路径 “*”或<code>-A</code>代表所有</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%879.png?raw=true" alt=""></p><p>通过git status再次查看文件状态，放到暂存区的文件被标记成了绿色，等待提交</p><p>注：颜色是工具给添加的，目的是增加可读性并不是git统一的</p><p>5、撤销更改</p><p>继续我们的开发，再次git status可以再次查看仓库状态</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8710.png?raw=true" alt=""></p><p>被标记了红色，说明index.html被再次修改了</p><p>又经过一段时间后发现新开发的部分有Bug，想要回到之前状态，可以使用git checkout 文件名，将上次暂存的文件还原到工作区</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8711.png?raw=true" alt=""></p><p>5、提交文件</p><p>经过一个相对较长阶段开发或者一个功能开发完成了，就可以提交到本地仓库了，永久保存了</p><p><code>git commit -m</code> ‘备注信息’</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8712.png?raw=true" alt=""></p><p>将暂存区被标记成绿色的文件，全部提交到本地仓库存储</p><p>这时git status查看状态</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8713.png?raw=true" alt=""></p><p>没有什么可提交的，变的很干净</p><p>6、查看提交历史</p><p>反反复复开发了很多的功能了，通过git log查看一下提交的历史</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8715.png?raw=true" alt=""></p><p>我们可以查看到一次次的提交记录</p><p>7、再次检测仓库文件状态</p><p>隔了好些天后，继续开发<br>git status 查看状态</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8716.png?raw=true" alt=""></p><p>又提示有修改，等待重新添加到暂存区</p><p>8、重新添加暂存区然后提交</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8717.png?raw=true" alt=""></p><p>9、再次查看历史</p><p>git log 可查到所有提交历史</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8718.png?raw=true" alt=""></p><p>这时可以查看到更多提交历史</p><p>10、恢复到以前提交的版本</p><p>通过commit id值可以回到之前某一次的提交（时光倒流）<br><code>git reset --hard</code> c888a614e072e2这样便回到了支付功能的状态<br>git log再次查看发现最后一次提交成了支付功能了</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8719.png?raw=true" alt=""></p><p>仓库示意图</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8720.png?raw=true" alt=""></p><h4 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h4><ul><li>在我们的现实开发中，需求往往是五花八门的，同时开发个需求的情况十分常见，比如当你正在专注开发一个功能时，突然有一个紧急的BUG需要你来修复，这个时候我们当然是希望在能够保存当前任务进度，再去修改这个BUG，等这个BUG修复完成后再继续我们的任务。如何实现呢？</li><li><mark>Git通过创建分支来解决实际开发中类似的问题</mark></li><li>在Git的使用过程中一次提交称为历史记录（版本），并且会生成一个唯一的字符串，如下图</li></ul><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8721.png?raw=true" alt=""></p><ul><li>这个串可以代表某一个历史版本（<mark>实际使用只取前面几位就可以</mark>）</li><li>值得注意的是所有的提交（commit）实际上都是在分支（branch）的基础上进行的（只是前面并没有介绍）<br>如下图所示：</li></ul><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8722.png?raw=true" alt=""></p><ul><li>当我们在初始化仓库的时候（实际上是产生第1次提交时），Git会默认帮我们创建了一个master的分支，并且有指针（HEAD）指到了末端</li><li>指针（HEAD）用来标明当前处于哪个分支的哪个版本，如上图指的处于master分支的最后1个版本</li><li>我们也可以创建<mark>自已的分支</mark></li></ul><p>1、创建分支<br><mark>git branch 分支名称</mark><br>当接到一个新任务时，先创建一个分支，例如购物车功能git branch cart<br>新分支会在当前分支原有历史版本的结点上进行创建，我们称其为子分支，<br>如下图</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8723.png?raw=true" alt=""></p><p><mark>新建的子分支会继承父分支的所有提交历史</mark></p><p>2、切换分支<br><mark>git checkout cart(分支名称)</mark><br>上一步只是创建了一个新的分支cart，要开发购物车功能需要切换到cart分支，如下图</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8724.png?raw=true" alt=""></p><p>这时HEAD会指向cart的末端，然后再进行功能开发</p><p>3、提交操作</p><p>持续开发购物车功能</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8725.png?raw=true" alt=""></p><p>这次的提交历史版本就会记录在cart这个分支上了，并且HEAD伴随cart在移动</p><p>4、修复Bug</p><p>开发购物车过程中突然需要紧急修复一个bug，这时可以另外建立一个分支来进行修复，先切换到master分支，git checkout master</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8726.png?raw=true" alt=""></p><p>当我们切换回master后，HEAD指向了master分支的末端，并且我们观察发现我们工作目录中并没有购物车功能代码</p><p>5、创建新分支修复bug</p><p>修改并提交会在hotfix分支上创建新版本，并不会影响到cart分支的代码</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8727.png?raw=true" alt=""></p><p>5、继续之前的开发</p><p>修复完bug后切换回cart分支，继续开发购物车功能</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8728.png?raw=true" alt=""></p><p>注：当我们git checkout branchname时，HEAD会自动指向对应分支的末端，工作目录中的源码也会随之发生改变</p><p>这个时候我们就在hotfix这个分支上修复了这个BUG，而我们原来在cart分支上的操作并未受到影响</p><ul><li>思考一个问题：<ul><li>现在cart这个分支上是否包含了hotfix的修复呢？</li><li>实际上从上图可以看出这时的cart分支并没有包含有hotfix的修复</li></ul></li></ul><p>6、合并（融合）分支</p><p>git merge 分支名称（来源分支）</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8729.png?raw=true" alt=""></p><p>这时cart会有两个父结点了，cart便包含了hotfix里的修复了</p><p>7、删除分支</p><p><code>git branch -d hotfix</code></p><p>这时用来修复bug创建的hotfix分支已经没有用处了，我们可以将它删除</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8730.png?raw=true" alt=""></p><h4 id="Git远程（共享）仓库"><a href="#Git远程（共享）仓库" class="headerlink" title="Git远程（共享）仓库"></a>Git远程（共享）仓库</h4><ul><li>通过上面学习我们可以很好的管理本地版本控制了，可是如果我们下班回到家里突然来了灵感觉得有部分代码可以优化，如果能接着公司电脑上的代码继续写该有多好呀！另一种情形，假设项目比较大，不同的功能模块由不同的开发人员完成，不同模块儿之间又难免会依赖关系，这时如果我们的代码互相合并（融合）该有多好呀！所有模块开发完毕后，需要整合到一起，要能做到准确无误该有多好呀！</li><li>借助一个远程仓库，大家可以共享代码、历史版本等数据，便可以解决以上遇到的所有问题，在学习远程仓库前我们先来学习git clone path这个命令</li></ul><p>1、创建共享仓库</p><ul><li>Git要求共享仓库是一个以.git结尾的目录</li><li>mkdir repo.git 创建以.git结尾目录</li><li>cd repo.git 进入这个目录</li><li><code>git init --bare</code> 初始化一个共享仓库，也叫裸仓库 注意选项<code>--bare</code></li></ul><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8731.png?raw=true" alt=""></p><p>这样我们就建好了一个共享的仓库，但这时这个仓库是一个空的仓库，并且不允在这个仓库中进行任何修改</p><p>2、向共享仓库共享（同步）内容</p><p>将自已开发的项目同步到这个目录中，其它开发者就可以共享你开发的项目了</p><p>a) 进入到yike目录<br>b) git push ../repo.git master</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8732.png?raw=true" alt=""></p><p>3、从共享仓库里取出内容</p><ul><li>新创建一个目录（模拟另一个开发者）</li><li>git clone ./repo.git demo</li></ul><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8733.png?raw=true" alt=""></p><p>通过repo.git共享仓库，我们轻松得到了一个yike的副本</p><p>4、通过demo仓库向repo.git共享内容</p><ul><li>进入到demo里，我们做一些修改<ul><li>cd demo</li><li>git push ../repo.git master</li></ul></li></ul><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8734.png?raw=true" alt=""></p><p>5、在360仓库从repo.git获取共享的内容</p><ul><li>cd yike</li><li>git pull ../repo.git master</li></ul><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8735.png?raw=true" alt=""></p><ul><li>奇迹似乎发生了，我们轻松的将demo仓库里的内容，通过repo.git共享给了yike仓库</li><li>惊喜不断，问题也总是不断，我们发现我们这个共享的仓库只是放到了本地的，其它人是没有办法从我们这个共享仓库共享内容的！！！</li><li>然而现实是，办法总是有的！！！！</li><li>我们把这个共享的仓库放到一台远程服务器上，问题不就解决了吗！</li></ul><h4 id="gitHub和gitLab"><a href="#gitHub和gitLab" class="headerlink" title="gitHub和gitLab"></a>gitHub和gitLab</h4><ul><li>如果我们熟悉服务器的话，我们完全可以将上述的步骤在我们的远程服务器上进行操作，然后再做一些登录权限的设置，就可非常完美的搭建一个共享服务器了。其实为了更好的管理我们的仓库，一些第三方机构开发出了Web版仓库管理程序，通过Web界面形式管理仓库</li><li>gitHub关于它的名气与意义，大家可以自行查阅，我们这里介绍它的使用</li></ul><p>1、注册账号并完善资料<br>    —-自行注册略过<br>2、创建共享仓库</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8700.png?raw=true" alt=""></p><p>3、填写仓库资料</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8736.png?raw=true" alt=""></p><p>4、共享仓库</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8737.png?raw=true" alt=""></p><ul><li>远程地址特别长，我们可以给他起一个别名</li><li>git remote add origin git@github.com:Botue/repo.git</li><li>这样origin 就代表 git@github.com:Botue/repo.git</li><li>当我们通过git clone 从共享仓库获内容时，会自动帮我们添加origin到对应的仓库地址，例如：git clone git@github.com:Botue/repo.git 会自动添加origin 对应 git@github.com:Botue/repo.git</li></ul><p>5、生成密钥</p><p><code>ssh-keygen -t rsa</code> 然后一路回车，这里会在当前用户生成了一个.ssh的文件夹</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8738.png?raw=true" alt=""></p><p>将id_rsa.pub公钥的内容复制<br>打开gitHub的个人中心</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8739.png?raw=true" alt=""></p><p>打到SSH keys</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8740.png?raw=true" alt=""></p><ul><li>到此我们便可以通过gitHub 提供的Web界面来管理我们的仓库了</li><li>我们发现通过gitHub管理仓库实在是太方便了，可是只能免费使用公开仓库，自已公司的代码当然不能公开了，可是私有仓库又是需要交“保护费”的，无耐国人还是比较喜欢免费的，网络界总是有很多雷峰的，比如gitLab!!!</li><li>gitLab也是一个可以通过Web界面管理仓库的网站程序，我们可以把它架设到公司自已的服务器上，实现仓库私有化，这也是大部分公司通常采用的方法，其使用方法与gitHub十分相似</li><li>我将闲置电脑配置成了一台服务器，上面架设了gitLab程序，我们接下来的练习全部会在gitLab上进行演示</li><li>省略很多内容…..</li></ul><h4 id="命令汇总"><a href="#命令汇总" class="headerlink" title="命令汇总"></a>命令汇总</h4><ul><li>git config配置本地仓库<ul><li>常用<code>git config --global user.name</code>、<code>git config --global user.email</code></li></ul></li><li><code>git config --list</code>查看配置详情</li><li>git init 初始一个仓库，添加<code>--bare</code>可以初始化一个共享（裸）仓库</li><li>git status 可以查看当前仓库的状态</li><li>git add“文件” 将工作区中的文件添加到暂存区中，其中file可是一个单独的文件，也可以是一个目录、“*”、<code>-A</code></li><li><code>git commit -m</code> ‘备注信息’ 将暂存区的文件，提交到本地仓库</li><li>git log 可以查看本地仓库的提交历史</li><li>git branch查看分支  </li><li>git branch“分支名称” 创建一个新的分支</li><li>git checkout“分支名称” 切换分支</li><li><code>git checkout -b deeveloper</code> 创建并切到developer分支 </li><li>git merge“分支名称” 合并分支</li><li><code>git branch -d</code> “分支名称” 删除分支</li><li><code>git rm --cache</code> 文件名，撤销添加到暂存区里的文件</li><li><code>git rm -f</code> 文件名,删除暂存区和工作区的文件(慎用，删了就没有了)</li><li>git clone “仓库地址”获取已有仓库的副本</li><li>git push origin “本地分支名称:远程分支名称”将本地分支推送至远程仓库<ul><li>git push origin hotfix（通常的写法）相当于</li><li>git push origin hotfix:hotfix</li><li>git push origin hotfix:newfeature</li><li>本地仓库分支名称和远程仓库分支名称一样的情况下可以简写成一个，即git push “仓库地址” “分支名称”，如果远程仓库没有对应分支，将会自动创建</li><li>git remote add “主机名称” “远程仓库地址”添加远程主机，即给远程主机起个别名，方便使用</li><li>git remote 可以查看已添加的远程主机</li><li>git remote show “主机名称”可以查看远程主机的信息</li></ul></li></ul><h4 id="GitLab完整演示"><a href="#GitLab完整演示" class="headerlink" title="GitLab完整演示"></a>GitLab完整演示</h4><p>没错，Git非常强大！</p><p>但是，如果我们的分支不加以规范管理，也有可能适得其反！</p><p>1、不要有太多的树杈（子分支）<br>2、要有一个“稳定分支”，即master分支不要轻意被修改<br>3、要有一个开发分支（developer），保证master分支的稳定性<br>4、所有的功能分支（feature）从developer创建<br>5、所有功能开发完成后新建发布分支（release）</p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8741.png?raw=true" alt=""></p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8742.png?raw=true" alt=""></p><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8743.png?raw=true" alt=""></p><h4 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h4><ul><li>假如两个开发同时改到同一文件的同一段内容会发生什么事情呢？</li><li>这时就会就会产生冲突了，当冲突产生后，需要开发者进行协商确认冲突的原因，然后将冲突代码删除重新提交就可以了。</li></ul><h4 id="Git高级"><a href="#Git高级" class="headerlink" title="Git高级"></a>Git高级</h4><p>熟悉掌握以上操作，基本上是可以满足日常开发的需要的，但是在解决一些特殊问题时，就又需要我们能够掌握更多的命令</p><p>1、.gitignore忽略文件</p><ul><li>在项目根目录下创建一个.gitignore文件(注意点开头，可以在编辑器中去创建)，可以将不希望提交的罗列在这个文件里，如项目的配置文件、node_modules等</li><li><a href="https://github.com/github/gitignore" target="_blank" rel="external">https://github.com/github/gitignore</a></li></ul><p>2、比较差异</p><ul><li>当内容被修改，我们无法确定修改哪些内容时，可以通过git diff来进行差异比较</li><li>git difftool 比较的是工作区和暂存的差异</li><li>git difftool “SHA”比较与特定提交的差异</li><li>git difftool “SHA”“SHA”比较某两次提交的差异</li><li>git difftool 分支名称 比较与某个分支的差异</li><li>回滚（撤销）操作</li></ul><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8744.png?raw=true" alt=""></p><p>HEAD 默认指向当前分支的“末端”，即最后的一次提交，但是我们通过git reset 可以改变HEAD的指向<br><b>看情况解释（稍微复杂一些，理解就好）</b><br>a) git reset<br><code>--hard</code> 工作区会变、历史(HEAD)会变， 暂存区也变<br><code>--soft</code> 只会变历史(HEAD)<br><code>--mixed</code>（默认是这个选项）历史(HEAD)会变、暂存区也变，工作区不变<br>b) git checkout<br><code>git checkout SHA --</code> “某个文件”，代表只是从SHA这个版中取出特定的文件，和git reset 是有区别的，reset 重写了历史，checkout 则没有</p><p>3、更新仓库<br>在项目开发过程中，经常性的会遇到远程（共享）仓库和本地仓库不一致，我们可以通过git fetch 命令来更新本地仓库，使本地仓库和远程（共享）仓库保持一致</p><ul><li>git fetch  “远程主机”</li><li>git fetch “远程主机” “分支名称”</li></ul><p>我们要注意的是，利用git fetch 获取的更新会保存在本地仓库中，但是并没有体现到我们的工作目录中，需要我们再次利用git merge来将对应的分支合并（融合）到特定分支。如下</p><ul><li>git pull origin 某个分支， 上操作相当于下面两步<ul><li>git fetch </li><li>git merge origin/某个分支</li></ul></li></ul><p>问题：如何查看远程主机上总共有多少个分支？</p><ul><li><code>git branch -a</code> 便可以查看所有(本地+远程仓库)分支了</li></ul><p><img src="https://github.com/TengFeiHao/pics/blob/master/%E5%9B%BE%E7%89%8745.png?raw=true" alt=""></p><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><ul><li>删除远程分支<code>git push origin --delete</code> 分支名称</li><li>删除远程分支git push origin :分支名称</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;b&gt;本篇主要分为以下三个方面&lt;/b&gt;&lt;ul&gt;
&lt;li&gt;Shell和vi&lt;/li&gt;
&lt;li&gt;版本控制&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;篇幅略长，一定要有耐心..&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="summary" scheme="http://haotengfei.com/tags/summary/"/>
    
      <category term="Git" scheme="http://haotengfei.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>canvas结合面向对象（下）</title>
    <link href="http://haotengfei.com/2017/03/03/canvas_oop_3/"/>
    <id>http://haotengfei.com/2017/03/03/canvas_oop_3/</id>
    <published>2017-03-03T11:05:00.000Z</published>
    <updated>2017-09-18T01:07:37.412Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=189259&auto=0&height=66"></iframe><blockquote><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><ul><li><b>canvas实现小鸟游戏</b></li></ul><ul><li><p>结构：</p><ul><li>fb.js当作一个管理模块的js里面创建了一个img加载的方法(对象);</li><li>根据fb.js去创建不同的功能的模块(sky.js、pipe.js、land.js、bird.js);</li><li>最后通过game.js将这些模块组织在一起，按照一定的规则运行游戏。</li></ul></li><li><p>通过这个小游戏，可以很好的理解，认识，运用面向对象，充分体验出了其易维护、质量高、效率高、易扩展、可读性高等优点。</p></li></ul></blockquote><a id="more"></a><h3 id="canvas-小鸟游戏"><a href="#canvas-小鸟游戏" class="headerlink" title="canvas 小鸟游戏"></a>canvas 小鸟游戏</h3><p><b>请点击查看效果图</b><a target="_blank" href="/assets/demo/test/bird1.html">&nbsp;&nbsp;&nbsp;demo</a><br><!-- <iframe src='/assets/demo/bird/index.html'></iframe> --><br><!-- [demo](/assets/demo/jiugongge_demo2.html) --></p><h3 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        canvas&#123;</span></div><div class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">            display: block;</span></div><div class="line"><span class="undefined">            margin: 0 auto;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"800"</span> <span class="attr">height</span>=<span class="string">"600"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/fb.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/sky.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/pipe.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/land.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/bird.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/game.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> game = <span class="keyword">new</span> FB.Game();</span></div><div class="line"><span class="undefined">    game.init();</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="入口函数和资源加载-fb-js"><a href="#入口函数和资源加载-fb-js" class="headerlink" title="入口函数和资源加载(fb.js)"></a>入口函数和资源加载(fb.js)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">window</span>) </span>&#123;</div><div class="line">    <span class="built_in">window</span>.FB = &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> loadSource = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.paths = [<span class="string">'birds'</span>,<span class="string">'land'</span>,<span class="string">'pipe1'</span>,<span class="string">'pipe2'</span>,<span class="string">'sky'</span>];</div><div class="line">        <span class="keyword">this</span>.dir = <span class="string">'images/'</span>;</div><div class="line">        <span class="keyword">this</span>.fix = <span class="string">'.png'</span>;</div><div class="line">    &#125;</div><div class="line">    loadSource.prototype.load = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">var</span> imgTotal = that.paths.length;</div><div class="line">        <span class="keyword">var</span> loadedNum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> imgList = &#123;&#125;;</div><div class="line">        <span class="keyword">this</span>.paths.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> img = <span class="keyword">new</span> Image()</div><div class="line">            img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                loadedNum ++;</div><div class="line">                imgList[item] = img;</div><div class="line">                <span class="keyword">if</span>(loadedNum == imgTotal)&#123;</div><div class="line">                    <span class="comment">/*开始游戏了完成业务*/</span></div><div class="line">                    callback &amp;&amp; callback(imgList);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            img.src = that.dir + item + that.fix;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    FB.loadSource = loadSource;</div><div class="line">&#125;)(<span class="built_in">window</span>)</div></pre></td></tr></table></figure><h3 id="管理天空的函数-sky-js"><a href="#管理天空的函数-sky-js" class="headerlink" title="管理天空的函数(sky.js)"></a>管理天空的函数(sky.js)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">fb</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> Sky = <span class="function"><span class="keyword">function</span> (<span class="params">ctx,skyImg,x</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ctx = ctx;</div><div class="line">        <span class="comment">/*确定绘制的位置*/</span></div><div class="line">        <span class="keyword">this</span>.x = x || <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>.y = <span class="number">0</span>;</div><div class="line">        <span class="comment">/*图片*/</span></div><div class="line">        <span class="keyword">this</span>.img = skyImg;</div><div class="line">        <span class="comment">/*速度*/</span></div><div class="line">        <span class="keyword">this</span>.speed = <span class="number">3</span>;</div><div class="line">    &#125;;</div><div class="line">    Sky.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ctx.drawImage(<span class="keyword">this</span>.img,<span class="keyword">this</span>.x,<span class="keyword">this</span>.y);</div><div class="line">        <span class="keyword">this</span>.x -= <span class="keyword">this</span>.speed;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.x &lt; - <span class="keyword">this</span>.ctx.canvas.width)&#123;</div><div class="line">            <span class="comment">/*不能直接定位在800位置*/</span></div><div class="line">            <span class="keyword">this</span>.x += <span class="number">2</span> * <span class="keyword">this</span>.ctx.canvas.width;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    fb.Sky = Sky;</div><div class="line">&#125;)(FB);</div></pre></td></tr></table></figure><h3 id="管理管子的函数-pipe-js"><a href="#管理管子的函数-pipe-js" class="headerlink" title="管理管子的函数(pipe.js)"></a>管理管子的函数(pipe.js)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">fb</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> Pipe = <span class="function"><span class="keyword">function</span> (<span class="params">ctx,topImg,botImg,x</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ctx = ctx;</div><div class="line">        <span class="keyword">this</span>.topImg = topImg;</div><div class="line">        <span class="keyword">this</span>.botImg = botImg;</div><div class="line">        <span class="comment">/*上下管道的距离*/</span></div><div class="line">        <span class="keyword">this</span>.space = <span class="number">200</span>;</div><div class="line">        <span class="comment">/*管道尺寸*/</span></div><div class="line">        <span class="keyword">this</span>.pipeWidth = <span class="keyword">this</span>.topImg.width;</div><div class="line">        <span class="keyword">this</span>.pipeHeight = <span class="keyword">this</span>.topImg.height;</div><div class="line">        <span class="comment">/*管道定位*/</span></div><div class="line">        <span class="comment">/*空出运行路线*/</span></div><div class="line">        <span class="keyword">this</span>.x = x + <span class="number">400</span>;</div><div class="line">        <span class="comment">/*速度*/</span></div><div class="line">        <span class="keyword">this</span>.speed = <span class="number">3</span>;</div><div class="line">        <span class="comment">/*初始化Y坐标  定位管道的*/</span></div><div class="line">        <span class="keyword">this</span>.initY();</div><div class="line">    &#125;</div><div class="line">    Pipe.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">/*绘制管道*/</span></div><div class="line">        <span class="keyword">this</span>.ctx.drawImage(<span class="keyword">this</span>.topImg,<span class="keyword">this</span>.x,<span class="keyword">this</span>.topY);</div><div class="line">        <span class="keyword">this</span>.ctx.drawImage(<span class="keyword">this</span>.botImg,<span class="keyword">this</span>.x,<span class="keyword">this</span>.botY);</div><div class="line">        <span class="comment">/*绘制和管道一样大小的路径*/</span></div><div class="line">        <span class="keyword">this</span>.ctx.rect(<span class="keyword">this</span>.x,<span class="keyword">this</span>.topY,<span class="keyword">this</span>.pipeWidth,<span class="keyword">this</span>.pipeHeight);</div><div class="line">        <span class="keyword">this</span>.ctx.rect(<span class="keyword">this</span>.x,<span class="keyword">this</span>.botY,<span class="keyword">this</span>.pipeWidth,<span class="keyword">this</span>.pipeHeight);</div><div class="line">        <span class="comment">//this.ctx.stroke();</span></div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">this</span>.x -= <span class="keyword">this</span>.speed;</div><div class="line">        <span class="comment">/*衔接*/</span></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.x &lt; - <span class="keyword">this</span>.topImg.width)&#123;</div><div class="line">            <span class="keyword">this</span>.x += <span class="number">6</span>*<span class="number">3</span>*<span class="keyword">this</span>.topImg.width;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    Pipe.prototype.initY = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> randomH = <span class="number">80</span> * <span class="built_in">Math</span>.random();</div><div class="line">        <span class="keyword">var</span> minH = <span class="number">140</span>;</div><div class="line">        <span class="keyword">var</span> topH = minH + randomH; <span class="comment">/*140-220*/</span></div><div class="line">        <span class="comment">/*上面图片定位 Y轴*/</span></div><div class="line">        <span class="keyword">this</span>.topY = -<span class="keyword">this</span>.pipeHeight + topH;</div><div class="line">        <span class="comment">/*下面图片定位 Y轴*/</span></div><div class="line">        <span class="keyword">this</span>.botY = topH + <span class="keyword">this</span>.space;</div><div class="line">    &#125;</div><div class="line">    fb.Pipe = Pipe;</div><div class="line">&#125;)(FB);</div></pre></td></tr></table></figure><h3 id="管理陆地的函数-land-js"><a href="#管理陆地的函数-land-js" class="headerlink" title="管理陆地的函数(land.js)"></a>管理陆地的函数(land.js)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">fb</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> Land = <span class="function"><span class="keyword">function</span> (<span class="params">ctx,landImg,x</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ctx = ctx;</div><div class="line">        <span class="keyword">this</span>.landImg = landImg;</div><div class="line">        <span class="keyword">this</span>.x = x;</div><div class="line">        <span class="keyword">this</span>.y = <span class="keyword">this</span>.ctx.canvas.height - <span class="keyword">this</span>.landImg.height;</div><div class="line">        <span class="keyword">this</span>.speed = <span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line">    Land.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ctx.drawImage(<span class="keyword">this</span>.landImg,<span class="keyword">this</span>.x,<span class="keyword">this</span>.y);</div><div class="line">        <span class="keyword">this</span>.x -= <span class="keyword">this</span>.speed;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.x &lt; - <span class="keyword">this</span>.landImg.width)&#123;</div><div class="line">            <span class="keyword">this</span>.x += <span class="number">4</span> * <span class="keyword">this</span>.landImg.width;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    fb.Land = Land;</div><div class="line">&#125;)(FB);</div></pre></td></tr></table></figure><h3 id="管理小鸟的函数-bird-js"><a href="#管理小鸟的函数-bird-js" class="headerlink" title="管理小鸟的函数(bird.js)"></a>管理小鸟的函数(bird.js)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">fb</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> Land = <span class="function"><span class="keyword">function</span> (<span class="params">ctx,landImg,x</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ctx = ctx;</div><div class="line">        <span class="keyword">this</span>.landImg = landImg;</div><div class="line">        <span class="keyword">this</span>.x = x;</div><div class="line">        <span class="keyword">this</span>.y = <span class="keyword">this</span>.ctx.canvas.height - <span class="keyword">this</span>.landImg.height;</div><div class="line">        <span class="keyword">this</span>.speed = <span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line">    Land.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ctx.drawImage(<span class="keyword">this</span>.landImg,<span class="keyword">this</span>.x,<span class="keyword">this</span>.y);</div><div class="line">        <span class="keyword">this</span>.x -= <span class="keyword">this</span>.speed;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.x &lt; - <span class="keyword">this</span>.landImg.width)&#123;</div><div class="line">            <span class="keyword">this</span>.x += <span class="number">4</span> * <span class="keyword">this</span>.landImg.width;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    fb.Land = Land;</div><div class="line">&#125;)(FB);</div></pre></td></tr></table></figure><h3 id="管理整个游戏-规则、控制各个函数-的函数-game-js"><a href="#管理整个游戏-规则、控制各个函数-的函数-game-js" class="headerlink" title="管理整个游戏(规则、控制各个函数)的函数(game.js)"></a>管理整个游戏(规则、控制各个函数)的函数(game.js)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">fb</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> Game = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">/*获取画布*/</span></div><div class="line">        <span class="keyword">this</span>.ctx = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</div><div class="line">        <span class="comment">/*定义命令*/</span></div><div class="line">        <span class="keyword">this</span>.running = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    Game.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.gameStart();</div><div class="line">    &#125;</div><div class="line">    Game.prototype.gameStart = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">        <span class="comment">/*必须加载资源*/</span></div><div class="line">        <span class="keyword">var</span> loadSource = <span class="keyword">new</span> fb.loadSource();</div><div class="line">        loadSource.load(<span class="function"><span class="keyword">function</span> (<span class="params">imgList</span>) </span>&#123;</div><div class="line">            <span class="comment">/*完成游戏的开始*/</span></div><div class="line">            <span class="keyword">var</span> objectList = [];</div><div class="line">            <span class="comment">/*初始化天空对象*/</span></div><div class="line">            <span class="keyword">var</span> skyImg = imgList[<span class="string">'sky'</span>];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">                <span class="keyword">var</span> sky = <span class="keyword">new</span> fb.Sky(that.ctx,skyImg,i*that.ctx.canvas.width);</div><div class="line">                objectList.push(sky);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">/*初始化管道对象*/</span></div><div class="line">            <span class="keyword">var</span> pipeTopImg = imgList[<span class="string">'pipe2'</span>];</div><div class="line">            <span class="keyword">var</span> pipeBotImg = imgList[<span class="string">'pipe1'</span>];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</div><div class="line">                <span class="keyword">var</span> pipe = <span class="keyword">new</span> fb.Pipe(that.ctx,pipeTopImg,pipeBotImg,i*<span class="number">3</span>*pipeTopImg.width);</div><div class="line">                objectList.push(pipe);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">/*初始化陆地*/</span></div><div class="line">            <span class="keyword">var</span> landImg = imgList[<span class="string">'land'</span>];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">                <span class="keyword">var</span> land = <span class="keyword">new</span> fb.Land(that.ctx,landImg,i*landImg.width);</div><div class="line">                objectList.push(land);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">/*初始化鸟*/</span></div><div class="line">            <span class="keyword">var</span> bird = <span class="keyword">new</span> fb.Bird(that.ctx,imgList[<span class="string">'birds'</span>]);</div><div class="line">            objectList.push(bird);</div><div class="line"></div><div class="line">            <span class="keyword">var</span> animation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="comment">/*清空画布*/</span></div><div class="line">                that.ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,that.ctx.canvas.width,that.ctx.canvas.height);</div><div class="line">                <span class="comment">/*开启新路径*/</span></div><div class="line">                that.ctx.beginPath();</div><div class="line"></div><div class="line">                <span class="comment">/*天空绘制*/</span></div><div class="line">                <span class="comment">/*管道绘制*/</span></div><div class="line">                <span class="comment">/*陆地绘制*/</span></div><div class="line">                <span class="comment">/*小鸟绘制*/</span></div><div class="line">                objectList.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">                    item.draw();</div><div class="line">                &#125;)</div><div class="line"></div><div class="line">                <span class="comment">/*游戏规则*/</span></div><div class="line">                <span class="comment">/*1.碰到地面  game over */</span></div><div class="line">                <span class="keyword">if</span>(bird.y &gt;= that.ctx.canvas.height - landImg.height - <span class="number">20</span>)&#123;</div><div class="line">                    <span class="comment">/*结束游戏  停止动画*/</span></div><div class="line">                    that.gameOver();</div><div class="line">                &#125;</div><div class="line">                <span class="comment">/*2.碰到天花板  game over */</span></div><div class="line">                <span class="keyword">if</span>(bird.y &lt;= <span class="number">10</span>)&#123;</div><div class="line">                    that.gameOver();</div><div class="line">                &#125;</div><div class="line">                <span class="comment">/*3.碰到管道  game over */</span></div><div class="line">                <span class="keyword">if</span>(that.ctx.isPointInPath(bird.x,bird.y))&#123;</div><div class="line">                    that.gameOver();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(that.running)&#123;</div><div class="line">                    requestAnimationFrame(animation);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            animation();</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    Game.prototype.gameOver = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.running = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    fb.Game = Game;</div><div class="line">&#125;)(FB);</div></pre></td></tr></table></figure><blockquote><p>end…</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=189259&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;b&gt;canvas实现小鸟游戏&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fb.js当作一个管理模块的js里面创建了一个img加载的方法(对象);&lt;/li&gt;
&lt;li&gt;根据fb.js去创建不同的功能的模块(sky.js、pipe.js、land.js、bird.js);&lt;/li&gt;
&lt;li&gt;最后通过game.js将这些模块组织在一起，按照一定的规则运行游戏。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过这个小游戏，可以很好的理解，认识，运用面向对象，充分体验出了其易维护、质量高、效率高、易扩展、可读性高等优点。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://haotengfei.com/tags/js/"/>
    
      <category term="canvas" scheme="http://haotengfei.com/tags/canvas/"/>
    
      <category term="oop" scheme="http://haotengfei.com/tags/oop/"/>
    
      <category term="demo" scheme="http://haotengfei.com/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>canvas结合面向对象（中）</title>
    <link href="http://haotengfei.com/2017/03/03/canvas_oop_2/"/>
    <id>http://haotengfei.com/2017/03/03/canvas_oop_2/</id>
    <published>2017-03-03T06:22:00.000Z</published>
    <updated>2017-09-18T01:07:32.586Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=857896&auto=0&height=66" style="margin-left: -10px;"></iframe><blockquote><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><ul><li>canvas实现折线图</li><li>canvas实现饼状图</li><li>canvas实现刮刮乐</li><li>canvas实现人物左右移动</li><li>canvas实现方向键控制人物行走<br><b style="color:hotpink">代码有点多哦,看累了就听会音乐(<em>^__^</em>)</b></li></ul></blockquote><a id="more"></a><h3 id="canvas-实现折线图"><a href="#canvas-实现折线图" class="headerlink" title="canvas 实现折线图"></a>canvas 实现折线图</h3><p><b>请点击查看效果图</b><a target="_blank" href="/assets/demo/test/lineChart.html">&nbsp;&nbsp;&nbsp;demo</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        canvas &#123;</span></div><div class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    <span class="comment">/*1.准备数据*/</span></span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> data = [</span></div><div class="line"><span class="undefined">        &#123;x:100,y:100&#125;,</span></div><div class="line"><span class="undefined">        &#123;x:200,y:120&#125;,</span></div><div class="line"><span class="undefined">        &#123;x:300,y:180&#125;,</span></div><div class="line"><span class="undefined">        &#123;x:400,y:300&#125;,</span></div><div class="line"><span class="undefined">        &#123;x:500,y:140&#125;</span></div><div class="line"><span class="undefined">    ]</span></div><div class="line"><span class="actionscript">    <span class="comment">/*2.构建对象*/</span></span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> LineChart = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*绘图工具*/</span></span></div><div class="line"><span class="javascript">        <span class="keyword">this</span>.ctx = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span></div><div class="line"><span class="actionscript">        <span class="comment">/*画布的尺寸*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.width = <span class="keyword">this</span>.ctx.canvas.width;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.height = <span class="keyword">this</span>.ctx.canvas.height;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*间距*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.space = <span class="number">20</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*原点坐标*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.x0 = <span class="keyword">this</span>.space;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.y0 = <span class="keyword">this</span>.height - <span class="keyword">this</span>.space;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*箭头大小*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.arrow = <span class="number">10</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*点大小*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.edge = <span class="number">8</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*初始方法*/</span></span></div><div class="line"><span class="actionscript">    LineChart.prototype.init = <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.drawAxis();</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.drawDots(data);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*画轴*/</span></span></div><div class="line"><span class="actionscript">    LineChart.prototype.drawAxis = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*x轴*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.x0,<span class="keyword">this</span>.y0);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width-<span class="keyword">this</span>.space,<span class="keyword">this</span>.y0);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width-<span class="keyword">this</span>.space-<span class="keyword">this</span>.arrow,<span class="keyword">this</span>.y0+<span class="keyword">this</span>.arrow/<span class="number">2</span>);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width-<span class="keyword">this</span>.space-<span class="keyword">this</span>.arrow,<span class="keyword">this</span>.y0-<span class="keyword">this</span>.arrow/<span class="number">2</span>);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width-<span class="keyword">this</span>.space,<span class="keyword">this</span>.y0);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.stroke();</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.fill();</span></div><div class="line"><span class="actionscript">        <span class="comment">/*y轴*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.x0,<span class="keyword">this</span>.y0);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space,<span class="keyword">this</span>.space);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space + <span class="keyword">this</span>.arrow/<span class="number">2</span>,<span class="keyword">this</span>.space + <span class="keyword">this</span>.arrow);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space - <span class="keyword">this</span>.arrow/<span class="number">2</span>,<span class="keyword">this</span>.space + <span class="keyword">this</span>.arrow);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space,<span class="keyword">this</span>.space);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.stroke();</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.fill();</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*画点*/</span></span></div><div class="line"><span class="actionscript">    <span class="comment">/*转换坐标轴*/</span></span></div><div class="line"><span class="actionscript">    LineChart.prototype.transform = <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> canvasData = [];</span></div><div class="line"><span class="actionscript">        data.forEach(<span class="function"><span class="keyword">function</span> <span class="params">(item, i)</span> </span>&#123;</span></div><div class="line"><span class="undefined">            canvasData.push(&#123;x:that.x0+item.x,y:that.y0-item.y&#125;);</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="actionscript">        <span class="keyword">return</span> canvasData;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*绘制单个点*/</span></span></div><div class="line"><span class="actionscript">    LineChart.prototype.drawDot = <span class="function"><span class="keyword">function</span> <span class="params">(dotted)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.moveTo(dotted.x-<span class="keyword">this</span>.edge/<span class="number">2</span>,dotted.y-<span class="keyword">this</span>.edge/<span class="number">2</span>);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(dotted.x+<span class="keyword">this</span>.edge/<span class="number">2</span>,dotted.y-<span class="keyword">this</span>.edge/<span class="number">2</span>);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(dotted.x+<span class="keyword">this</span>.edge/<span class="number">2</span>,dotted.y+<span class="keyword">this</span>.edge/<span class="number">2</span>);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(dotted.x-<span class="keyword">this</span>.edge/<span class="number">2</span>,dotted.y+<span class="keyword">this</span>.edge/<span class="number">2</span>);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.closePath();</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.fill();</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*绘制多个点*/</span></span></div><div class="line"><span class="actionscript">    LineChart.prototype.drawDots = <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> canvasData = <span class="keyword">this</span>.transform(data);</span></div><div class="line"><span class="actionscript">        canvasData.forEach(<span class="function"><span class="keyword">function</span> <span class="params">(item,i)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">            <span class="comment">/*绘制单个点*/</span></span></div><div class="line"><span class="undefined">            that.drawDot(item);</span></div><div class="line"><span class="actionscript">            <span class="comment">/*绘制线*/</span></span></div><div class="line"><span class="actionscript">            <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span></div><div class="line"><span class="undefined">                that.drawLine(that.x0,that.y0,item.x,item.y);</span></div><div class="line"><span class="actionscript">            &#125;<span class="keyword">else</span>&#123;</span></div><div class="line"><span class="undefined">                that.drawLine(canvasData[i-1].x,canvasData[i-1].y,item.x,item.y);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*绘制线*/</span></span></div><div class="line"><span class="actionscript">    LineChart.prototype.drawLine = <span class="function"><span class="keyword">function</span> <span class="params">(mx,my,lx,ly)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.moveTo(mx,my);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(lx,ly);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.stroke();</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">    <span class="keyword">new</span> LineChart().init(data);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="canvas实现饼状图"><a href="#canvas实现饼状图" class="headerlink" title="canvas实现饼状图"></a>canvas实现饼状图</h3><p><b>请点击查看效果图</b><a target="_blank" href="/assets/demo/test/pieChart.html">&nbsp;&nbsp;&nbsp;demo</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        canvas &#123;</span></div><div class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">            display: block;</span></div><div class="line"><span class="undefined">            margin: 0 auto;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line"><span class="comment">1.绘制饼</span></div><div class="line"><span class="comment">数据（人数）转换弧度</span></div><div class="line"><span class="comment">随机颜色</span></div><div class="line"><span class="comment">2.绘制标题</span></div><div class="line"><span class="comment">数据（标题）</span></div><div class="line"><span class="comment">3.绘制说明</span></div><div class="line"><span class="comment">随机颜色</span></div><div class="line"><span class="comment">标题</span></div><div class="line"><span class="comment">--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    <span class="comment">/*准备数据*/</span></span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> data = [</span></div><div class="line"><span class="undefined">        &#123;</span></div><div class="line"><span class="actionscript">            title: <span class="string">'15-20岁'</span>,</span></div><div class="line"><span class="undefined">            num: 12</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        &#123;</span></div><div class="line"><span class="actionscript">            title: <span class="string">'20-25岁'</span>,</span></div><div class="line"><span class="undefined">            num: 30</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        &#123;</span></div><div class="line"><span class="actionscript">            title: <span class="string">'25-30岁'</span>,</span></div><div class="line"><span class="undefined">            num: 22</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        &#123;</span></div><div class="line"><span class="actionscript">            title: <span class="string">'30-35岁'</span>,</span></div><div class="line"><span class="undefined">            num: 10</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        &#123;</span></div><div class="line"><span class="actionscript">            title: <span class="string">'35-100岁'</span>,</span></div><div class="line"><span class="undefined">            num: 12</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">    ];</span></div><div class="line"><span class="actionscript">    <span class="comment">/*创建构造函数*/</span></span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> PieChart = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*画笔*/</span></span></div><div class="line"><span class="javascript">        <span class="keyword">this</span>.ctx = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span></div><div class="line"><span class="actionscript">        <span class="comment">/*画布尺寸*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.width = <span class="keyword">this</span>.ctx.canvas.width;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.height = <span class="keyword">this</span>.ctx.canvas.height;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*设置圆的中心点*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.x0 = <span class="keyword">this</span>.width / <span class="number">2</span> + <span class="number">50</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.y0 = <span class="keyword">this</span>.height / <span class="number">2</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*设置圆半径*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.radius = <span class="number">150</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*延伸的线长度*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.lineOut = <span class="number">20</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    PieChart.prototype.init = <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.drawPie(data);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*获取随机颜色*/</span></span></div><div class="line"><span class="actionscript">    PieChart.prototype.getRandomColor = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> g = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> b = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span></div><div class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="string">'rgb('</span> + r + <span class="string">','</span> + g + <span class="string">','</span> + b + <span class="string">')'</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*转换弧度*/</span></span></div><div class="line"><span class="actionscript">    PieChart.prototype.transformAngle = <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*转换后生成一个包含弧度的新数据*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> total = <span class="number">0</span></span></div><div class="line"><span class="actionscript">        data.forEach(<span class="function"><span class="keyword">function</span> <span class="params">(item)</span> </span>&#123;</span></div><div class="line"><span class="undefined">            total += item.num;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> canvasData = [];</span></div><div class="line"><span class="actionscript">        data.forEach(<span class="function"><span class="keyword">function</span> <span class="params">(item)</span> </span>&#123;</span></div><div class="line"><span class="undefined">            canvasData.push(&#123;</span></div><div class="line"><span class="undefined">                title: item.title,</span></div><div class="line"><span class="undefined">                num: item.num,</span></div><div class="line"><span class="javascript">                angle: item.num / total * <span class="number">2</span> * <span class="built_in">Math</span>.PI</span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="actionscript">        <span class="keyword">return</span> canvasData;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*绘制饼图方法*/</span></span></div><div class="line"><span class="actionscript">    PieChart.prototype.drawPie = <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> canvasData = that.transformAngle(data);</span></div><div class="line"><span class="actionscript">        <span class="comment">/*依赖新的数据*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> startAngle = <span class="number">0</span>;</span></div><div class="line"><span class="actionscript">        canvasData.forEach(<span class="function"><span class="keyword">function</span> <span class="params">(item,i)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">            <span class="comment">/*绘制的扇形*/</span></span></div><div class="line"><span class="undefined">            that.ctx.beginPath();</span></div><div class="line"><span class="undefined">            that.ctx.moveTo(that.x0, that.y0);</span></div><div class="line"><span class="undefined">            that.ctx.arc(that.x0, that.y0, that.radius, startAngle, startAngle + item.angle);</span></div><div class="line"><span class="actionscript">            <span class="comment">//that.ctx.strokeStyle = that.ctx.fillStyle = that.getRandomColor();</span></span></div><div class="line"><span class="actionscript">            <span class="keyword">var</span> color = that.ctx.fillStyle = that.getRandomColor();</span></div><div class="line"><span class="undefined">            that.ctx.fill();</span></div><div class="line"><span class="actionscript">            <span class="comment">/*进行标题的绘制*/</span></span></div><div class="line"><span class="undefined">            that.drawTitle(startAngle, item.angle, color, item.title);</span></div><div class="line"><span class="actionscript">            <span class="comment">/*进行说明的绘制*/</span></span></div><div class="line"><span class="undefined">            that.drawDesc(color,i,item.title);</span></div><div class="line"><span class="actionscript">            <span class="comment">/*记录当前的结束位置  下一次的起始位置*/</span></span></div><div class="line"><span class="undefined">            startAngle = startAngle + item.angle;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*标题的绘制*/</span></span></div><div class="line"><span class="actionscript">    PieChart.prototype.drawTitle = <span class="function"><span class="keyword">function</span> <span class="params">(startAngle, angle, color, title)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*绘制标题需要什么？*/</span></span></div><div class="line"><span class="actionscript">        <span class="comment">/*延时出去的点坐标*/</span></span></div><div class="line"><span class="actionscript">        <span class="comment">/*需要斜边的长度*/</span></span></div><div class="line"><span class="actionscript">        <span class="comment">/*需要弧度*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> edge = <span class="keyword">this</span>.radius + <span class="keyword">this</span>.lineOut;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*x轴方向偏移*/</span></span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> xEdge = <span class="built_in">Math</span>.cos(startAngle + angle / <span class="number">2</span>) * edge;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*y轴方向偏移*/</span></span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> yEdge = <span class="built_in">Math</span>.sin(startAngle + angle / <span class="number">2</span>) * edge;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*计算延伸点坐标*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> xOut = <span class="keyword">this</span>.x0 + xEdge;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> yOut = <span class="keyword">this</span>.y0 + yEdge;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*移动到中心*/</span></span></div><div class="line"><span class="actionscript">        <span class="comment">/*画一条线到延伸点*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.beginPath();</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.x0, <span class="keyword">this</span>.y0);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(xOut, yOut);</span></div><div class="line"><span class="actionscript">        <span class="comment">/*绘制横线*/</span></span></div><div class="line"><span class="actionscript">        <span class="comment">/*横线长度*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> textWidth = <span class="keyword">this</span>.ctx.measureText(title).width;</span></div><div class="line"><span class="actionscript">        <span class="keyword">if</span> (xOut &gt; <span class="keyword">this</span>.x0) &#123;</span></div><div class="line"><span class="actionscript">            <span class="comment">/*右边*/</span></span></div><div class="line"><span class="actionscript">            <span class="keyword">this</span>.ctx.textAlign = <span class="string">'left'</span>;</span></div><div class="line"><span class="actionscript">            <span class="keyword">this</span>.ctx.lineTo(xOut + textWidth, yOut);</span></div><div class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></div><div class="line"><span class="actionscript">            <span class="comment">/*左边*/</span></span></div><div class="line"><span class="actionscript">            <span class="keyword">this</span>.ctx.textAlign = <span class="string">'right'</span>;</span></div><div class="line"><span class="actionscript">            <span class="keyword">this</span>.ctx.lineTo(xOut - textWidth, yOut);</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*绘制文字*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.textBaseline = <span class="string">'bottom'</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.fillText(title,xOut,yOut);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.strokeStyle = color;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.stroke();</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*说明的绘制*/</span></span></div><div class="line"><span class="actionscript">    PieChart.prototype.drawDesc = <span class="function"><span class="keyword">function</span> <span class="params">(color,index,title)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.beginPath();</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.fillStyle = color;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.fillRect(<span class="number">20</span>,<span class="number">20</span>+index*(<span class="number">16</span>+<span class="number">10</span>),<span class="number">30</span>,<span class="number">16</span>);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.textAlign = <span class="string">'left'</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.textBaseline = <span class="string">'top'</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.fillText(title,<span class="number">20</span>+<span class="number">30</span>+<span class="number">10</span>,<span class="number">20</span>+index*(<span class="number">16</span>+<span class="number">10</span>));</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">    <span class="comment">/*初始化*/</span></span></div><div class="line"><span class="actionscript">    <span class="keyword">new</span> PieChart().init(data);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="canvas实现刮刮乐"><a href="#canvas实现刮刮乐" class="headerlink" title="canvas实现刮刮乐"></a>canvas实现刮刮乐</h3><p><b>请点击查看效果图</b><a target="_blank" href="/assets/demo/test/guaguale.html">&nbsp;&nbsp;&nbsp;demo</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">            body&#123;</span></div><div class="line"><span class="undefined">                margin: 0;</span></div><div class="line"><span class="undefined">                padding: 0;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">            canvas &#123;</span></div><div class="line"><span class="css">                <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">                display: block;</span></div><div class="line"><span class="undefined">                margin: 50px auto;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">height</span>=<span class="string">"400"</span> <span class="attr">width</span>=<span class="string">"600"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span></div><div class="line"><span class="actionscript">    img.onload = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> imgStrokeStyle = ctx.createPattern(img,<span class="string">'no-repeat'</span>);</span></div><div class="line"><span class="actionscript">        <span class="comment">/*图片填充方案*/</span></span></div><div class="line"><span class="undefined">        ctx.strokeStyle = imgStrokeStyle;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        ctx.lineWidth = 25;</span></div><div class="line"><span class="actionscript">        ctx.lineCap = <span class="string">'round'</span>;</span></div><div class="line"><span class="actionscript">        ctx.lineJoin = <span class="string">'round'</span>;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> isMouseDown = <span class="literal">false</span>;</span></div><div class="line"><span class="actionscript">        ctx.canvas.addEventListener(<span class="string">'mousedown'</span>,<span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">            isMouseDown = <span class="literal">true</span>;</span></div><div class="line"><span class="actionscript">            <span class="comment">/*起始点*/</span></span></div><div class="line"><span class="undefined">            ctx.moveTo(e.clientX - ctx.canvas.offsetLeft,</span></div><div class="line"><span class="undefined">            e.clientY - ctx.canvas.offsetTop);</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="actionscript">        ctx.canvas.addEventListener(<span class="string">'mousemove'</span>,<span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">            <span class="keyword">if</span>(isMouseDown)&#123;</span></div><div class="line"><span class="actionscript">                <span class="comment">/*绘制*/</span></span></div><div class="line"><span class="undefined">                ctx.lineTo(e.clientX - ctx.canvas.offsetLeft,</span></div><div class="line"><span class="undefined">            e.clientY - ctx.canvas.offsetTop);</span></div><div class="line"><span class="undefined">                ctx.stroke();</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="actionscript">        ctx.canvas.addEventListener(<span class="string">'mouseup'</span>,<span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">            isMouseDown = <span class="literal">false</span>;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    img.src = <span class="string">'images/05.jpg'</span>;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="canvas实现人物来回走动"><a href="#canvas实现人物来回走动" class="headerlink" title="canvas实现人物来回走动"></a>canvas实现人物来回走动</h3><p><b>请点击查看效果图</b><a target="_blank" href="/assets/demo/test/person1.html">&nbsp;&nbsp;&nbsp;demo</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        canvas &#123;</span></div><div class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="css">    <span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</span></div><div class="line"><span class="css">    <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">height</span>=<span class="string">"400"</span> <span class="attr">width</span>=<span class="string">"600"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">    <span class="comment">/*绘制图片*/</span></span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span></div><div class="line"><span class="actionscript">    image.onload = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*图片的宽高 决定人物大小*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> imageWidth = image.width;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> imageHeight = image.height;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*确定人物大小*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> perWidth = imageWidth / <span class="number">4</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> perHeight = imageHeight / <span class="number">4</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*画布尺寸*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> width = ctx.canvas.width;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> height = ctx.canvas.height;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*起始绘制位置*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> startX = width / <span class="number">2</span> - perWidth / <span class="number">2</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> startY = height / <span class="number">2</span> - perHeight / <span class="number">2</span>;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">        <span class="comment">/*步伐的数量*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> step = <span class="number">0</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*步伐的大小*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> stepSize = <span class="number">10</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*方向  1 左  2 右 */</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> direction = <span class="number">1</span>;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">        <span class="comment">/*帧动画*/</span></span></div><div class="line"><span class="actionscript">        <span class="comment">/*索引*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> index = <span class="number">0</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*默认渲染左边*/</span></span></div><div class="line"><span class="undefined">        ctx.drawImage(image, 0, perHeight, perWidth, perHeight, startX, startY, perWidth, perHeight);</span></div><div class="line"><span class="actionscript">        setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="undefined">            index++;</span></div><div class="line"><span class="actionscript">            <span class="keyword">if</span> (index &gt; <span class="number">3</span>) &#123;</span></div><div class="line"><span class="undefined">                index = 0;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="actionscript">            <span class="comment">/*清除上一次的绘制*/</span></span></div><div class="line"><span class="undefined">            ctx.clearRect(0, 0, width, height);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">            <span class="comment">/*需要方向的判断*/</span></span></div><div class="line"><span class="actionscript">            <span class="keyword">if</span> (direction == <span class="number">1</span>) &#123;</span></div><div class="line"><span class="undefined">                step--;</span></div><div class="line"><span class="actionscript">                <span class="comment">/*左*/</span></span></div><div class="line"><span class="actionscript">                <span class="keyword">if</span> ((startX + step * stepSize ) &lt;= <span class="number">0</span>) &#123;</span></div><div class="line"><span class="undefined">                    direction = 2;</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></div><div class="line"><span class="undefined">                step++;</span></div><div class="line"><span class="actionscript">                <span class="comment">/*右*/</span></span></div><div class="line"><span class="actionscript">                <span class="keyword">if</span> ((startX + step * stepSize ) &gt;= (width - perWidth)) &#123;</span></div><div class="line"><span class="undefined">                    direction = 1;</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">            <span class="comment">/*绘制图片*/</span></span></div><div class="line"><span class="undefined">            ctx.drawImage(image, index * perWidth, direction * perHeight, perWidth, perHeight, startX + step * stepSize, startY, perWidth, perHeight);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        &#125;, 100);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    image.src = <span class="string">'images/03.png'</span>;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="canvas方向键控制人物走动"><a href="#canvas方向键控制人物走动" class="headerlink" title="canvas方向键控制人物走动"></a>canvas方向键控制人物走动</h3><p><b>请点击查看效果图</b><a target="_blank" href="/assets/demo/test/person2.html">&nbsp;&nbsp;&nbsp;demo</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        canvas &#123;</span></div><div class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="css">    <span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</span></div><div class="line"><span class="css">    <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">height</span>=<span class="string">"400"</span> <span class="attr">width</span>=<span class="string">"600"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line"><span class="comment">1.加载图片</span></div><div class="line"><span class="comment">2.监听事件</span></div><div class="line"><span class="comment">3.绘制图片</span></div><div class="line"><span class="comment">--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*画笔*/</span></span></div><div class="line"><span class="javascript">        <span class="keyword">this</span>.ctx = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span></div><div class="line"><span class="actionscript">        <span class="comment">/*步伐大小*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.stepSize = <span class="number">10</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*图片地址*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.src = <span class="string">'images/04.png'</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*画布的尺寸*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.width = <span class="keyword">this</span>.ctx.canvas.width;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.height = <span class="keyword">this</span>.ctx.canvas.height;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*画布中心位置*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.x0 = <span class="keyword">this</span>.width/<span class="number">2</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.y0 = <span class="keyword">this</span>.height/<span class="number">2</span>;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    Person.prototype.init = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.loadImage(<span class="function"><span class="keyword">function</span> <span class="params">(image)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">            <span class="comment">/*获取图片相关属性  计算人物尺寸 起始坐标*/</span></span></div><div class="line"><span class="undefined">            that.perWidth = image.width/4;</span></div><div class="line"><span class="undefined">            that.perHeight = image.height/4;</span></div><div class="line"><span class="undefined">            that.startX = that.x0 - that.perWidth/2;</span></div><div class="line"><span class="undefined">            that.startY = that.y0 - that.perHeight/2;</span></div><div class="line"><span class="actionscript">            <span class="comment">/*业务*/</span></span></div><div class="line"><span class="undefined">            that.bindEvent(image);</span></div><div class="line"><span class="actionscript">            <span class="comment">/*初始化  默认的图*/</span></span></div><div class="line"><span class="undefined">            that.drawImg(image,0,0,0,0);</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*加载图片*/</span></span></div><div class="line"><span class="actionscript">    Person.prototype.loadImage = <span class="function"><span class="keyword">function</span> <span class="params">(callback)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span></div><div class="line"><span class="actionscript">        image.onload = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="actionscript">            <span class="comment">/*可以使用图片*/</span></span></div><div class="line"><span class="undefined">            callback &amp;&amp; callback(image);</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="actionscript">        image.src = <span class="keyword">this</span>.src;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*监听事件*/</span></span></div><div class="line"><span class="actionscript">    Person.prototype.bindEvent = <span class="function"><span class="keyword">function</span> <span class="params">(image)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*方向  0下 1左 2右 3上*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> direction = <span class="number">0</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*步数*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> stepX = <span class="number">0</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> stepY = <span class="number">0</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*图片索引*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> index = <span class="number">0</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*监听按键*/</span></span></div><div class="line"><span class="javascript">        <span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="actionscript">            <span class="comment">/*怎么知道按的什么键  keyCode*/</span></span></div><div class="line"><span class="actionscript">            <span class="comment">/* 37 左  38 上  39 右  40 下 */</span></span></div><div class="line"><span class="actionscript">            <span class="keyword">switch</span> (e.keyCode)&#123;</span></div><div class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="number">37</span>:</span></div><div class="line"><span class="actionscript">                    <span class="comment">/*左*/</span></span></div><div class="line"><span class="undefined">                    direction = 1;</span></div><div class="line"><span class="undefined">                    stepX --;</span></div><div class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></div><div class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="number">38</span>:</span></div><div class="line"><span class="actionscript">                    <span class="comment">/*上*/</span></span></div><div class="line"><span class="undefined">                    direction = 3;</span></div><div class="line"><span class="undefined">                    stepY --;</span></div><div class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></div><div class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="number">39</span>:</span></div><div class="line"><span class="actionscript">                    <span class="comment">/*右*/</span></span></div><div class="line"><span class="undefined">                    direction = 2;</span></div><div class="line"><span class="undefined">                    stepX ++;</span></div><div class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></div><div class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="number">40</span>:</span></div><div class="line"><span class="actionscript">                    <span class="comment">/*下*/</span></span></div><div class="line"><span class="undefined">                    direction = 0;</span></div><div class="line"><span class="undefined">                    stepY ++;</span></div><div class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="actionscript">            <span class="comment">/*索引的变化*/</span></span></div><div class="line"><span class="undefined">            index ++;</span></div><div class="line"><span class="actionscript">            <span class="keyword">if</span>(index &gt; <span class="number">3</span>)&#123;</span></div><div class="line"><span class="undefined">                index = 0;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">            that.drawImg(image,index,direction,stepX,stepY);</span></div><div class="line"><span class="undefined">        &#125;)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*绘制图片*/</span></span></div><div class="line"><span class="actionscript">    Person.prototype.drawImg = <span class="function"><span class="keyword">function</span> <span class="params">(image,index,direction,stepX,stepY)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*清空画布*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.width,<span class="keyword">this</span>.height);</span></div><div class="line"><span class="actionscript">        <span class="comment">/*图片绘制*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.drawImage(</span></div><div class="line"><span class="undefined">            image,</span></div><div class="line"><span class="actionscript">            index*<span class="keyword">this</span>.perWidth,</span></div><div class="line"><span class="actionscript">            direction*<span class="keyword">this</span>.perHeight,</span></div><div class="line"><span class="actionscript">            <span class="keyword">this</span>.perWidth,</span></div><div class="line"><span class="actionscript">            <span class="keyword">this</span>.perHeight,</span></div><div class="line"><span class="actionscript">            <span class="keyword">this</span>.startX + stepX * <span class="keyword">this</span>.stepSize,</span></div><div class="line"><span class="actionscript">            <span class="keyword">this</span>.startY + stepY * <span class="keyword">this</span>.stepSize,</span></div><div class="line"><span class="actionscript">            <span class="keyword">this</span>.perWidth,</span></div><div class="line"><span class="actionscript">            <span class="keyword">this</span>.perHeight);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">    <span class="comment">/*初始化*/</span></span></div><div class="line"><span class="actionscript">    <span class="keyword">new</span> Person().init();</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><blockquote><p>End：下篇将介绍到一款小鸟游戏</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=857896&amp;auto=0&amp;height=66&quot; style=&quot;margin-left: -10px;&quot;&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;canvas实现折线图&lt;/li&gt;
&lt;li&gt;canvas实现饼状图&lt;/li&gt;
&lt;li&gt;canvas实现刮刮乐&lt;/li&gt;
&lt;li&gt;canvas实现人物左右移动&lt;/li&gt;
&lt;li&gt;canvas实现方向键控制人物行走&lt;br&gt;&lt;b style=&quot;color:hotpink&quot;&gt;代码有点多哦,看累了就听会音乐(&lt;em&gt;^__^&lt;/em&gt;)&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://haotengfei.com/tags/js/"/>
    
      <category term="canvas" scheme="http://haotengfei.com/tags/canvas/"/>
    
      <category term="oop" scheme="http://haotengfei.com/tags/oop/"/>
    
      <category term="demo" scheme="http://haotengfei.com/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>canvas结合面向对象（上）</title>
    <link href="http://haotengfei.com/2017/03/02/canvas_oop/"/>
    <id>http://haotengfei.com/2017/03/02/canvas_oop/</id>
    <published>2017-03-02T05:02:00.000Z</published>
    <updated>2017-09-18T01:07:24.552Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><ul><li>canvas 最早由Apple引入WebKit,用于Mac OS X 的 Dashboard,后来又在Safari和Google Chrome被实现。  </li><li>基于 Gecko 1.8的浏览器,比如 Firefox 1.5, 同样支持这个元素。  </li><li>&lt;canvas&gt; 元素是WhatWG Web applications 1.0规范的一部分,也包含于HTML 5中。  </li></ul></blockquote><h4 id="什么是Canvas？"><a href="#什么是Canvas？" class="headerlink" title="什么是Canvas？"></a>什么是Canvas？</h4><p>HTML5 的 canvas 元素使用 JavaScript 在网页上绘制图像。<br>画布是一个矩形区域，您可以控制其每一像素。<br>canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。<br><a id="more"></a></p><h4 id="创建Canvas元素"><a href="#创建Canvas元素" class="headerlink" title="创建Canvas元素"></a>创建Canvas元素</h4><p>向 HTML5 页面添加 canvas 元素。<br>规定元素的 id、宽度和高度：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"myCanvas"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div></pre></td></tr></table></figure></p><h4 id="Canvas坐标系"><a href="#Canvas坐标系" class="headerlink" title="Canvas坐标系"></a>Canvas坐标系</h4><p><img src="http://www.itnose.net/img/20160708/10765212.png" alt=""></p><h4 id="通过JavaScript来绘制"><a href="#通过JavaScript来绘制" class="headerlink" title="通过JavaScript来绘制"></a>通过JavaScript来绘制</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*获取元素*/</span></div><div class="line"><span class="keyword">var</span> myCanvas = <span class="built_in">document</span>.querySelector(<span class="string">'#myCanvas'</span>);</div><div class="line"><span class="comment">/*获取绘图工具*/</span></div><div class="line"><span class="keyword">var</span> context = myCanvas.getContext(<span class="string">'2d'</span>);</div><div class="line"><span class="comment">/*设置绘图的起始位置*/</span></div><div class="line">context.moveTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line"><span class="comment">/*绘制路径*/</span></div><div class="line">context.lineTo(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line"><span class="comment">/*描边*/</span></div><div class="line">context.stroke();</div></pre></td></tr></table></figure><h3 id="Canvas的基本使用"><a href="#Canvas的基本使用" class="headerlink" title="Canvas的基本使用"></a>Canvas的基本使用</h3><h4 id="图形绘制"><a href="#图形绘制" class="headerlink" title="图形绘制"></a>图形绘制</h4><p>需要理解些概念：  </p><ul><li>路径的概念</li><li>路径的绘制<ul><li>描边 stroke()  </li><li>填充 fill()<br><img src="http://i03.pic.sogou.com/dde45ed0aaa40f4c" alt="">  </li></ul></li><li>闭合路径<ul><li>手动闭合</li><li>程序闭合 closePath()</li></ul></li><li>填充规则(非零环绕)<br><img src="http://i03.pic.sogou.com/df57530a1a90dfe2" alt=""></li><li>开启新的路径 beginPath()</li></ul><h4 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h4><ul><li>画笔的状态<ul><li>lineWidth 线宽，默认1px</li><li>lineCap 线末端类型：(butt默认)、round、square </li><li>lineJoin 相交线的拐点 miter(默认)、round、bevel</li><li>strokeStyle 线的颜色</li><li>fillStyle 填充颜色</li><li>setLineDash() 设置虚线</li><li>getLineDash() 获取虚线宽度集合</li><li>lineDashOffset 设置虚线偏移量（负值向右偏移）</li></ul></li></ul><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul><li><a href="http://www.w3school.com.cn/tags/html_ref_canvas.asp" target="_blank" rel="external">w3school</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial" target="_blank" rel="external">Canvas_API</a></li></ul><h3 id="Canvas图形绘制"><a href="#Canvas图形绘制" class="headerlink" title="Canvas图形绘制"></a>Canvas图形绘制</h3><h4 id="矩形绘制"><a href="#矩形绘制" class="headerlink" title="矩形绘制"></a>矩形绘制</h4><ul><li>rect(x,y,w,h) 没有独立路径</li><li>strokeRect(x,y,w,h) 有独立路径，不影响别的绘制</li><li>fillRect(x,y,w,h) 有独立路径，不影响别的绘制</li><li>clearRect(x,y,w,h) 擦除矩形区域</li></ul><h4 id="圆弧绘制"><a href="#圆弧绘制" class="headerlink" title="圆弧绘制"></a>圆弧绘制</h4><ul><li>弧度概念</li><li>arc()<ul><li>x 圆心横坐标</li><li>y 圆心纵坐标</li><li>r 半径</li><li>startAngle 开始角度</li><li>endAngle 结束角度</li><li>anticlockwise 是否逆时针方向绘制（默认false表示顺时针；true表示逆时针）</li></ul></li></ul><h4 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h4><ul><li>ctx.font = ‘微软雅黑’ 设置字体</li><li>strokeText()</li><li>fillText(text,x,y,maxWidth)<ul><li>text 要绘制的文本</li><li>x,y 文本绘制的坐标（文本左下角）</li><li>maxWidth 设置文本最大宽度，可选参数</li></ul></li><li>ctx.textAlign文本水平对齐方式，相对绘制坐标来说的<ul><li>left</li><li>center</li><li>right</li><li>start 默认</li><li>end</li><li>direction属性css(rtl ltr) start和end于此相关<ul><li>如果是ltr,start和left表现一致</li><li>如果是rtl,start和right表现一致</li></ul></li></ul></li><li>ctx.textBaseline 设置基线（垂直对齐方式  ）<ul><li>top 文本的基线处于文本的正上方，并且有一段距离</li><li>middle 文本的基线处于文本的正中间</li><li>bottom 文本的基线处于文本的证下方，并且有一段距离</li><li>hanging 文本的基线处于文本的正上方，并且和文本粘合</li><li>alphabetic 默认值，基线处于文本的下方，并且穿过文字</li><li>ideographic 和bottom相似，但是不一样</li></ul></li><li>measureText() 获取文本宽度obj.width</li></ul><h3 id="做动画"><a href="#做动画" class="headerlink" title="做动画"></a>做动画</h3><h4 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h4><ul><li>drawImage()<ul><li>三个参数drawImage(img,x,y)<ul><li>img 图片对象、canvas对象、video对象</li><li>x,y 图片绘制的左上角</li></ul></li><li>五个参数drawImage(img,x,y,w,h)<ul><li>img 图片对象、canvas对象、video对象</li><li>x,y 图片绘制的左上角</li><li>w,h 图片绘制尺寸设置(图片缩放，不是截取)</li></ul></li><li>九个参数drawImage(img,x,y,w,h,x1,y1,w1,h1)<ul><li>img 图片对象、canvas对象、video对象</li><li>x,y,w,h 图片中的一个矩形区域</li><li>x1,y1,w1,h1 画布中的一个矩形区域</li></ul></li></ul></li></ul><h4 id="序列帧动画"><a href="#序列帧动画" class="headerlink" title="序列帧动画"></a>序列帧动画</h4><ul><li>绘制精灵图</li><li>动起来</li><li>控制边界</li><li>键盘控制</li></ul><h4 id="坐标变换"><a href="#坐标变换" class="headerlink" title="坐标变换"></a>坐标变换</h4><ul><li>平移 移动画布的原点<ul><li>translate(x,y) 参数表示移动目标点的坐标</li></ul></li><li>缩放<ul><li>scale(x,y) 参数表示宽高的缩放比例</li></ul></li><li>旋转<ul><li>rotate(angle) 参数表示旋转角度</li></ul></li></ul><h4 id="路径判断"><a href="#路径判断" class="headerlink" title="路径判断"></a>路径判断</h4><ul><li>isPointInPath()</li><li>isPointInStroke()</li></ul><blockquote><p>End：后续文章将介绍canvas的具体使用</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;canvas 最早由Apple引入WebKit,用于Mac OS X 的 Dashboard,后来又在Safari和Google Chrome被实现。  &lt;/li&gt;
&lt;li&gt;基于 Gecko 1.8的浏览器,比如 Firefox 1.5, 同样支持这个元素。  &lt;/li&gt;
&lt;li&gt;&amp;lt;canvas&amp;gt; 元素是WhatWG Web applications 1.0规范的一部分,也包含于HTML 5中。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;什么是Canvas？&quot;&gt;&lt;a href=&quot;#什么是Canvas？&quot; class=&quot;headerlink&quot; title=&quot;什么是Canvas？&quot;&gt;&lt;/a&gt;什么是Canvas？&lt;/h4&gt;&lt;p&gt;HTML5 的 canvas 元素使用 JavaScript 在网页上绘制图像。&lt;br&gt;画布是一个矩形区域，您可以控制其每一像素。&lt;br&gt;canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://haotengfei.com/tags/js/"/>
    
      <category term="canvas" scheme="http://haotengfei.com/tags/canvas/"/>
    
      <category term="oop" scheme="http://haotengfei.com/tags/oop/"/>
    
  </entry>
  
  <entry>
    <title>多功能菜单树</title>
    <link href="http://haotengfei.com/2017/02/03/menu_tree/"/>
    <id>http://haotengfei.com/2017/02/03/menu_tree/</id>
    <published>2017-02-02T23:20:00.000Z</published>
    <updated>2017-09-18T01:06:16.881Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><ul><li>知识点<ul><li>原生js中的DOM节点操作</li><li>递归</li><li>构造函数</li></ul></li><li>其实要想实现这个多功能菜单树，本身是没有多大难度的，主要考验了你原生js的一个基本操作。</li></ul></blockquote><a id="more"></a><p><b>请点击查看效果</b><a target="_blank" href="/assets/demo/test/menu_tree.html">&nbsp;&nbsp;&nbsp;demo</a></p><h3 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h3><ul><li>注释写的都很详细，就不多解释，直接怼代码吧 !</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>菜单树-构造函数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"tree-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/tree.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    <span class="comment">/*模拟数据*/</span></span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> data = [&#123;</span></div><div class="line"><span class="actionscript">        name: <span class="string">'hello'</span>,</span></div><div class="line"><span class="undefined">        children: [</span></div><div class="line"><span class="actionscript">            &#123; name: <span class="string">'哈哈'</span> &#125;,</span></div><div class="line"><span class="actionscript">            &#123; name: <span class="string">'哈哈'</span> &#125;,</span></div><div class="line"><span class="undefined">            &#123;</span></div><div class="line"><span class="actionscript">                name: <span class="string">'哈哈'</span>,</span></div><div class="line"><span class="undefined">                children: [</span></div><div class="line"><span class="actionscript">                    &#123; name: <span class="string">'嘿嘿'</span> &#125;</span></div><div class="line"><span class="undefined">                ]</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="actionscript">            &#123; name: <span class="string">'哈哈'</span> &#125;</span></div><div class="line"><span class="undefined">        ]</span></div><div class="line"><span class="undefined">    &#125;,</span></div><div class="line"><span class="actionscript">        &#123; name: <span class="string">'wat'</span> &#125;,</span></div><div class="line"><span class="undefined">        &#123;</span></div><div class="line"><span class="actionscript">            name: <span class="string">'child folder'</span>,</span></div><div class="line"><span class="undefined">            children: [&#123;</span></div><div class="line"><span class="actionscript">                name: <span class="string">'child folder'</span>,</span></div><div class="line"><span class="undefined">                children: [</span></div><div class="line"><span class="actionscript">                    &#123; name: <span class="string">'hello'</span> &#125;,</span></div><div class="line"><span class="actionscript">                    &#123; name: <span class="string">'wat'</span> &#125;</span></div><div class="line"><span class="undefined">                ]</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="actionscript">                &#123; name: <span class="string">'hello'</span> &#125;,</span></div><div class="line"><span class="actionscript">                &#123; name: <span class="string">'wat'</span> &#125;,</span></div><div class="line"><span class="undefined">                &#123;</span></div><div class="line"><span class="actionscript">                    name: <span class="string">'child folder'</span>,</span></div><div class="line"><span class="undefined">                    children: [</span></div><div class="line"><span class="actionscript">                        &#123; name: <span class="string">'hello'</span> &#125;,</span></div><div class="line"><span class="actionscript">                        &#123; name: <span class="string">'wat'</span> &#125;</span></div><div class="line"><span class="undefined">                    ]</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="undefined">            ]</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    ];</span></div><div class="line"><span class="actionscript">    <span class="keyword">new</span> Tree(<span class="string">'tree-container'</span>,data);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="tree-js代码"><a href="#tree-js代码" class="headerlink" title="tree.js代码"></a>tree.js代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">var</span> Tree = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> self;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params">selector, data</span>) </span>&#123;</div><div class="line">        self = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">this</span>.container = <span class="built_in">document</span>.getElementById(selector);</div><div class="line">        <span class="keyword">this</span>.init(data, <span class="keyword">this</span>.container);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Tree.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params">data, node</span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</div><div class="line">            <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">            <span class="comment">//li.innerHTML = data[i].name;</span></div><div class="line">            <span class="comment">//为了避免事件冒泡    所以这里为事件li添加一个div节点</span></div><div class="line">            <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">            div.innerHTML = data[i].name;</div><div class="line">            li.appendChild(div);</div><div class="line"></div><div class="line">            node.appendChild(li);</div><div class="line">            <span class="keyword">if</span> (data[i].children &amp;&amp; data[i].children.length) &#123;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> span = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</div><div class="line">                span.innerHTML = <span class="string">'[-]'</span>;</div><div class="line">                div.appendChild(span);</div><div class="line"></div><div class="line">                <span class="keyword">var</span> ul = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>);</div><div class="line">                li.appendChild(ul);</div><div class="line">                div.onclick = <span class="keyword">this</span>.toggle;</div><div class="line">                <span class="comment">//给点击的div加一个自定义属性</span></div><div class="line">                div.toggle = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">this</span>.init(data[i].children, ul);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">//这里给没有孩子的div加双击事件</span></div><div class="line">                div.ondblclick = <span class="keyword">this</span>.changeType;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//在这里为node节点的尾部追加一个+节点</span></div><div class="line">        <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">        li.innerHTML = <span class="string">'+'</span>;</div><div class="line">        <span class="comment">//node  其实就是所有的 ul</span></div><div class="line">        li.onclick = <span class="keyword">this</span>.addChild;</div><div class="line">        node.appendChild(li);</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//点击切换的事件处理函数</span></div><div class="line">    Tree.prototype.toggle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.dir(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">this</span>.nextSibling.style.display = <span class="keyword">this</span>.toggle ? <span class="string">'none'</span>:<span class="string">'block'</span>;</div><div class="line">        <span class="keyword">this</span>.firstElementChild.innerHTML = <span class="keyword">this</span>.toggle? <span class="string">'[+]'</span>:<span class="string">'[-]'</span>;</div><div class="line">        <span class="keyword">this</span>.toggle = !<span class="keyword">this</span>.toggle;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//添加子节点</span></div><div class="line">    Tree.prototype.addChild = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> parent = <span class="keyword">this</span>.parentElement;</div><div class="line">        <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">        div.innerHTML = <span class="string">'new stuff'</span>;</div><div class="line">        li.appendChild(div);</div><div class="line">        div.ondblclick = self.changeType;</div><div class="line">        parent.insertBefore(li,<span class="keyword">this</span>);</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//改变节点的类型   由单节点变成目录节点</span></div><div class="line">    Tree.prototype.changeType = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> parent = <span class="keyword">this</span>.parentElement;</div><div class="line">        <span class="keyword">var</span> span = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</div><div class="line">        span.innerHTML = <span class="string">'[-]'</span>;</div><div class="line">        <span class="keyword">this</span>.appendChild(span);</div><div class="line">        <span class="keyword">var</span> ul = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>);</div><div class="line">        <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">        li.innerHTML = <span class="string">'+'</span>;</div><div class="line">        li.onclick = self.addChild;</div><div class="line">        ul.appendChild(li);</div><div class="line">        parent.appendChild(ul);</div><div class="line">        <span class="keyword">this</span>.onclick = self.toggle;</div><div class="line">        <span class="keyword">this</span>.ondblclick = <span class="literal">null</span>;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> Tree;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure><blockquote><p>End..</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;原生js中的DOM节点操作&lt;/li&gt;
&lt;li&gt;递归&lt;/li&gt;
&lt;li&gt;构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其实要想实现这个多功能菜单树，本身是没有多大难度的，主要考验了你原生js的一个基本操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://haotengfei.com/tags/js/"/>
    
      <category term="oop" scheme="http://haotengfei.com/tags/oop/"/>
    
      <category term="demo" scheme="http://haotengfei.com/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>CSS3-demo</title>
    <link href="http://haotengfei.com/2017/01/05/case_css3/"/>
    <id>http://haotengfei.com/2017/01/05/case_css3/</id>
    <published>2017-01-05T11:15:00.000Z</published>
    <updated>2017-09-13T09:33:11.972Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=497745338&auto=0&height=66"></iframe><blockquote><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><ul><li>最近在闲暇之余，折腾了几个关于css3的小demo<ul><li>3D-相册</li><li>小题莫</li><li>美女放大镜</li></ul></li></ul></blockquote><a id="more"></a><h3 id="3D-相册"><a href="#3D-相册" class="headerlink" title="3D-相册"></a>3D-相册</h3><p><b>请点击查看效果</b><a target="_blank" href="/assets/demo/test/3D-photo.html">&nbsp;&nbsp;&nbsp;demo</a></p><h3 id="小题莫"><a href="#小题莫" class="headerlink" title="小题莫"></a>小题莫</h3><p><b>请点击查看效果</b><a target="_blank" href="/assets/demo/test/Timor.html">&nbsp;&nbsp;&nbsp;demo</a></p><h3 id="美女放大镜"><a href="#美女放大镜" class="headerlink" title="美女放大镜"></a>美女放大镜</h3><p><b>请点击查看效果</b><a target="_blank" href="/assets/demo/test/fangda.html">&nbsp;&nbsp;&nbsp;demo</a></p><blockquote><p>End：具体代码，已经上传到我的github</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=497745338&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;最近在闲暇之余，折腾了几个关于css3的小demo&lt;ul&gt;
&lt;li&gt;3D-相册&lt;/li&gt;
&lt;li&gt;小题莫&lt;/li&gt;
&lt;li&gt;美女放大镜&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="demo" scheme="http://haotengfei.com/tags/demo/"/>
    
      <category term="css3" scheme="http://haotengfei.com/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>artTemplate</title>
    <link href="http://haotengfei.com/2016/12/10/artTemplate/"/>
    <id>http://haotengfei.com/2016/12/10/artTemplate/</id>
    <published>2016-12-10T02:36:00.000Z</published>
    <updated>2017-09-13T09:45:09.566Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=139774&auto=0&height=66"></iframe><blockquote><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><ul><li>了解什么是模版引擎</li><li>如何使用artTemplate这款模版引擎</li></ul></blockquote><h3 id="模版引擎"><a href="#模版引擎" class="headerlink" title="模版引擎"></a>模版引擎</h3><p>作用：渲染页面的工具<br>渲染：数据转换成html格式的代码，显示在页面</p><h3 id="有哪些常用的模版引擎"><a href="#有哪些常用的模版引擎" class="headerlink" title="有哪些常用的模版引擎"></a>有哪些常用的模版引擎</h3><p>国外：handlebars mustache<br>国内：artTemplate(性能好) baiduTemplate velocity<br><a id="more"></a></p><h3 id="使用artTemplate"><a href="#使用artTemplate" class="headerlink" title="使用artTemplate"></a>使用artTemplate</h3><p>1.准备数据<br>2.准备模版<br>3.数据和模版绑定—&gt;生成html格式的代码<br>4.显示页面</p><p>artTemplate：js工具，js插件<br>下载：<a href="https://github.com/aui/art-template" target="_blank" rel="external">https://github.com/aui/art-template</a><br>template-native.js  原生语法<br>template.js 简洁语法</p><h4 id="artTemplate-简洁语法模板"><a href="#artTemplate-简洁语法模板" class="headerlink" title="artTemplate 简洁语法模板"></a>artTemplate 简洁语法模板</h4><p>在页面中引用模板引擎：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"dist/template.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure><p>下载(<a href="https://raw.github.com/aui/artTemplate/master/dist/template.js" target="_blank" rel="external">https://raw.github.com/aui/artTemplate/master/dist/template.js</a>)</p><p>编写模版<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">type</span>=<span class="string">"text/html"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;title&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></div><div class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></div><div class="line"><span class="actionscript">    &#123;&#123;<span class="keyword">each</span> list <span class="keyword">as</span> value i&#125;&#125;</span></div><div class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>索引 </span><span class="template-variable">&#123;&#123;i + 1&#125;&#125;</span><span class="xml"> ：</span><span class="template-variable">&#123;&#123;value&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></div><div class="line"><span class="handlebars"><span class="xml">    </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span><span class="xml"></span></span></div><div class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><p>渲染数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = &#123;</div><div class="line">    title: <span class="string">'标签'</span>,</div><div class="line">    list: [<span class="string">'文艺'</span>, <span class="string">'博客'</span>, <span class="string">'摄影'</span>, <span class="string">'电影'</span>, <span class="string">'民谣'</span>, <span class="string">'旅行'</span>, <span class="string">'吉他'</span>]</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> html = template(<span class="string">'test'</span>, data);</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).innerHTML = html;</div></pre></td></tr></table></figure></p><p>简洁语法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;if admin&#125;&#125;</div><div class="line">    &#123;&#123;include 'admin_content'&#125;&#125;</div><div class="line"></div><div class="line">    &#123;&#123;each list&#125;&#125;</div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;$index&#125;&#125;. &#123;&#123;$value.user&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    &#123;&#123;/each&#125;&#125;</div><div class="line">&#123;&#123;/if&#125;&#125;</div></pre></td></tr></table></figure></p><h4 id="artTemplate-原生-js-模板语法版"><a href="#artTemplate-原生-js-模板语法版" class="headerlink" title="artTemplate 原生 js 模板语法版"></a>artTemplate 原生 js 模板语法版</h4><p><b>使用</b></p><p>在页面中引用模板引擎：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"dist/template-native.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p><p>下载(<a href="https://raw.github.com/aui/artTemplate/master/dist/template-native.js" target="_blank" rel="external">https://raw.github.com/aui/artTemplate/master/dist/template-native.js</a>)</p><p><b>表达式</b></p><p>&lt;% 与 %&gt; 符号包裹起来的语句则为模板的逻辑表达式。</p><p><b>输出表达式</b></p><p>对内容编码输出：<br><figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby">content</span><span class="xml"><span class="tag">%&gt;</span></span></div></pre></td></tr></table></figure></p><p>不编码输出：<br><figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"><span class="comment">#content</span></span><span class="xml"><span class="tag">%&gt;</span></span></div></pre></td></tr></table></figure></p><p>编码可以防止数据中含有 HTML 字符串，避免引起 XSS 攻击。</p><p>逻辑</p><p>支持使用 js 原生语法<br><figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby">title</span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; list.length; i ++) &#123;</span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>条目内容 <span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby">i + <span class="number">1</span></span><span class="xml"><span class="tag">%&gt;</span> ：<span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby">list[i]</span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">&#125;</span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></div></pre></td></tr></table></figure></p><p>模板不能访问全局对象，公用的方法请参见文档 辅助方法 章节 模板包含表达式</p><p>用于嵌入子模板。<br><figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">include</span>(<span class="string">'template_name'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span></div></pre></td></tr></table></figure></p><p>子模板默认共享当前数据，亦可以指定数据：<br><figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">include</span>(<span class="string">'template_name'</span>, news_list) </span><span class="xml"><span class="tag">%&gt;</span></span></div></pre></td></tr></table></figure></p><p>辅助方法</p><p>使用template.helper(name, callback)注册公用辅助方法，例如一个基本的 UBB 替换方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">template.helper(<span class="string">'$ubb2html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">content</span>) </span>&#123;</div><div class="line">    <span class="comment">// 处理字符串...</span></div><div class="line">    <span class="keyword">return</span> content;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>模板中使用的方式：<br><figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> $ubb2html(content) </span><span class="xml"><span class="tag">%&gt;</span></span></div></pre></td></tr></table></figure></p><blockquote><p>End..</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=139774&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;了解什么是模版引擎&lt;/li&gt;
&lt;li&gt;如何使用artTemplate这款模版引擎&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;模版引擎&quot;&gt;&lt;a href=&quot;#模版引擎&quot; class=&quot;headerlink&quot; title=&quot;模版引擎&quot;&gt;&lt;/a&gt;模版引擎&lt;/h3&gt;&lt;p&gt;作用：渲染页面的工具&lt;br&gt;渲染：数据转换成html格式的代码，显示在页面&lt;/p&gt;
&lt;h3 id=&quot;有哪些常用的模版引擎&quot;&gt;&lt;a href=&quot;#有哪些常用的模版引擎&quot; class=&quot;headerlink&quot; title=&quot;有哪些常用的模版引擎&quot;&gt;&lt;/a&gt;有哪些常用的模版引擎&lt;/h3&gt;&lt;p&gt;国外：handlebars mustache&lt;br&gt;国内：artTemplate(性能好) baiduTemplate velocity&lt;br&gt;
    
    </summary>
    
    
      <category term="summary" scheme="http://haotengfei.com/tags/summary/"/>
    
      <category term="notes" scheme="http://haotengfei.com/tags/notes/"/>
    
      <category term="template" scheme="http://haotengfei.com/tags/template/"/>
    
  </entry>
  
  <entry>
    <title>OOP-snake_game</title>
    <link href="http://haotengfei.com/2016/09/03/snake/"/>
    <id>http://haotengfei.com/2016/09/03/snake/</id>
    <published>2016-09-03T02:22:00.000Z</published>
    <updated>2017-09-13T08:21:57.756Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><ul><li>由于hexo的一些限制，每次传demo就头疼，具体的代码已经传到我的github上，此外还有一个是用二维数组实现的贪吃蛇游戏，也在我的github上。</li><li>github上传的关于oop实现贪吃蛇游戏中的js代码，还用了sea.js模块化管理，虽然sea.js已经过时了，但是思想还是那个思想。</li></ul></blockquote><p><b>请点击查看效果图</b><a target="_blank" href="/assets/demo/test/snake_game.html">&nbsp;&nbsp;&nbsp;demo</a></p><h4 id="案例目标"><a href="#案例目标" class="headerlink" title="案例目标"></a>案例目标</h4><p>游戏的目的是用来体会js高级语法的使用 不需要具备抽象对象的能力，使用面向对象的方式分析问题，需要一个漫长的过程。<br><a id="more"></a></p><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><h4 id="搭建页面"><a href="#搭建页面" class="headerlink" title="搭建页面"></a>搭建页面</h4><p>放一个容器盛放游戏场景 div#map，设置样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#map</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="分析对象"><a href="#分析对象" class="headerlink" title="分析对象"></a>分析对象</h4><ul><li>游戏对象</li><li>蛇对象</li><li>食物对象</li></ul><h4 id="创建食物对象"><a href="#创建食物对象" class="headerlink" title="创建食物对象"></a>创建食物对象</h4><ul><li><p>Food</p><ul><li><p>属性</p><ul><li>x       </li><li>y</li><li>width</li><li>height</li><li>color       </li></ul></li><li><p>方法</p><ul><li>render       随机创建一个食物对象，并输出到map上</li></ul></li></ul></li><li><p>创建Food的构造函数，并设置属性</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> position = <span class="string">'absolute'</span>;</div><div class="line"><span class="keyword">var</span> elements = [];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Food</span>(<span class="params">x, y, width, height, color</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = x || <span class="number">0</span>;</div><div class="line">  <span class="keyword">this</span>.y = y || <span class="number">0</span>;</div><div class="line">  <span class="comment">// 食物的宽度和高度(像素)</span></div><div class="line">  <span class="keyword">this</span>.width = width || <span class="number">20</span>;</div><div class="line">  <span class="keyword">this</span>.height = height || <span class="number">20</span>;</div><div class="line">  <span class="comment">// 食物的颜色</span></div><div class="line">  <span class="keyword">this</span>.color = color || <span class="string">'green'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>通过原型设置render方法，实现随机产生食物对象，并渲染到map上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Food.prototype.render = <span class="function"><span class="keyword">function</span> (<span class="params">map</span>) </span>&#123;</div><div class="line">  <span class="comment">// 随机食物的位置，map.宽度/food.宽度，总共有多少分food的宽度，随机一下。然后再乘以food的宽度</span></div><div class="line">  <span class="keyword">this</span>.x = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * map.offsetWidth / <span class="keyword">this</span>.width) * <span class="keyword">this</span>.width;</div><div class="line">  <span class="keyword">this</span>.y = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * map.offsetHeight / <span class="keyword">this</span>.height) * <span class="keyword">this</span>.height;</div><div class="line"></div><div class="line">  <span class="comment">// 动态创建食物对应的div</span></div><div class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">  map.appendChild(div);</div><div class="line">  div.style.position = position;</div><div class="line">  div.style.left = <span class="keyword">this</span>.x + <span class="string">'px'</span>;</div><div class="line">  div.style.top = <span class="keyword">this</span>.y + <span class="string">'px'</span>;</div><div class="line">  div.style.width = <span class="keyword">this</span>.width + <span class="string">'px'</span>;</div><div class="line">  div.style.height = <span class="keyword">this</span>.height + <span class="string">'px'</span>;</div><div class="line">  div.style.backgroundColor = <span class="keyword">this</span>.color;</div><div class="line">  elements.push(div);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>通过自调用函数，进行封装，通过window暴露Food对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.Food = Food;</div></pre></td></tr></table></figure><h4 id="创建蛇对象"><a href="#创建蛇对象" class="headerlink" title="创建蛇对象"></a>创建蛇对象</h4><ul><li><p>Snake</p></li><li><p>属性</p><ul><li>width    蛇节的宽度 默认20</li><li>height   蛇节的高度 默认20</li><li>body     数组，蛇的头部和身体，第一个位置是蛇头</li><li>direction    蛇运动的方向  默认right  可以是 left  top bottom</li></ul></li><li><p>方法</p><ul><li>render  把蛇渲染到map上</li></ul></li><li><p>Snake构造函数</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> position = <span class="string">'absolute'</span>;</div><div class="line"><span class="keyword">var</span> elements = [];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Snake</span>(<span class="params">width, height, direction</span>) </span>&#123;</div><div class="line">  <span class="comment">// 设置每一个蛇节的宽度</span></div><div class="line">  <span class="keyword">this</span>.width = width || <span class="number">20</span>;</div><div class="line">  <span class="keyword">this</span>.height = height || <span class="number">20</span>;</div><div class="line">  <span class="comment">// 蛇的每一部分, 第一部分是蛇头</span></div><div class="line">  <span class="keyword">this</span>.body = [</div><div class="line">    &#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">color</span>: <span class="string">'red'</span>&#125;,</div><div class="line">    &#123;<span class="attr">x</span>: <span class="number">2</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">color</span>: <span class="string">'red'</span>&#125;,</div><div class="line">    &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">color</span>: <span class="string">'red'</span>&#125;</div><div class="line">  ];</div><div class="line">  <span class="keyword">this</span>.direction = direction || <span class="string">'right'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>render方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Snake.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params">map</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.body.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> obj = <span class="keyword">this</span>.body[i];</div><div class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">    map.appendChild(div);</div><div class="line">    div.style.left = obj.x * <span class="keyword">this</span>.width + <span class="string">'px'</span>;</div><div class="line">    div.style.top = obj.y * <span class="keyword">this</span>.height + <span class="string">'px'</span>;</div><div class="line">    div.style.position = position;</div><div class="line">    div.style.backgroundColor = obj.color;</div><div class="line">    div.style.width = <span class="keyword">this</span>.width + <span class="string">'px'</span>;</div><div class="line">    div.style.height = <span class="keyword">this</span>.height + <span class="string">'px'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在自调用函数中暴露Snake对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.Snake = Snake;</div></pre></td></tr></table></figure><h4 id="创建游戏对象"><a href="#创建游戏对象" class="headerlink" title="创建游戏对象"></a>创建游戏对象</h4><p>游戏对象，用来管理游戏中的所有对象和开始游戏</p><ul><li><p>Game</p><ul><li><p>属性</p><ul><li><p>food</p></li><li><p>snake</p></li><li><p>map</p></li></ul></li><li><p>方法</p><ul><li>start            开始游戏（绘制所有游戏对象）</li></ul></li></ul></li></ul><ul><li>构造函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Game</span>(<span class="params">map</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.food = <span class="keyword">new</span> Food();</div><div class="line">  <span class="keyword">this</span>.snake = <span class="keyword">new</span> Snake();</div><div class="line">  <span class="keyword">this</span>.map = map;</div><div class="line">&#125;</div><div class="line"><span class="string">``</span><span class="string">`  </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">- 开始游戏，渲染食物对象和蛇对象</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">`</span><span class="string">``</span>js</div><div class="line">Game.prototype.start = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.food.render(<span class="keyword">this</span>.map);</div><div class="line">  <span class="keyword">this</span>.snake.render(<span class="keyword">this</span>.map);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="游戏的逻辑"><a href="#游戏的逻辑" class="headerlink" title="游戏的逻辑"></a>游戏的逻辑</h3><h4 id="写蛇的move方法"><a href="#写蛇的move方法" class="headerlink" title="写蛇的move方法"></a>写蛇的move方法</h4><ul><li>在蛇对象(snake.js)中，在Snake的原型上新增move方法</li></ul><ol><li>让蛇移动起来，把蛇身体的每一部分往前移动一下</li><li>蛇头部分根据不同的方向决定 往哪里移动</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Snake.prototype.move = <span class="function"><span class="keyword">function</span> (<span class="params">food, map</span>) </span>&#123;</div><div class="line">  <span class="comment">// 让蛇身体的每一部分往前移动一下</span></div><div class="line">  <span class="keyword">var</span> i = <span class="keyword">this</span>.body.length - <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span>(; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">    <span class="keyword">this</span>.body[i].x = <span class="keyword">this</span>.body[i - <span class="number">1</span>].x;</div><div class="line">    <span class="keyword">this</span>.body[i].y = <span class="keyword">this</span>.body[i - <span class="number">1</span>].y;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 根据移动的方向，决定蛇头如何处理</span></div><div class="line">  <span class="keyword">switch</span>(<span class="keyword">this</span>.direction) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'left'</span>: </div><div class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].x -= <span class="number">1</span>;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'right'</span>:</div><div class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].x += <span class="number">1</span>;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'top'</span>:</div><div class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].y -= <span class="number">1</span>;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'bottom'</span>:</div><div class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].y += <span class="number">1</span>;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在game中测试</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.snake.move(<span class="keyword">this</span>.food, <span class="keyword">this</span>.map);</div><div class="line"><span class="keyword">this</span>.snake.render(<span class="keyword">this</span>.map);</div></pre></td></tr></table></figure><h4 id="让蛇自己动起来"><a href="#让蛇自己动起来" class="headerlink" title="让蛇自己动起来"></a>让蛇自己动起来</h4><ul><li><p>私有方法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">什么是私有方法？</div><div class="line">  不能被外部访问的方法</div><div class="line">如何创建私有方法？</div><div class="line">  使用自调用函数包裹</div></pre></td></tr></table></figure></li><li><p>在game.js中 添加runSnake的私有方法，开启定时器调用蛇的move和render方法，让蛇动起来</p></li><li>判断蛇是否撞墙</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">runSnake</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> timerId = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.snake.move(<span class="keyword">this</span>.food, <span class="keyword">this</span>.map);</div><div class="line">    <span class="comment">// 在渲染前，删除之前的蛇</span></div><div class="line">    <span class="keyword">this</span>.snake.render(<span class="keyword">this</span>.map);</div><div class="line"></div><div class="line">    <span class="comment">// 判断蛇是否撞墙</span></div><div class="line">    <span class="keyword">var</span> maxX = <span class="keyword">this</span>.map.offsetWidth / <span class="keyword">this</span>.snake.width;</div><div class="line">    <span class="keyword">var</span> maxY = <span class="keyword">this</span>.map.offsetHeight / <span class="keyword">this</span>.snake.height;</div><div class="line">    <span class="keyword">var</span> headX = <span class="keyword">this</span>.snake.body[<span class="number">0</span>].x;</div><div class="line">    <span class="keyword">var</span> headY = <span class="keyword">this</span>.snake.body[<span class="number">0</span>].y;</div><div class="line">    <span class="keyword">if</span> (headX &lt; <span class="number">0</span> || headX &gt;= maxX) &#123;</div><div class="line">      clearInterval(timerId);</div><div class="line">      alert(<span class="string">'Game Over'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (headY &lt; <span class="number">0</span> || headY &gt;= maxY) &#123;</div><div class="line">      clearInterval(timerId);</div><div class="line">      alert(<span class="string">'Game Over'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;.bind(that), <span class="number">150</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在snake中添加删除蛇的私有方法，在render中调用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 删除渲染的蛇</span></div><div class="line">  <span class="keyword">var</span> i = elements.length - <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span>(; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">    <span class="comment">// 删除页面上渲染的蛇</span></div><div class="line">    elements[i].parentNode.removeChild(elements[i]);</div><div class="line">    <span class="comment">// 删除elements数组中的元素</span></div><div class="line">    elements.splice(i, <span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在game中通过键盘控制蛇的移动方向</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindKey</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (e.keyCode) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="number">37</span>:</div><div class="line">        <span class="comment">// left</span></div><div class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'left'</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">38</span>:</div><div class="line">        <span class="comment">// top</span></div><div class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'top'</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">39</span>:</div><div class="line">        <span class="comment">// right</span></div><div class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'right'</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">40</span>:</div><div class="line">        <span class="comment">// bottom</span></div><div class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'bottom'</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;.bind(that), <span class="literal">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在start方法中调用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bindKey();</div></pre></td></tr></table></figure><h4 id="判断蛇是否吃到食物"><a href="#判断蛇是否吃到食物" class="headerlink" title="判断蛇是否吃到食物"></a>判断蛇是否吃到食物</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在Snake的move方法中</span></div><div class="line"></div><div class="line"><span class="comment">// 在移动的过程中判断蛇是否吃到食物</span></div><div class="line"><span class="comment">// 如果蛇头和食物的位置重合代表吃到食物</span></div><div class="line"><span class="comment">// 食物的坐标是像素，蛇的坐标是几个宽度，进行转换</span></div><div class="line"><span class="keyword">var</span> headX = <span class="keyword">this</span>.body[<span class="number">0</span>].x * <span class="keyword">this</span>.width;</div><div class="line"><span class="keyword">var</span> headY = <span class="keyword">this</span>.body[<span class="number">0</span>].y * <span class="keyword">this</span>.height;</div><div class="line"><span class="keyword">if</span> (headX === food.x &amp;&amp; headY === food.y) &#123;</div><div class="line">  <span class="comment">// 吃到食物，往蛇节的最后加一节</span></div><div class="line">  <span class="keyword">var</span> last = <span class="keyword">this</span>.body[<span class="keyword">this</span>.body.length - <span class="number">1</span>];</div><div class="line">  <span class="keyword">this</span>.body.push(&#123;</div><div class="line">    x: last.x,</div><div class="line">    y: last.y,</div><div class="line">    color: last.color</div><div class="line">  &#125;)</div><div class="line">  <span class="comment">// 把现在的食物对象删除，并重新随机渲染一个食物对象</span></div><div class="line">  food.render(map);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="其它处理"><a href="#其它处理" class="headerlink" title="其它处理"></a>其它处理</h3><h4 id="把html中的js代码放到index-js中"><a href="#把html中的js代码放到index-js中" class="headerlink" title="把html中的js代码放到index.js中"></a>把html中的js代码放到index.js中</h4><p>避免html中出现js代码</p><h4 id="自调用函数的参数"><a href="#自调用函数的参数" class="headerlink" title="自调用函数的参数"></a>自调用函数的参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">window, undefined</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> <span class="built_in">document</span> = <span class="built_in">window</span>.document;</div><div class="line"></div><div class="line">&#125;(<span class="built_in">window</span>, <span class="literal">undefined</span>))</div></pre></td></tr></table></figure><ul><li>传入window对象</li></ul><p>将来代码压缩的时候，可以吧 function (window)  压缩成 function (w)</p><ul><li>传入undefined</li></ul><p>在将来会看到别人写的代码中会把undefined作为函数的参数(当前案例没有使用)<br>因为在有的老版本的浏览器中 undefined可以被重新赋值，防止undefined 被重新赋值</p><h4 id="整理代码"><a href="#整理代码" class="headerlink" title="整理代码"></a>整理代码</h4><p>现在的代码结构清晰，谁出问题就找到对应的js文件即可。<br>通过自调用函数，已经防止了变量命名污染的问题</p><p>但是，由于js文件数较多，需要在页面上引用，会产生文件依赖的问题(先引入那个js，再引入哪个js)<br>将来通过工具把js文件合并并压缩。现在手工合并js文件演示</p><ul><li>问题1</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果存在多个自调用函数要用分号分割，否则语法错误</span></div><div class="line"><span class="comment">// 下面代码会报错</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;())</div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;())</div><div class="line"><span class="comment">// 所以代码规范中会建议在自调用函数之前加上分号</span></div><div class="line"><span class="comment">// 下面代码没有问题</span></div><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;())</div><div class="line"></div><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;())</div></pre></td></tr></table></figure><ul><li>问题2 </li></ul><pre><code class="js"><span class="comment">// 当自调用函数 前面有函数声明时，会把自调用函数作为参数</span><span class="comment">// 所以建议自调用函数前，加上;</span><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{  alert(<span class="string">'11'</span>);}(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{  alert(<span class="string">'22'</span>);}())</code></pre><blockquote><p>End..    </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;由于hexo的一些限制，每次传demo就头疼，具体的代码已经传到我的github上，此外还有一个是用二维数组实现的贪吃蛇游戏，也在我的github上。&lt;/li&gt;
&lt;li&gt;github上传的关于oop实现贪吃蛇游戏中的js代码，还用了sea.js模块化管理，虽然sea.js已经过时了，但是思想还是那个思想。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;b&gt;请点击查看效果图&lt;/b&gt;&lt;a target=&quot;_blank&quot; href=&quot;/assets/demo/test/snake_game.html&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;demo&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;案例目标&quot;&gt;&lt;a href=&quot;#案例目标&quot; class=&quot;headerlink&quot; title=&quot;案例目标&quot;&gt;&lt;/a&gt;案例目标&lt;/h4&gt;&lt;p&gt;游戏的目的是用来体会js高级语法的使用 不需要具备抽象对象的能力，使用面向对象的方式分析问题，需要一个漫长的过程。&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://haotengfei.com/tags/js/"/>
    
      <category term="oop" scheme="http://haotengfei.com/tags/oop/"/>
    
      <category term="demo" scheme="http://haotengfei.com/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>JS核心面向对象</title>
    <link href="http://haotengfei.com/2016/09/02/js_opp/"/>
    <id>http://haotengfei.com/2016/09/02/js_opp/</id>
    <published>2016-09-02T00:20:00.000Z</published>
    <updated>2017-09-18T01:15:10.829Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><ul><li>这篇主要是用来理解面向对象开发思想</li><li>掌握 JavaScript 面向对象开发相关模式</li><li>篇幅巨长，请备好瓜子、花生</li><li>pc端右下角有目录</li></ul></blockquote><h3 id="面向对象介绍"><a href="#面向对象介绍" class="headerlink" title="面向对象介绍"></a>面向对象介绍</h3><h4 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h4><p>Everything is object</p><p><img width="50%" style="" src="https://timgsa.baidu.com/timg?image&quality=80&size=b10000_10000&sec=1504009587&di=18367a651374cb82f82b73505e567e96&src=http%3A%2F%2Fwww.lovehhy.net%2Flib%2Fimg%2F2461710%2F677536_2461710.jpg" alt=""></p><a id="more"></a><ul><li><b>那么对象到底是什么，我们可以从两个层次来理解</b><ul><li><m style="color:deeppink">对象是单个事物的抽象</m><br>一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。</li><li><m style="color:deeppink">对象是一个容器，封装了属性（property）和方法（method）</m><br>属性是对象的状态，方法是对象的行为（完成某种任务）。比如，我们可以把动物抽象为animal对象，使用“属性”记录具体是那一种动物，使用“方法”表示动物的某种行为（奔跑、捕猎、休息等等）。在实际开发中，对象是一个抽象的概念，可以将其简单理解为：数据集或功能集。</li></ul></li></ul><div style="background-color:skyblue"><b>ECMA-262 把对象定义为：</b><br>“无序属性的集合，其属性可以包含基本值、对象或者函数。”严格来讲，这就相当于说对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。正因为这样（以及其他将要讨论的原因），我们可以把ECMAScript的 对象想象成散列表：无非就是一组名值对，其中值可以是数据或函数。</div> <h4 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是<span style="color: red">面向</span>对象</h4><p>面向对象不是新的东西，它只是过程式代码的一种高度封装，目的在于提高代码的开发效率和可维护性。</p><p><img width="50%" src="https://ss3.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/image/pic/item/b812c8fcc3cec3fd3ea16dbfdc88d43f86942759.jpg" alt=""></p><ul><li><b>面向对象（Object-Oriented，OO）的语言有一个标志，那就是它们都有<mark>类的概念</mark>，而通过类可以创建任意多个具有相同属性和方法的对象。</b> </li><li><b>面向对象编程 —— Object Oriented Programming，简称 <mark>OOP</mark> ，是一种编程开发思想。 它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。</b> </li><li><b>在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务。 因此，面向对象编程具有<mark>灵活、代码可复用、高度模块化等特点，容易维护和开发</mark>灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一系列函数或指令组成的传统的过程式编程（procedural programming），更适合多人合作的大型软件项目。</b></li></ul><ul><li>面向对象与面向过程:<ul><li>面向过程就是亲力亲为，事无巨细，面面俱到，步步紧跟，有条不紊</li><li>面向对象就是找一个对象，指挥结果</li><li>面向对象将执行者转变成指挥者</li><li>面向对象不是面向过程的替代，而是面向过程的封装</li></ul></li><li>面向对象的特性：<ul><li>封装性 </li><li>继承性</li><li>多态性</li></ul></li></ul><h3 id="创造对象"><a href="#创造对象" class="headerlink" title="创造对象"></a>创造对象</h3><p><b style="color:purple">简单方式</b></p><p>我们可以直接通过 new Object() 创建<br>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>()</div><div class="line">  person.name = <span class="string">'Jack'</span></div><div class="line">  person.age = <span class="number">18</span></div><div class="line"></div><div class="line">person.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>每次创建通过 new Object() 比较麻烦，所以可以通过它的简写形式对象字面量来创建<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">  name: <span class="string">'Jack'</span>,</div><div class="line">  age: <span class="number">18</span>,</div><div class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>对于上面的写法固然没有问题，但是假如我们要生成两个 person 实例对象呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person1 = &#123;</div><div class="line">  name: <span class="string">'Jack'</span>,</div><div class="line">  age: <span class="number">18</span>,</div><div class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person2 = &#123;</div><div class="line">  name: <span class="string">'Mike'</span>,</div><div class="line">  age: <span class="number">16</span>,</div><div class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过上面的代码我们不难看出，这样写的代码太过冗余，重复性太高</p><p><b style="color:purple">简单方式的改进：工厂函数</b></p><p>我们可以写一个函数，解决代码重复问题   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    name: name,</div><div class="line">    age: age,</div><div class="line">    sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后生成实例对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">'Jack'</span>, <span class="number">18</span>)</div><div class="line"><span class="keyword">var</span> p2 = createPerson(<span class="string">'Mike'</span>, <span class="number">18</span>)</div></pre></td></tr></table></figure><p>这样封装确实爽多了，通过工厂模式我们解决了创建多个相似对象代码冗余的问题， 但却没有解决对象识别的问题（即怎样知道一个对象的类型）</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><h4 id="更优雅的工厂函数：构造函数"><a href="#更优雅的工厂函数：构造函数" class="headerlink" title="更优雅的工厂函数：构造函数"></a><b style="color:purple">更优雅的工厂函数：构造函数</b></h4><p>一种更优雅的工厂函数就是下面这样，构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">18</span>)</div><div class="line">p1.sayName() <span class="comment">// =&gt; Jack</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Mike'</span>, <span class="number">23</span>)</div><div class="line">p2.sayName() <span class="comment">// =&gt; Mike</span></div></pre></td></tr></table></figure><h4 id="解析构造函数代码的执行"><a href="#解析构造函数代码的执行" class="headerlink" title="解析构造函数代码的执行"></a>解析构造函数代码的执行</h4><p>在上面的示例中，<mark> Person() </mark> 函数取代了 <mark> createPerson() </mark> 函数，但是实现效果是一样的。 这是为什么呢？<br>我们注意到，Person() 中的代码与 createPerson() 有以下几点<mark> 不同 </mark>之处：</p><ul><li>没有显示的创建对象</li><li>直接将属性和方法赋给了 this 对象</li><li>没有 return 语句</li><li>函数名使用的是大写的 Person</li></ul><p>而要创建<mark> Person </mark>实例，则必须使用<mark> new </mark>操作符。 以这种方式调用构造函数会经历以下 4 个步骤：</p><ol><li>创建一个新对象</li><li>将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）</li><li>执行构造函数中的代码</li><li>返回新对象</li></ol><p>下面是具体的伪代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="comment">// 当使用 new 操作符调用 Person() 的时候，实际上这里会先创建一个对象</span></div><div class="line">  <span class="comment">// var instance = &#123;&#125;</span></div><div class="line">  <span class="comment">// 然后让内部的 this 指向 instance 对象</span></div><div class="line">  <span class="comment">// this = instance</span></div><div class="line">  <span class="comment">// 接下来所有针对 this 的操作实际上操作的就是 instance</span></div><div class="line"></div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 在函数的结尾处会将 this 返回，也就是 instance</span></div><div class="line">  <span class="comment">// return this</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="构造函数和实例对象的关系"><a href="#构造函数和实例对象的关系" class="headerlink" title="构造函数和实例对象的关系"></a>构造函数和实例对象的关系</h4><p>使用构造函数的好处不仅仅在于代码的简洁性，更重要的是我们可以识别对象的具体类型了。 在每一个实例对象中同时有一个<mark> constructor </mark>属性，该属性指向创建该实例的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(p1.constructor === Person) <span class="comment">// =&gt; true</span></div><div class="line"><span class="built_in">console</span>.log(p2.constructor === Person) <span class="comment">// =&gt; true</span></div><div class="line"><span class="built_in">console</span>.log(p1.constructor === p2.constructor) <span class="comment">// =&gt; true</span></div></pre></td></tr></table></figure><p>对象的<mark> constructor </mark>属性最初是用来标识对象类型的， 但是，如果要检测对象的类型，还是使用<mark> instanceof </mark>操作符更可靠一些</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person) <span class="comment">// =&gt; true</span></div><div class="line"><span class="built_in">console</span>.log(p2 <span class="keyword">instanceof</span> Person) <span class="comment">// =&gt; true</span></div></pre></td></tr></table></figure><p><b>小结：</b></p><ul><li>构造函数是根据具体的事物抽象出来的抽象模板</li><li>实例对象是根据抽象的构造函数模板得到的具体实例对象</li><li>每一个实例对象都具有一个 constructor 属性，指向创建该实例的构造函数<ul><li><mark> 注意：</mark> constructor 是实例的属性的说法不严谨！</li></ul></li><li>可以通过实例的 constructor 属性判断实例和构造函数之间的关系<ul><li><mark> 注意：</mark> 这种方式不严谨，推荐使用 instanceof 操作符！</li></ul></li></ul><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><h4 id="更好的解决方案：-prototype"><a href="#更好的解决方案：-prototype" class="headerlink" title="更好的解决方案： prototype"></a>更好的解决方案： prototype</h4><p>javascript规定，每一个构造函数都有一个<mark> prototype </mark>属性，指向另一个对象。这个对象所有属性和方法，都会被构造函数的实例继承。<br>这也就意味着，我们可以把所有对象实例需要共享的属性和方法直接定义在<mark> prototype </mark>对象上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(Person.prototype)</div><div class="line"></div><div class="line">Person.prototype.type = <span class="string">'human'</span></div><div class="line"></div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(...)</div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(...)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(p1.sayName === p2.sayName) <span class="comment">// =&gt; true</span></div></pre></td></tr></table></figure></p><ul><li>这时所有实例的 type 属性和 sayName() 方法， 其实都是同一个内存地址，指向 prototype 对象，因此就提高了运行效率</li></ul><h4 id="构造函数、实例、原型三者之间的关系"><a href="#构造函数、实例、原型三者之间的关系" class="headerlink" title="构造函数、实例、原型三者之间的关系"></a>构造函数、实例、原型三者之间的关系</h4><p><img src="https://i.loli.net/2017/08/30/59a6420c6b921.png" alt=""></p><ul><li>任何函数都具有一个 prototype 属性，该属性是一个对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="built_in">console</span>.log(F.prototype) <span class="comment">// =&gt; object</span></div><div class="line"></div><div class="line">F.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'hi!'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>构造函数的<mark> prototype </mark>对象默认都有一个<mark> constructor </mark>属性，指向 prototype 对象所在函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(F.constructor === F) <span class="comment">// =&gt; true</span></div></pre></td></tr></table></figure><ul><li>通过构造函数得到的实例对象内部会包含一个指向构造函数的 prototype 对象的指针<mark> __proto__</mark></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> F()</div><div class="line"><span class="built_in">console</span>.log(instance.__proto__ === F.prototype) <span class="comment">// =&gt; true</span></div></pre></td></tr></table></figure><p><span style="color: red">__proto__ 是非标准属性</span></p><ul><li>实例对象可以直接访问原型对象成员</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">instance.sayHi() <span class="comment">// =&gt; hi!</span></div></pre></td></tr></table></figure><p><b>小结：</b></p><ul><li>任何函数都具有一个<mark> prototype </mark>属性，该属性是一个对象</li><li>构造函数的<mark> prototype </mark>对象默认都有一个<mark> constructor </mark>属性，指向prototype对象所在的函数</li><li>通过构造函数得到的实例对象内部会包含一个指向构造函数的<mark> prototype </mark>对象的指针<mark> __proto__</mark></li><li>所有的实例都直接或间接继承了原型对象的成员</li></ul><h4 id="属性成员的搜索原则：原型链"><a href="#属性成员的搜索原则：原型链" class="headerlink" title="属性成员的搜索原则：原型链"></a>属性成员的搜索原则：原型链</h4><p>了解了<b style="color: #000"> 构造函数-实例-原型对象 </b>三者之间的关系后，接下来我们来解释一下为什么实例对象可以访问原型对象中的成员    </p><ul><li><b style="color: deepskyblue">每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性</b><ul><li>搜索首先从对象实例本身开始</li><li>如果在实例中找到了具有给定名字的属性，则返回该属性的值</li><li>如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性</li><li>如果在原型对象中找到了这个属性，则返回该属性的值</li></ul></li><li><b style="color: deepskyblue">也就是说，在我们调用 person1.sayName() 的时候，会先后执行两次搜索：</b>    <ul><li>首先，解析器会问：“实例 person1 有 sayName 属性吗？”答：“没有”</li><li>然后，它继续搜索，再问：“ person1 的原型有 sayName 属性吗？”答：“有”</li><li>于是，它就读取那个保存在原型对象中的函数</li><li>当我们调用 person2.sayName() 时，将会重现相同的搜索过程，得到相同的结果</li></ul></li></ul><p><b>而这正是多个对象实例共享原型所保存的属性和方法的基本原理</b></p><p><b>小结：</b></p><ul><li>先在自己身上找，找到即返回</li><li>自己身上找不到，则沿着原型链向上查找，找到即返回</li><li>如果一直到原型链的末端还没有找到，则返回 undefined</li></ul><h4 id="实例对象读写原型对象成员"><a href="#实例对象读写原型对象成员" class="headerlink" title="实例对象读写原型对象成员"></a>实例对象读写原型对象成员</h4><ul><li>读取：<ul><li>先在自己身上找，找到即返回</li><li>自己身上找不到，则沿着原型链向上查找，找到即返回</li><li>如果一直到原型链的末端还没有找到，则返回 undefined</li><li>值类型成员写入（实例对象.值类型成员 = xx）</li><li>当实例期望重写原型对象中的某个普通数据成员时实际上会把该成员添加到自己身上</li><li>也就是说该行为实际上会屏蔽掉对原型对象成员的访问</li><li>引用类型成员写入（实例对象.引用类型成员 = xx）</li></ul></li><li>同上<ul><li>复杂类型修改（实例对象.成员.xx = xx）：</li><li>同样会先在自己身上找该成员，如果自己身上找到则直接修改</li><li>如果自己身上找不到，则沿着原型链继续查找，如果找到则修改</li><li>如果一直到原型链的末端还没有找到该成员，则报错（实例对象.undefined.xx = xx）</li></ul></li></ul><h4 id="更简单的原型语法"><a href="#更简单的原型语法" class="headerlink" title="更简单的原型语法"></a>更简单的原型语法</h4><p>我们注意到，前面例子中每添加一个属性和方法就要敲一遍 Person.prototype 。 为减少不必要的输入，更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">  type: <span class="string">'human'</span>,</div><div class="line">  sayHello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name + <span class="string">'，我今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁了'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在该示例中，我们将<mark> Person.prototype </mark>重置到了一个新的对象。 这样做的好处就是为 Person.prototype 添加成员简单了，但是也会带来一个问题，那就是原型对象丢失了<mark> constructor </mark>成员<br>所以，我们为了保持<mark> constructor </mark>的指向正确，建议的写法是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">  <span class="keyword">constructor</span>: Person, // =&gt; 手动将 <span class="keyword">constructor</span> 指向正确的构造函数</div><div class="line">  type: 'human',</div><div class="line">  sayHello: function () &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name + <span class="string">'，我今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁了'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="原型对象的问题"><a href="#原型对象的问题" class="headerlink" title="原型对象的问题"></a>原型对象的问题</h4><ul><li>共享数组</li><li>共享对象</li></ul><p>如果真的希望可以被实例对象之间共享和修改这些共享数据那就不是问题。但是如果不希望实例之间共享和修改这些共享数据则就是问题<br><span style="color: red"> <strong>建议 : </strong></span>最好不要让实例之间互相共享这些数组或者对象成员，一旦修改的话会导致数据的走向很不明确而且难以维护</p><div style="background-color: pink;text-align: center;"><br><b style="font-size: 18px">原型对象使用建议</b><br><br>    私有成员（一般就是非函数成员）放到构造函数中<br>    共享成员（一般就是函数）放到原型对象中<br>    如果重置了 prototype 记得修正 constructor 的指向<br><br></div><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="什么是继承"><a href="#什么是继承" class="headerlink" title="什么是继承"></a>什么是继承</h4><ul><li>现实生活中的继承</li><li>程序中的继承</li></ul><h4 id="构造函数的属性继承：借用构造函数"><a href="#构造函数的属性继承：借用构造函数" class="headerlink" title="构造函数的属性继承：借用构造函数"></a>构造函数的属性继承：借用构造函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="comment">// 借用构造函数继承属性成员</span></div><div class="line">  Person.call(<span class="keyword">this</span>, name, age)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Student(<span class="string">'张三'</span>, <span class="number">18</span>)</div><div class="line"><span class="built_in">console</span>.log(s1.type, s1.name, s1.age) <span class="comment">// =&gt; human 张三 18</span></div></pre></td></tr></table></figure><h4 id="构造函数的原型方法继承：拷贝继承（for-in）"><a href="#构造函数的原型方法继承：拷贝继承（for-in）" class="headerlink" title="构造函数的原型方法继承：拷贝继承（for-in）"></a>构造函数的原型方法继承：拷贝继承（for-in）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  Person.call(<span class="keyword">this</span>, name, age)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 原型对象拷贝继承原型对象成员</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> Person.prototype) &#123;</div><div class="line">  Student.prototype[key] = Person.prototype[key]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> s1 = Student(<span class="string">'张三'</span>, <span class="number">18</span>)</div><div class="line"></div><div class="line">s1.sayName() <span class="comment">// =&gt; hello 张三</span></div></pre></td></tr></table></figure><h4 id="另一种继承方式：原型继承"><a href="#另一种继承方式：原型继承" class="headerlink" title="另一种继承方式：原型继承"></a>另一种继承方式：原型继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  Person.call(<span class="keyword">this</span>, name, age)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 利用原型的特性实现继承</span></div><div class="line">Student.prototype = <span class="keyword">new</span> Person()</div><div class="line"></div><div class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Student(<span class="string">'张三'</span>, <span class="number">18</span>)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(s1.type) <span class="comment">// =&gt; human</span></div><div class="line"></div><div class="line">s1.sayName() <span class="comment">// =&gt; hello 张三</span></div></pre></td></tr></table></figure><hr><h3 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h3><h4 id="函数的定义方式"><a href="#函数的定义方式" class="headerlink" title="函数的定义方式"></a>函数的定义方式</h4><ul><li>函数声明</li><li>函数表达式</li><li><code>new Function</code></li></ul><h4 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="函数声明与函数表达式的区别"><a href="#函数声明与函数表达式的区别" class="headerlink" title="函数声明与函数表达式的区别"></a>函数声明与函数表达式的区别</h4><ul><li>函数声明必须有名字</li><li>函数声明会函数提升，在预解析阶段就已创建，声明前后都可以调用</li><li>函数表达式类似于变量赋值</li><li>函数表达式可以没有名字，例如匿名函数</li><li>函数表达式没有变量提升，在执行阶段创建，必须在表达式执行之后才可以调用</li></ul><p>下面是一个根据条件定义函数的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</div><div class="line">  &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上代码执行结果在不同浏览器中结果不一致。</p><p>不过我们可以使用函数表达式解决上面的问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</div><div class="line">  &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="函数的调用方式"><a href="#函数的调用方式" class="headerlink" title="函数的调用方式"></a>函数的调用方式</h3><ul><li>普通函数</li><li>构造函数</li><li>对象方法</li></ul><h3 id="函数内-this-指向的不同场景"><a href="#函数内-this-指向的不同场景" class="headerlink" title="函数内 this 指向的不同场景"></a>函数内 <code>this</code> 指向的不同场景</h3><p>函数的调用方式决定了 <code>this</code> 指向的不同：</p><table><thead><tr><th>调用方式</th><th>非严格模式</th><th>备注</th></tr></thead><tbody><tr><td>普通函数调用</td><td>window</td><td>严格模式下是 undefined</td></tr><tr><td>构造函数调用</td><td>实例对象</td><td>原型方法中 this 也是实例对象</td></tr><tr><td>对象方法调用</td><td>该方法所属对象</td><td>紧挨着的对象</td></tr><tr><td>事件绑定方法</td><td>绑定事件对象</td><td></td></tr><tr><td>定时器函数</td><td>window</td></tr></tbody></table><p>这就是对函数内部 this 指向的基本整理，写代码写多了自然而然就熟悉了。</p><h3 id="函数也是对象"><a href="#函数也是对象" class="headerlink" title="函数也是对象"></a>函数也是对象</h3><ul><li>所有函数都是 <code>Function</code> 的实例</li></ul><h3 id="call、apply、bind"><a href="#call、apply、bind" class="headerlink" title="call、apply、bind"></a>call、apply、bind</h3><p>那了解了函数 this 指向的不同场景之后，我们知道有些情况下我们为了使用某种特定环境的 this 引用，<br>这时候时候我们就需要采用一些特殊手段来处理了，例如我们经常在定时器外部备份 this 引用，然后在定时器函数内部使用外部 this 的引用。<br>然而实际上对于这种做法我们的 JavaScript 为我们专门提供了一些函数方法用来帮我们更优雅的处理函数内部 this 指向问题。<br>这就是接下来我们要学习的 call、apply、bind 三个函数方法。</p><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><p><code>call()</code> 方法调用一个函数, 其具有一个指定的 <code>this</code> 值和分别地提供的参数(参数的列表)。</p><p class="danger"><br>  注意：该方法的作用和 <code>apply()</code> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是若干个参数的列表，而 <code>apply()</code> 方法接受的是一个包含多个参数的数组。<br></p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fun.call(thisArg[, arg1[, arg2[, ...]]])</div></pre></td></tr></table></figure><p>参数：</p><ul><li><p><code>thisArg</code></p><ul><li>在 fun 函数运行时指定的 this 值</li><li>如果指定了 null 或者 undefined 则内部 this 指向 window</li></ul></li><li><p><code>arg1, arg2, ...</code></p><ul><li>指定的参数列表</li></ul></li></ul><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><p><code>apply()</code> 方法调用一个函数, 其具有一个指定的 <code>this</code> 值，以及作为一个数组（或类似数组的对象）提供的参数。</p><p class="danger"><br>  注意：该方法的作用和 <code>call()</code> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是若干个参数的列表，而 <code>apply()</code> 方法接受的是一个包含多个参数的数组。<br></p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fun.apply(thisArg, [argsArray])</div></pre></td></tr></table></figure><p>参数：</p><ul><li><code>thisArg</code></li><li><code>argsArray</code></li></ul><p><code>apply()</code> 与 <code>call()</code> 非常相似，不同之处在于提供参数的方式。<br><code>apply()</code> 使用参数数组而不是一组参数列表。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fun.apply(<span class="keyword">this</span>, [<span class="string">'eat'</span>, <span class="string">'bananas'</span>])</div></pre></td></tr></table></figure><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p>bind() 函数会创建一个新函数（称为绑定函数），新函数与被调函数（绑定函数的目标函数）具有相同的函数体（在 ECMAScript 5 规范中内置的call属性）。<br>当目标函数被调用时 this 值绑定到 bind() 的第一个参数，该参数不能被重写。绑定函数被调用时，bind() 也接受预设的参数提供给原函数。<br>一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数。</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fun.bind(thisArg[, arg1[, arg2[, ...]]])</div></pre></td></tr></table></figure><p>参数：</p><ul><li><p>thisArg</p><ul><li>当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。当使用new 操作符调用绑定函数时，该参数无效。</li></ul></li><li><p>arg1, arg2, …</p><ul><li>当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。</li></ul></li></ul><p>返回值：</p><p>返回由指定的this值和初始化参数改造的原函数拷贝。</p><p>示例1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.x = <span class="number">9</span>; </div><div class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</div><div class="line">  x: <span class="number">81</span>,</div><div class="line">  getX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.x; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.getX(); <span class="comment">// 返回 81</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> retrieveX = <span class="built_in">module</span>.getX;</div><div class="line">retrieveX(); <span class="comment">// 返回 9, 在这种情况下，"this"指向全局作用域</span></div><div class="line"></div><div class="line"><span class="comment">// 创建一个新函数，将"this"绑定到module对象</span></div><div class="line"><span class="comment">// 新手可能会被全局的x变量和module里的属性x所迷惑</span></div><div class="line"><span class="keyword">var</span> boundGetX = retrieveX.bind(<span class="built_in">module</span>);</div><div class="line">boundGetX(); <span class="comment">// 返回 81</span></div></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LateBloomer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.petalCount = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">12</span>) + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Declare bloom after a delay of 1 second</span></div><div class="line">LateBloomer.prototype.bloom = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">window</span>.setTimeout(<span class="keyword">this</span>.declare.bind(<span class="keyword">this</span>), <span class="number">1000</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">LateBloomer.prototype.declare = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'I am a beautiful flower with '</span> +</div><div class="line">    <span class="keyword">this</span>.petalCount + <span class="string">' petals!'</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> flower = <span class="keyword">new</span> LateBloomer();</div><div class="line">flower.bloom();  <span class="comment">// 一秒钟后, 调用'declare'方法</span></div></pre></td></tr></table></figure><p><b>小结: </b></p><ul><li><p>call 和 apply 特性一样</p><ul><li>都是用来调用函数，而且是立即调用</li><li>但是可以在调用函数的同时，通过第一个参数指定函数内部 <code>this</code> 的指向</li><li>call 调用的时候，参数必须以参数列表的形式进行传递，也就是以逗号分隔的方式依次传递即可</li><li>apply 调用的时候，参数必须是一个数组，然后在执行的时候，会将数组内部的元素一个一个拿出来，与形参一一对应进行传递</li><li>如果第一个参数指定了 <code>null</code> 或者 <code>undefined</code> 则内部 this 指向 window</li></ul></li><li><p>bind</p><ul><li>可以用来指定内部 this 的指向，然后生成一个改变了 this 指向的新的函数</li><li>它和 call、apply 最大的区别是：bind 不会调用</li><li>bind 支持传递参数，它的传参方式比较特殊，一共有两个位置可以传递<ul><li><ol><li>在 bind 的同时，以参数列表的形式进行传递</li></ol></li><li><ol><li>在调用的时候，以参数列表的形式进行传递</li></ol></li><li>那到底以谁 bind 的时候传递的参数为准呢还是以调用的时候传递的参数为准</li><li>两者合并：bind 的时候传递的参数和调用的时候传递的参数会合并到一起，传递到函数内部</li></ul></li></ul></li></ul><h3 id="函数的其它成员"><a href="#函数的其它成员" class="headerlink" title="函数的其它成员"></a>函数的其它成员</h3><ul><li>arguments<ul><li>实参集合</li></ul></li><li>caller<ul><li>函数的调用者</li></ul></li><li>length<ul><li>形参的个数</li></ul></li><li>name<ul><li>函数的名称</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y, z</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(fn.length) <span class="comment">// =&gt; 形参的个数</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>) <span class="comment">// 伪数组实参参数集合</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee === fn) <span class="comment">// 函数本身</span></div><div class="line">  <span class="built_in">console</span>.log(fn.caller) <span class="comment">// 函数的调用者</span></div><div class="line">  <span class="built_in">console</span>.log(fn.name) <span class="comment">// =&gt; 函数的名字</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  fn(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">f()</div></pre></td></tr></table></figure><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><ul><li>函数可以作为参数</li><li>函数可以作为返回值</li></ul><h4 id="作为参数"><a href="#作为参数" class="headerlink" title="作为参数"></a>作为参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">eat</span> (<span class="params">callback</span>) </span>&#123;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'吃完了'</span>)</div><div class="line">    callback()</div><div class="line">  &#125;, <span class="number">1000</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">eat(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'去唱歌'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h4 id="作为返回值"><a href="#作为返回值" class="headerlink" title="作为返回值"></a>作为返回值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">genFun</span> (<span class="params">type</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === type</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> isArray = genFun(<span class="string">'[object Array]'</span>)</div><div class="line"><span class="keyword">var</span> isObject = genFun(<span class="string">'[object Object]'</span>)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(isArray([])) <span class="comment">// =&gt; true</span></div><div class="line"><span class="built_in">console</span>.log(isArray(&#123;&#125;)) <span class="comment">// =&gt; true</span></div></pre></td></tr></table></figure><h3 id="函数闭包"><a href="#函数闭包" class="headerlink" title="函数闭包"></a>函数闭包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> count = <span class="number">0</span></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    getCount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(count)</div><div class="line">    &#125;,</div><div class="line">    setCount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      count++</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> fns = fn()</div><div class="line"></div><div class="line">fns.getCount() <span class="comment">// =&gt; 0</span></div><div class="line">fns.setCount()</div><div class="line">fns.getCount() <span class="comment">// =&gt; 1</span></div></pre></td></tr></table></figure><h4 id="作用域、作用域链、预解析"><a href="#作用域、作用域链、预解析" class="headerlink" title="作用域、作用域链、预解析"></a>作用域、作用域链、预解析</h4><ul><li>全局作用域</li><li>函数作用域</li><li><mark>没有块级作用域</mark></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="keyword">var</span> foo = <span class="string">'bar'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo)</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">123</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a)</div></pre></td></tr></table></figure><p>作用域链示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">10</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> b = <span class="number">20</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = <span class="number">30</span></div><div class="line">    <span class="built_in">console</span>.log(a + b + c)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> d = <span class="number">40</span></div><div class="line">    <span class="built_in">console</span>.log(c + d)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  fn1()</div><div class="line">  fn2()</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>内层作用域可以访问外层作用域，反之不行</li></ul><h4 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h4><p>闭包就是能够读取其他函数内部变量的函数，<br>由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，<br>因此可以把闭包简单理解成 “定义在一个函数内部的函数”。<br>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p><p>闭包的用途：</p><ul><li>可以在函数外部读取函数内部成员</li><li>让函数内成员始终存活在内存中</li></ul><h4 id="一些关于闭包的例子"><a href="#一些关于闭包的例子" class="headerlink" title="一些关于闭包的例子"></a>一些关于闭包的例子</h4><p>示例1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">  arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="number">111</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i)</div><div class="line">  &#125;, <span class="number">0</span>)</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="number">222</span>)</div></pre></td></tr></table></figure><h4 id="闭包的思考题"><a href="#闭包的思考题" class="headerlink" title="闭包的思考题"></a>闭包的思考题</h4><p>思考题 1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">  name: <span class="string">"My Object"</span>,</div><div class="line">  getNameFunc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</div></pre></td></tr></table></figure><p>思考题 2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;　　</div><div class="line"><span class="keyword">var</span> object = &#123;　　　　</div><div class="line">  name: <span class="string">"My Object"</span>,</div><div class="line">  getNameFunc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> that.name;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</div></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><h3 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h3><h4 id="递归执行模型"><a href="#递归执行模型" class="headerlink" title="递归执行模型"></a>递归执行模型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">111</span>)</div><div class="line">  fn2()</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fn1'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">222</span>)</div><div class="line">  fn3()</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fn2'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">333</span>)</div><div class="line">  fn4()</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fn3'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn4</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">444</span>)</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fn4'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">fn1()</div></pre></td></tr></table></figure><h4 id="举个栗子：计算阶乘的递归函数"><a href="#举个栗子：计算阶乘的递归函数" class="headerlink" title="举个栗子：计算阶乘的递归函数"></a>举个栗子：计算阶乘的递归函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span> (<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> num * factorial(num - <span class="number">1</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p><span style="color:red">补充</span></p></blockquote><ul><li><p><b>用什么方法来判断一个对象的数据类型,怎么样去判断数组？</b></p><ul><li><p><b style="color:purple">通过简单的type of运算符</b></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">alert(<span class="keyword">typeof</span> <span class="number">1</span>);                <span class="comment">// 返回字符串"number" </span></div><div class="line">alert(<span class="keyword">typeof</span> <span class="string">"1"</span>);              <span class="comment">// 返回字符串"string" </span></div><div class="line">alert(<span class="keyword">typeof</span> <span class="literal">true</span>);             <span class="comment">// 返回字符串"boolean" </span></div><div class="line">alert(<span class="keyword">typeof</span> &#123;&#125;);               <span class="comment">// 返回字符串"object" </span></div><div class="line">alert(<span class="keyword">typeof</span> []);               <span class="comment">// 返回字符串"object " </span></div><div class="line">alert(<span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);     <span class="comment">// 返回字符串"function" </span></div><div class="line">alert(<span class="keyword">typeof</span> <span class="literal">null</span>);             <span class="comment">// 返回字符串"object" </span></div><div class="line">alert(<span class="keyword">typeof</span> <span class="literal">undefined</span>);        <span class="comment">// 返回字符串"undefined"</span></div></pre></td></tr></table></figure></li><li><p><b style="color:purple">从原型入手，Array.prototype.isPrototypeOf(obj)</b></p></li></ul><p><img style="display:inline-block" src="https://i.loli.net/2017/08/30/59a654c420158.png" alt=""></p><ul><li><b style="color:purple">从构造函数入手，obj instanceof Array</b></li></ul><p><img style="display:inline-block" src="https://i.loli.net/2017/08/30/59a6557350dd4.png" alt=""></p><ul><li><b style="color:purple">根据对象的class属性(类属性)，跨原型链调用toString()方法<span style="color:red">（推荐使用！！！）</span></b></li></ul><p><img style="display:inline-block" src="https://i.loli.net/2017/08/30/59a655b06e65a.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>());   <span class="comment">//"[object Date]"</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(Window);       <span class="comment">//"[object window]"</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="regexp">/./</span>);          <span class="comment">//"[object RegExp]"</span></div></pre></td></tr></table></figure><p><i style="color:skypurple">闭包的方法封装一个判断数据类型的方法</i></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateCheck</span>(<span class="params">type</span>) </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === type</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">//  判断是否为对象，调用isObject(obj) 返回boolean值</span></div><div class="line">   <span class="keyword">var</span> isObject = generateCheck(<span class="string">'[object Object]'</span>);</div><div class="line">   <span class="comment">//  判断是否为数组，调用isArray(obj) 返回boolean值</span></div><div class="line">   <span class="keyword">var</span> isArray = generateCheck(<span class="string">'[object Array]'</span>);</div><div class="line">...</div></pre></td></tr></table></figure><ul><li><b style="color:purple">Array.isArray()方法</b></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);  <span class="comment">// true</span></div><div class="line"><span class="built_in">Array</span>.isArray(&#123;<span class="attr">foo</span>: <span class="number">123</span>&#125;); <span class="comment">// false</span></div><div class="line"><span class="built_in">Array</span>.isArray(<span class="string">'foobar'</span>);   <span class="comment">// false</span></div><div class="line"><span class="built_in">Array</span>.isArray(<span class="literal">undefined</span>);  <span class="comment">// false</span></div></pre></td></tr></table></figure></li></ul><h3 id="伪数组和数组"><a href="#伪数组和数组" class="headerlink" title="伪数组和数组"></a>伪数组和数组</h3><p>在JavaScript中，除了5种原始数据类型之外，其他所有的都是对象，包括函数（Function）。</p><h4 id="对象与数组的关系"><a href="#对象与数组的关系" class="headerlink" title="对象与数组的关系"></a>对象与数组的关系</h4><p>在说区别之前，需要先提到另外一个知识，就是 JavaScript 的原型继承。<br>所有 JavaScript 的内置构造函数都是继承自 <code>Object.prototype</code> 。<br>在这个前提下，可以理解为使用 <code>new Array()</code> 或 <code>[]</code> 创建出来的数组对象，都会拥有 <code>Object.prototype</code> 的属性值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;<span class="comment">// 拥有 Object.prototype 的属性值</span></div><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line"><span class="comment">//使用数组直接量创建的数组，由于 Array.prototype 的属性继承自 Object.prototype，</span></div><div class="line"><span class="comment">//那么，它将同时拥有 Array.prototype 和 Object.prototype 的属性值</span></div></pre></td></tr></table></figure><p>可以得到对象和数组的第一个区别：对象没有数组 Array.prototype 的属性值。</p><h4 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h4><p>数组具有一个最基本特征：索引，这是对象所没有的，下面来看一段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line"> </div><div class="line">obj[<span class="number">2</span>] = <span class="string">'a'</span>;</div><div class="line">arr[<span class="number">2</span>] = <span class="string">'a'</span>;</div><div class="line"> </div><div class="line"><span class="built_in">console</span>.log(obj[<span class="number">2</span>]); <span class="comment">// =&gt; a</span></div><div class="line"><span class="built_in">console</span>.log(arr[<span class="number">2</span>]); <span class="comment">// =&gt; a</span></div><div class="line"><span class="built_in">console</span>.log(obj.length); <span class="comment">// =&gt; undefined</span></div><div class="line"><span class="built_in">console</span>.log(arr.length); <span class="comment">// =&gt; 3</span></div></pre></td></tr></table></figure><ul><li>obj[2]输出’a’，是因为对象就是普通的键值对存取数据</li><li>而arr[2]输出’a’ 则不同，数组是通过索引来存取数据，arr[2]之所以输出’a’，是因为数组arr索引2的位置已经存储了数据</li><li>obj.length并不具有数组的特性，并且obj没有保存属性length，那么自然就会输出undefined</li><li>而对于数组来说，length是数组的一个内置属性，数组会根据索引长度来更改length的值</li><li>为什么arr.length输出3，而不是1<ul><li>在给数组添加元素时，并没有按照连续的索引添加，所以导致数组的索引不连续，那么就导致索引长度大于元素个数</li></ul></li></ul><h4 id="什么是伪数组"><a href="#什么是伪数组" class="headerlink" title="什么是伪数组"></a>什么是伪数组</h4><ol><li>拥有 length 属性，其它属性（索引）为非负整数(对象中的索引会被当做字符串来处理，这里你可以当做是个非负整数串来理解)</li><li>不具有数组所具有的方法</li></ol><p>伪数组，就是像数组一样有 <code>length</code> 属性，也有 <code>0、1、2、3</code> 等属性的对象，看起来就像数组一样，但不是数组，比如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fakeArray = &#123;</div><div class="line">  <span class="string">"0"</span>: <span class="string">"first"</span>,</div><div class="line">  <span class="string">"1"</span>: <span class="string">"second"</span>,</div><div class="line">  <span class="string">"2"</span>: <span class="string">"third"</span>,</div><div class="line">  length: <span class="number">3</span></div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fakeArray.length; i++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(fakeArray[i]);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="built_in">Array</span>.prototype.join.call(fakeArray,<span class="string">'+'</span>);</div></pre></td></tr></table></figure><p>常见的伪数组有：</p><ul><li>函数内部的 <code>arguments</code></li><li>DOM 对象列表（比如通过 <code>document.getElementsByTags</code> 得到的列表）</li><li>jQuery 对象（比如 <code>$(&quot;div&quot;)</code> ）</li></ul><p>伪数组是一个 Object，而真实的数组是一个 Array。</p><p>伪数组存在的意义，是可以让普通的对象也能正常使用数组的很多方法，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line"> </div><div class="line"><span class="built_in">Array</span>.prototype.forEach.call(<span class="built_in">arguments</span>, <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">  <span class="comment">// 循环arguments对象</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// push</span></div><div class="line"><span class="comment">// some</span></div><div class="line"><span class="comment">// every</span></div><div class="line"><span class="comment">// filter</span></div><div class="line"><span class="comment">// map</span></div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure><p>以上在借用数组的原型方法的时候都可以通过数组直接量来简化使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="number">0</span>: <span class="string">'a'</span>,</div><div class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</div><div class="line">  <span class="number">2</span>: <span class="string">'c'</span>,</div><div class="line">  length: <span class="number">3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">;[].push.call(obj, <span class="string">'d'</span>)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log([].slice.call(obj))</div><div class="line"></div><div class="line">;[].forEach.call(obj, <span class="function"><span class="keyword">function</span> (<span class="params">num, index</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(num)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p><b>小结：</b></p><ul><li>对象没有数组 Array.prototype 的属性值，类型是 Object ，而数组类型是 Array</li><li>数组是基于索引的实现， length 会自动更新，而对象是键值对</li><li>使用对象可以创建伪数组，伪数组可以正常使用数组的大部分方法</li></ul><h3 id="JavaScript-垃圾回收机制"><a href="#JavaScript-垃圾回收机制" class="headerlink" title="JavaScript 垃圾回收机制"></a>JavaScript 垃圾回收机制</h3><h3 id="JavaScript-运行机制：Event-Loop"><a href="#JavaScript-运行机制：Event-Loop" class="headerlink" title="JavaScript 运行机制：Event Loop"></a>JavaScript 运行机制：Event Loop</h3><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><ul><li>Object.assign()</li><li>Object.create()</li><li>Object.keys()</li><li>Object.defineProperty()</li></ul><h4 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h4><ul><li>constructor</li><li>hasOwnProperty()</li><li>isPrototypeOf</li><li>propertyIsEnumerable()</li><li>toString()</li><li>valueOf()</li></ul><hr><h3 id="JavaScript-模块化编程"><a href="#JavaScript-模块化编程" class="headerlink" title="JavaScript 模块化编程"></a>JavaScript 模块化编程</h3><ul><li>CommonJS</li><li>AMD</li><li>CMD</li><li>UMD</li></ul><h4 id="模块化介绍"><a href="#模块化介绍" class="headerlink" title="模块化介绍"></a>模块化介绍</h4><blockquote><p>掌握模块化基本概念以及使用模块化带来的好处</p></blockquote><p><strong>当你的网站开发越来越复杂的时候，会经常遇到什么问题？</strong></p><ul><li>恼人的命名冲突</li><li>繁琐的文件依赖</li></ul><p>历史上，JavaScript一直没有模块（module）体系，<br>无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。<br>其他语言都有这项功能，比如Ruby的 <code>require</code>、Python的 <code>import</code> ，<br>甚至就连CSS都有 <code>@import</code> ，c 语言中的 <code>include</code>，<br>但是JavaScript任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。</p><p>对于一些其他语言的编程人员，都不知道模块快这么一回事儿，因为人家的语言天生就支持，<br>它就认为这是一个理所当然的事情。</p><ul><li>模块的作用就是：私有空间</li><li><p>可以加载，可以导出</p></li><li><p>什么是模块化</p><ul><li>模块化是指解决一个复杂问题时自顶向下逐层把系统划分成若干模块的过程，有多种属性，分别反映其内部特性。</li><li>解决复杂问题的一种方式而已</li><li>电脑：CPU、主板、显示器、内存、硬盘、输入与输出设备</li><li>房屋模块化</li></ul></li><li><p>使用模块化开发的方式带来的好处</p><ul><li>生产效率高</li><li>可维护性高</li></ul></li></ul><hr><h4 id="模块化开发演变"><a href="#模块化开发演变" class="headerlink" title="模块化开发演变"></a>模块化开发演变</h4><blockquote><p>体验刀耕火种的模块化解决方式</p></blockquote><h4 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h4><ul><li>污染了全局变量</li><li>模块成员之间看不出直接关系</li></ul><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><ul><li>理论意义上减少了变量冲突</li><li>缺点1：暴露了模块中所有的成员，内部状态可以被外部改写，不安全</li><li>缺点2：命名空间会越来越长</li></ul><h4 id="私有空间"><a href="#私有空间" class="headerlink" title="私有空间"></a>私有空间</h4><ul><li>私有空间的变量和函数不会影响全局作用域</li><li>公开公有方法，隐藏私有属性</li></ul><h4 id="模块的维护和扩展"><a href="#模块的维护和扩展" class="headerlink" title="模块的维护和扩展"></a>模块的维护和扩展</h4><ul><li>开闭原则</li><li>可维护性好</li></ul><h4 id="模块的第三方依赖"><a href="#模块的第三方依赖" class="headerlink" title="模块的第三方依赖"></a>模块的第三方依赖</h4><ul><li>保证模块的独立性</li><li>模块之间的依赖关系变得明显</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以后如果不使用第三方规范的情况下，如果写模块可以采用下面这种方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 分号是什么意思</span></div><div class="line"><span class="comment">// 2. 为什么要给你的代码加一个匿名自执行函数</span></div><div class="line"><span class="comment">// 3. 为什么要把使用的依赖作为参数传递进来</span></div><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">形参模块名, 依赖项, 依赖项</span>) </span>&#123;</div><div class="line">  <span class="comment">// 通过 形参模块名 修改模块</span></div><div class="line"></div><div class="line">  <span class="comment">// 如果需要，可以通过给 window 对象挂载属性对外暴露内部成员</span></div><div class="line">  <span class="built_in">window</span>.模块名 = 形参模块名</div><div class="line">&#125;)(<span class="built_in">window</span>.模块名 || &#123;&#125;, 依赖项, 依赖项)</div></pre></td></tr></table></figure><h3 id="模块化规范"><a href="#模块化规范" class="headerlink" title="模块化规范"></a>模块化规范</h3><h4 id="模块系统理解"><a href="#模块系统理解" class="headerlink" title="模块系统理解"></a>模块系统理解</h4><p>自然界生态系统、计算机操作系统、软件办公系统，还有教育系统、金融系统、网络系统、<br>理论系统等等。究竟什么是系统呢？</p><blockquote><p>维基百科：系统泛指由一群有关连的个体组成，根据预先编排好的规则工作，<br>能完成个别元件不能单独完成的工作的群体。<br>系统分为自然系统与人为系统两大类。</p></blockquote><p>简单来说，系统有两个基本特性：</p><ol><li>系统由个体组成</li><li>个体之间有关联，按照规则协同完成任务</li></ol><p>系统之间的个体可以成为系统成员，要构建一个系统，最基本的层面需要做两件事：</p><ol><li><strong>定义系统成员</strong>：确定成员是什么<ul><li>模块是一个 JavaScript 文件</li><li>每一个模块都使用 <code>define</code> 函数去定义</li></ul></li><li><strong>约定系统通讯</strong>：确定成员之间如何交互，遵循的规则是什么<ul><li>一个 SeaJS 模块默认就是私有作用域</li><li>如果想要被外部文件模块所访问，就必须把要公开的属性挂载给 <code>module.exports</code> 对象接口</li><li>使用 <code>require</code> 函数可以加载一个指定的模块，得到该模块代码中暴露的接口对象</li></ul></li><li>如何启动整个模块系统<ul><li>在 html 页面中使用 <code>seajs.use()</code> 方法，指定一个入口文件模块</li></ul></li></ol><p>Sea.js 是一个适用于 Web 浏览器端的模块加载器。<br>在 Sea.js 里，一切皆是模块，所有模块协同构建成模块系统。<br>Sea.js 首要要解决的是模块系统的基本问题：</p><ol><li>模块是什么？</li><li>模块之间如何交互？</li></ol><p>在前端开发领域，一个模块，可以是JS 模块，也可以是 CSS 模块，或是 Template 等模块。<br>而 Sea.js 则专注于 JS 文件模块：</p><ol><li>模块是一段 JavaScript 代码，具有统一的 <strong>基本书写格式</strong></li><li>模块之间通过基本 <strong>交互规则</strong> ，能彼此引用，协同工作</li></ol><p>把上面两点中提及的基本书写格式和基本交互规则描述清楚，就能构建出一个模块系统。<br>对书写格式和交互规则的详细描述，就是模块定义规范（Module Definition Specification）。</p><p>比如 CommonJS 社区的 <code>Modules 1.1.1</code> 规范，<br>以及 <code>NodeJS 的 Modules</code> 规范，<br>还有 RequireJS 提出的 <code>AMD</code> 规范等等。</p><p>Sea.js 遵循的是 <code>CMD</code> 规范。</p><h4 id="常见的-JavaScript-模块化规范"><a href="#常见的-JavaScript-模块化规范" class="headerlink" title="常见的 JavaScript 模块化规范"></a>常见的 JavaScript 模块化规范</h4><p>规范其实就是这些库在推广的过程中逐渐形成的一套规则。</p><p>所谓的规范也就是：</p><ul><li>定义了模块的书写格式</li><li><p>以及模块之间的交互规则</p></li><li><p>Node 环境</p><ul><li>CommonJS</li><li>这里先放在这里，Node 还没有学习，学到 Node 的时候，再说这个问题</li></ul></li><li>浏览器环境<ul><li>AMD<ul><li>RequireJS</li></ul></li><li>CMD Common Module Definition<ul><li>CMD 就是 SeaJS 这个模块加载器在推广的过程中定义的一个模块规范</li></ul></li></ul></li><li>ECMAScript<ul><li>ECMAScript 6</li></ul></li><li>UMD</li></ul><p>CMD、AMD、CommonJS 都是社区制定出来的模块规范，他们的目的都是为了解决 JavaScript 没有模块化系统的问题。<br>他们都有如何定义模块成员，以及模块成员之间如何进行通信交互的规则。</p><p>2015 年 9 月份，ECMAScript  官方推出了 ECMAScript 6 语言标准。<br>在最新的 ES6 语言规范标准中制定了 JavaScript 模块化规范，通过 <code>export</code> 和 <code>import</code> 两个关键字来作为交互规则。</p><p>ES6 才是未来的趋势，以后的大一统。</p><h3 id="SeaJS"><a href="#SeaJS" class="headerlink" title="SeaJS"></a>SeaJS</h3><blockquote><p>A Module Loader for the Web, Enjoy the fun of programming.</p></blockquote><ul><li>官网：<a href="https://seajs.github.io/seajs/docs/" target="_blank" rel="external">https://seajs.github.io/seajs/docs/</a></li><li>Github：<a href="https://github.com/seajs/seajs" target="_blank" rel="external">https://github.com/seajs/seajs</a></li><li>下载地址：<a href="https://github.com/seajs/seajs/archive/3.0.0.zip" target="_blank" rel="external">https://github.com/seajs/seajs/archive/3.0.0.zip</a></li><li>提供简单、极致的模块化开发体验</li><li>A Module Loader for the Web</li><li>JavaScript 模块加载器</li><li>可以实现 在 JavaScript 代码中去加载另一个 JavaScript 代码。</li></ul><h4 id="SeaJS-介绍"><a href="#SeaJS-介绍" class="headerlink" title="SeaJS 介绍"></a>SeaJS 介绍</h4><p>SeaJS 带来的最大好处是：提升代码的可维护性。<br>如果一个网站的 JS 文件超过 3 个，就适合用 SeaJS 来组织和维护代码。<br>涉及的 JS 文件越多，SeaJS 就越适合。</p><ul><li><p>关于 SeaJS</p><ul><li>SeaJS 是一个适用于浏览器环境的 JavaScript 模块加载器<ul><li>一个库文件，类似于 jQuery</li><li>使用这个库提供的规范的模块化的方式来编写 JavaScript 代码</li><li>只关心 JavaScript 文件代码模块如何组织<ul><li>只关心 JavaScript 文件之间如何相互协议、引用、依赖</li></ul></li></ul></li><li>SeaJS 的作者是阿里巴巴支付宝前端架构师，花名：玉伯，玉伯也叫射雕<ul><li><a href="http://www.csdn.net/article/2013-09-03/2816801-front-end-development-seajs-framework" target="_blank" rel="external">Sea.js创始人玉伯的前端开发之路</a></li></ul></li><li><a href="http://seajs.org/" target="_blank" rel="external">SeaJS</a></li><li><a href="https://github.com/seajs/seajs/" target="_blank" rel="external">SeaJS -github</a></li></ul></li><li><p>为什么学习和使用 SeaJS ？</p><ul><li><strong>简单友好的模块定义规范</strong>：SeaJS 遵循 CMD 规范，可以像 Node 一样书写模块代码</li><li><strong>自然直观的代码组织方式</strong>：依赖的自动加载、配置简洁清晰，可以让我们更多的享受编码的乐趣</li><li>SeaJS兼容性非常好，几乎可以运行在任何浏览器引擎上</li><li>注1：SeaJS 只是实现模块化开发的一种方式或者说一种工具而已，重在模块化思想的理解</li><li>注2：因为 SeaJS 采用的 CMD 模块规范和 Node 中的 CommonJS 模块规范非常一致，所以有利于我们学习 Node 中的模块化编程</li></ul></li><li><p>谁在用？</p><ul><li>淘宝网、支付宝、京东、爱奇艺。。。</li></ul></li><li><p>SeaJS 使用场景</p><ul><li>SeaJS 不提供任何功能性 API，只提供了解决 JavaScript 代码的命名污染和文件依赖的问题</li><li>所以 SeaJS 可以和 jQuery、underscore 等库结合使用</li><li>例如 只写写 原生 JavaScript 或者用了一些第三方库</li></ul></li></ul><h4 id="快速上手（Getting-Started）"><a href="#快速上手（Getting-Started）" class="headerlink" title="快速上手（Getting Started）"></a>快速上手（Getting Started）</h4><ol><li>下载 sea.js 库文件<ul><li><a href="https://github.com/seajs/seajs/releases" target="_blank" rel="external">SeaJS - Release</a></li><li><code>bower install seajs</code></li><li><code>npm install seajs</code></li></ul></li><li>在页面中引入 sea.js</li><li>使用 <code>define</code> 函数定义模块</li><li>使用 <code>require</code> 函数加载模块</li><li>使用 <code>module.exports</code> 对外暴露接口对象</li><li>使用 <code>seajs.use</code> 函数启动模块系统</li></ol><h3 id="API-详解"><a href="#API-详解" class="headerlink" title="API 详解"></a>API 详解</h3><h4 id="seajs-use"><a href="#seajs-use" class="headerlink" title="seajs.use"></a><code>seajs.use</code></h4><p>加载模块，启动模块系统。</p><ul><li>加载一个模块 <code>seajs.use(&#39;id&#39;)</code></li><li>加载一个模块，在加载完成时，执行回调 <code>seajs.use(&#39;id&#39;, callback)</code></li><li><p>加载多个模块，加载完成时，执行回调 <code>seajs.use([&#39;id1&#39;,&#39;id2&#39;,...],callback)</code></p></li><li><p>注意：</p><ul><li>在调用 seajs.use 之前，需要先引入 sea.js 文件</li><li>seajs.use 与 <code>DOM ready</code> 事件没有任何关系。如果某些操作要确保在 <code>DOM ready</code> 后执行，需要使用 jquery 等类库来保证</li><li>seajs.use 理论上只用于加载启动，不应该出现在 <code>define</code> 中的模块代码里</li></ul></li></ul><h4 id="define-factory"><a href="#define-factory" class="headerlink" title="define(factory)"></a><code>define(factory)</code></h4><p><code>define</code> 是一个全局函数，用来定义模块。</p><p><code>define</code> 接受 <code>factory</code> 参数，<code>factory</code> 可以是一个函数，也可以是一个对象或字符串。</p><p><code>factory</code> 为对象、字符串时，表示模块的接口就是该对象、字符串。</p><ul><li><p>factory 是一个对象时</p><ul><li><code>define({})</code></li></ul></li><li><p>factory 是一个字符串时</p><ul><li><code>define(&#39;hello&#39;)</code></li></ul></li><li><p>factory 是一个函数时</p><ul><li><code>define(function(require, exports, module){})</code></li></ul></li></ul><h4 id="require"><a href="#require" class="headerlink" title="require"></a><code>require</code></h4><p>require 用来加载一个 js 文件模块，<br>require 用来获取指定模块的接口对象 <code>module.exports</code>。</p><p>require 在加载和执行的时候，js 会按照同步的方式和执行。</p><p>使用注意：</p><ul><li>正确拼写<ul><li>模块 factory 构造方法的第一个参数 <code>必须</code> 命名为 require</li></ul></li><li>不要修改<ul><li>不要重命名 require 函数，或在任何作用域中给 require 重新赋值</li></ul></li><li>使用字符串直接量<ul><li>require 的参数值 必须 是字符串直接量</li></ul></li></ul><p>Tips: 把 <code>require</code> 看做是语法关键字就好啦</p><h4 id="模块标识"><a href="#模块标识" class="headerlink" title="模块标识"></a>模块标识</h4><p>模块标识是一个字符串，用来标识模块。</p><ul><li><p>模块标识可以不包含文件后缀名，比如 <code>.js</code></p><ul><li>seajs 推荐不加 .js 文件模块后缀</li></ul></li><li><p>模块标识可以是 <strong>相对</strong> 或 <strong>顶级</strong> 标识</p></li><li><p>相对标识</p></li></ul><p>相对标识以 <code>.</code> 开头，永远相对于当前模块所处的路径来解析。</p><ul><li>顶级标识</li></ul><p>顶级标识不以 <code>.</code> 或 <code>/</code> 开始，会相对模块系统的基础路径（base路径，默认是 sea.js 文件所属的路径）。<br>可以手动配置 base 路径。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">seajs.config(&#123;</div><div class="line">  base: <span class="string">'./js'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><ul><li>普通路径</li></ul><p>除了相对和顶级标识之外的标识都是普通路径。<br>普通路径的解析规则，会相对当前页面解析。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 假设当前页面是 http://example.com/path/to/page/index.html</span></div><div class="line"></div><div class="line"><span class="comment">// 绝对路径是普通路径：</span></div><div class="line"><span class="built_in">require</span>.resolve(<span class="string">'http://cdn.com/js/a'</span>);</div><div class="line">  <span class="comment">// =&gt; http://cdn.com/js/a.js</span></div><div class="line"></div><div class="line"><span class="comment">// 根路径是普通路径：</span></div><div class="line"><span class="built_in">require</span>.resolve(<span class="string">'/js/b'</span>);</div><div class="line">  <span class="comment">// =&gt; http://example.com/js/b.js</span></div><div class="line"></div><div class="line"><span class="comment">// use 中的相对路径始终是普通路径：</span></div><div class="line">seajs.use(<span class="string">'./c'</span>);</div><div class="line">  <span class="comment">// =&gt; 加载的是 http://example.com/path/to/page/c.js</span></div><div class="line"></div><div class="line">seajs.use(<span class="string">'../d'</span>);</div><div class="line">  <span class="comment">// =&gt; 加载的是 http://example.com/path/to/d.js</span></div></pre></td></tr></table></figure><p><strong>Tips</strong>:</p><ul><li>顶级标识始终相对 <code>base</code> 基础路径解析。<ul><li>如果不设置，base 路径默认就是 sea.js 库文件所属的路径</li><li>可以通过 <code>seajs.config({ base: &#39;基础路径&#39; })</code> 来配置基础路径</li></ul></li><li>绝对路径和根路径始终相对当前页面解析。</li><li>相对标识永远相对于当前文件</li><li><code>seajs.use</code> 中的相对路径始终相对当前页面来解析。</li></ul><h4 id="module"><a href="#module" class="headerlink" title="module"></a>module</h4><p>module 是一个对象，上面存储了与当前模块相关联的一些属性和方法。</p><ul><li><code>module.id</code><ul><li>模块的唯一标识，可以通过 <code>define</code> 方法的第一个参数来指定，默认为该模块文件的绝对路径</li></ul></li><li><code>module.uri</code><ul><li>模块的绝对路径</li></ul></li><li><code>module.dependencies</code><ul><li>dependencies 是一个数组，表示当前模块的依赖</li></ul></li><li><code>module.exports</code><ul><li>当前模块对外提供的接口对象</li><li>相当于每个模块内部最终都执行了这么一句话：<code>return module.exports</code></li><li>模块与模块之间的通信接口</li></ul></li></ul><h4 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h4><p>exports 仅仅是 module.exports 的一个引用。<br>也就是说修改了 exports 就相当于修改了 module.exports。</p><p>但是一旦在 factory 内部给 exports 重新赋值，并不会改变 module.exports 的值。<br>因此给 exports 赋值是无效的。</p><h4 id="exports-和-module-exports-的区别"><a href="#exports-和-module-exports-的区别" class="headerlink" title="exports 和 module.exports 的区别"></a>exports 和 module.exports 的区别</h4><ul><li>每个模块内部对外到处的接口对象始终都是 <code>module.exports</code></li><li>可以通过修改 <code>module.exports</code> 或给它赋值改变模块接口对象</li><li><code>exports</code> 是 <code>module.exports</code> 的一个引用，就好比在每一个模块定义最开始的地方写了这么一句代码：<code>var exports = module.exports</code></li></ul><p>关于这俩哥们儿的区别请分析一下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</div><div class="line">  exports: &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeExports</span> (<span class="params">exports, module</span>) </span>&#123;</div><div class="line">  <span class="comment">// var exports = module.exports</span></div><div class="line">  exports.foo = <span class="string">'bar'</span></div><div class="line"></div><div class="line">  <span class="comment">// 这里赋值拿不到，不要使用使用</span></div><div class="line">  <span class="comment">// exports = function () &#123;&#125;</span></div><div class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports</div><div class="line">&#125;</div><div class="line"></div><div class="line">changeExports(<span class="built_in">module</span>.exports, <span class="built_in">module</span>)</div></pre></td></tr></table></figure><p>那为啥要有 <code>exports</code> ？</p><p>为了开发体验，API更友好，使用 exports 的时候，可以少写一个点儿。</p><p>如果你实在分不清楚 <code>exports</code> 和 <code>module.exports</code> 之间的区别，就只记得 <code>module.exports</code> 就可以了。</p><h4 id="将普通的模块文件改为兼容CMD规范的模块"><a href="#将普通的模块文件改为兼容CMD规范的模块" class="headerlink" title="将普通的模块文件改为兼容CMD规范的模块"></a>将普通的模块文件改为兼容CMD规范的模块</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">"function"</span> &amp;&amp; define.cmd) &#123;</div><div class="line">  <span class="comment">// 有 Sea.js 等 CMD 模块加载器存在</span></div><div class="line">  define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line">    <span class="comment">// 使用 module.exports 向外暴露接口对象</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="高级配置-seajs-config-options"><a href="#高级配置-seajs-config-options" class="headerlink" title="高级配置 seajs.config(options)"></a>高级配置 <code>seajs.config(options)</code></h4><p>可以对 Sea.js 进行配置，让模块编写、开发调试更方便。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">seajs.config(&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 别名配置</span></div><div class="line">  alias: &#123;</div><div class="line">    <span class="string">'es5-safe'</span>: <span class="string">'gallery/es5-safe/0.9.3/es5-safe'</span>,</div><div class="line">    <span class="string">'json'</span>: <span class="string">'gallery/json/1.0.2/json'</span>,</div><div class="line">    <span class="string">'jquery'</span>: <span class="string">'jquery/jquery/1.10.1/jquery'</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// 路径配置</span></div><div class="line">  paths: &#123;</div><div class="line">    <span class="string">'gallery'</span>: <span class="string">'https://a.alipayobjects.com/gallery'</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// Sea.js 的基础路径</span></div><div class="line">  base: <span class="string">'http://example.com/path/to/base/'</span>,</div><div class="line">&#125;);</div></pre></td></tr></table></figure><hr><blockquote><p>End..</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;这篇主要是用来理解面向对象开发思想&lt;/li&gt;
&lt;li&gt;掌握 JavaScript 面向对象开发相关模式&lt;/li&gt;
&lt;li&gt;篇幅巨长，请备好瓜子、花生&lt;/li&gt;
&lt;li&gt;pc端右下角有目录&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;面向对象介绍&quot;&gt;&lt;a href=&quot;#面向对象介绍&quot; class=&quot;headerlink&quot; title=&quot;面向对象介绍&quot;&gt;&lt;/a&gt;面向对象介绍&lt;/h3&gt;&lt;h4 id=&quot;什么是对象&quot;&gt;&lt;a href=&quot;#什么是对象&quot; class=&quot;headerlink&quot; title=&quot;什么是对象&quot;&gt;&lt;/a&gt;什么是对象&lt;/h4&gt;&lt;p&gt;Everything is object&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;50%&quot; style=&quot;&quot; src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b10000_10000&amp;sec=1504009587&amp;di=18367a651374cb82f82b73505e567e96&amp;src=http%3A%2F%2Fwww.lovehhy.net%2Flib%2Fimg%2F2461710%2F677536_2461710.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="summary" scheme="http://haotengfei.com/tags/summary/"/>
    
      <category term="notes" scheme="http://haotengfei.com/tags/notes/"/>
    
      <category term="js" scheme="http://haotengfei.com/tags/js/"/>
    
      <category term="oop" scheme="http://haotengfei.com/tags/oop/"/>
    
  </entry>
  
  <entry>
    <title>about_angularjs03</title>
    <link href="http://haotengfei.com/2016/05/12/about_angularjs03/"/>
    <id>http://haotengfei.com/2016/05/12/about_angularjs03/</id>
    <published>2016-05-12T12:20:00.000Z</published>
    <updated>2017-10-07T15:02:28.211Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>接着上篇继续来介绍angularjs的一些知识和用法。</p></blockquote><h3 id="angularjs中请求数据的方式"><a href="#angularjs中请求数据的方式" class="headerlink" title="angularjs中请求数据的方式"></a>angularjs中请求数据的方式</h3><ul><li>angularjs中提供了一些方法，我们可以用这些方法向后台发送数据，获取数据</li><li>语法：<ul><li>标准的请求方式(通过例子说明)<ul><li>$http()</li></ul></li><li>简化的请求方式(通过例子说明)<ul><li>$http.get()</li><li>$http.post()</li></ul></li></ul></li><li><a href="https://cdn.bootcss.com/angular.js/1.6.4/angular-sanitize.min.js" target="_blank" rel="external">ng-bind-html</a></li></ul><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrl"</span>&gt;</span></div><div class="line">   <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">    $http中没有beforeSend:function()&#123;&#125;</span></div><div class="line"><span class="comment">    $http中没有async:true    没有同步只有异步  </span></div><div class="line"><span class="comment">    --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"item in result"</span>&gt;</span></div><div class="line">      &#123;&#123;item.name&#125;&#125; &#123;&#123;item.age&#125;&#125; </div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-bind-html</span>=<span class="string">"item.hobby"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular-sanitize.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    angular.module('myApp',['ngSanitize'])</span></div><div class="line"><span class="undefined">      .controller('demoCtrl',['$scope','$http',function($scope,$http)&#123;</span></div><div class="line"><span class="undefined">        // $http(&#123;</span></div><div class="line"><span class="undefined">        //   url : "./test.json",  // 请求地址</span></div><div class="line"><span class="undefined">        //   method : "post",       // 请求方式 </span></div><div class="line"><span class="undefined">        //   // params : &#123;            // get传参</span></div><div class="line"><span class="undefined">        //   //   a : 1,</span></div><div class="line"><span class="undefined">        //   //   b : 2 </span></div><div class="line"><span class="undefined">        //   // &#125;,</span></div><div class="line"><span class="undefined">        //   data : &#123;              // post传参</span></div><div class="line"><span class="undefined">        //     c : 3,</span></div><div class="line"><span class="undefined">        //     d : 4</span></div><div class="line"><span class="undefined">        //   &#125;</span></div><div class="line"><span class="undefined">        // &#125;).then(function(res)&#123;</span></div><div class="line"><span class="undefined">        //   // 成功回调函数</span></div><div class="line"><span class="undefined">        //   console.log(res.data);</span></div><div class="line"><span class="undefined">        // &#125;,function()&#123;</span></div><div class="line"><span class="undefined">        //   // 失败回调函数</span></div><div class="line"><span class="undefined">        // &#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        // 简写方式</span></div><div class="line"><span class="undefined">        // $http.get('./test.json',&#123;params : &#123;a : 1,b : 2&#125;&#125;).then(function(res)&#123;</span></div><div class="line"><span class="undefined">        //   console.log(res);</span></div><div class="line"><span class="undefined">        // &#125;);</span></div><div class="line"><span class="undefined">        // $http.post('./test.json',&#123;c : 3,d : 4&#125;).then(function(res)&#123;</span></div><div class="line"><span class="undefined">        //   console.log(res);  </span></div><div class="line"><span class="undefined">        // &#125;);</span></div><div class="line"><span class="undefined">        // 请求数据展示到页面</span></div><div class="line"><span class="undefined">        $http.get('./test.json').then(function(res)&#123;</span></div><div class="line"><span class="undefined">          $scope.result = res.data;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">      &#125;]);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>test.json数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="string">"name"</span>:<span class="string">"zhangsan"</span>,</div><div class="line">        <span class="string">"age"</span>:<span class="number">20</span>,</div><div class="line">        <span class="string">"hobby"</span>:<span class="string">"&lt;h5&gt;吃饭&lt;/h5&gt;"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="string">"name"</span>:<span class="string">"lisi"</span>,</div><div class="line">        <span class="string">"age"</span>:<span class="number">18</span>,</div><div class="line">        <span class="string">"hobby"</span>:<span class="string">"&lt;h5&gt;睡觉&lt;/h5&gt;"</span></div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure><h3 id="jqLite"><a href="#jqLite" class="headerlink" title="jqLite"></a>jqLite</h3><ul><li><a href="https://code.angularjs.org/1.6.4/docs/api/ng/function/angular.element" target="_blank" rel="external">Angular’s jqLite</a></li><li>需求：angularjs虽然不推崇DOM操作 但是谁也保证不了 一点DOM操作都没有</li><li>方案：angularjs提供了一个简化版本的jq,叫做jqLite.看文档说下面的事情<ul><li>提供了一些和jquery名字一样的方法</li><li>但都是些简化的方法 不拥有完全的功能</li><li>用法上大多一样 不一样的地方官方文档上会有说明</li></ul></li><li>语法：<ul><li>通过例子说明如何通过angular.element()将元素转换为jqLite对象</li><li>讲解如何通过jqLite对象使用官方提供的方法<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrl"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span>111111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    angular.module(<span class="string">'myApp'</span>,[])</span></div><div class="line"><span class="javascript">      .controller(<span class="string">'demoCtrl'</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span></div><div class="line"><span class="javascript">        <span class="comment">// document.getElementById('box').innerHTML = "123";</span></span></div><div class="line"><span class="undefined">        /*</span></div><div class="line"><span class="undefined">          angularjs给我们提供了一个jquery的精简版叫做 jqLite</span></div><div class="line"><span class="undefined">          目的是为了方便DOM操作</span></div><div class="line"><span class="javascript">          $(原生js对象) 将原生js对象转化为jq对象</span></div><div class="line"><span class="undefined">          angular.element(原生js对象) 将原生js对象转化为jqLite对象</span></div><div class="line"><span class="undefined">        */</span></div><div class="line"><span class="undefined">        /*</span></div><div class="line"><span class="undefined">          虽然angularjs提供了这样的方法，不过在实际开发中最好不要这么写，后面介绍的自定义属性会代替这种写法</span></div><div class="line"><span class="undefined">        */ </span></div><div class="line"><span class="javascript">        angular.element(<span class="built_in">document</span>.getElementById(<span class="string">'box'</span>)).css(&#123;</span></div><div class="line"><span class="javascript">          width : <span class="string">"500px"</span>,</span></div><div class="line"><span class="javascript">          height : <span class="string">"200px"</span>,</span></div><div class="line"><span class="javascript">          background : <span class="string">"red"</span>,</span></div><div class="line"><span class="javascript">          color : <span class="string">"#fff"</span></span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">      &#125;]);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></li></ul></li></ul><h3 id="面向对象的方式使用控制器"><a href="#面向对象的方式使用控制器" class="headerlink" title="面向对象的方式使用控制器"></a>面向对象的方式使用控制器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrl as obj"</span>&gt;</span></div><div class="line">  &#123;&#123;obj.msg&#125;&#125;</div><div class="line">  &#123;&#123;msg&#125;&#125;</div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">  /*</span></div><div class="line"><span class="javascript">    angularjs会将控制器回调函数当作构造器去<span class="keyword">new</span> 我们只需要拿到<span class="keyword">new</span>出来的对象</span></div><div class="line"><span class="undefined">    就可以通过对象.属性的方式 拿到属性了</span></div><div class="line"><span class="undefined">  */ </span></div><div class="line"><span class="javascript">    angular.module(<span class="string">'myApp'</span>,[])</span></div><div class="line"><span class="javascript">      .controller(<span class="string">'demoCtrl'</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span></div><div class="line"><span class="javascript">        $scope.msg = <span class="string">"13"</span>;</span></div><div class="line"><span class="javascript">        <span class="keyword">this</span>.msg = <span class="string">"我是this下面挂载的msg"</span>;</span></div><div class="line"><span class="javascript">        <span class="comment">//这两种方式是可以一起使用的，互不影响</span></span></div><div class="line"><span class="undefined">      &#125;]);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="知识点的补充"><a href="#知识点的补充" class="headerlink" title="知识点的补充"></a>知识点的补充</h3><ul><li>$scope.$watch</li><li>$scope.$apply</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrl"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span> = <span class="string">"val"</span>&gt;</span></div><div class="line">  &#123;&#123;tips&#125;&#125;</div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    angular.module(<span class="string">'myApp'</span>,[])</span></div><div class="line"><span class="javascript">      .controller(<span class="string">'demoCtrl'</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span></div><div class="line"><span class="javascript">        $scope.val = <span class="string">"初始值"</span>;</span></div><div class="line"><span class="javascript">        <span class="comment">//用来监控数据的实时变化,只要数据发生变化，就会执行回调函数</span></span></div><div class="line"><span class="javascript">        <span class="comment">//newValue 当前用户输入的最新值</span></span></div><div class="line"><span class="javascript">        <span class="comment">//oldValue 用户上一次输入的值</span></span></div><div class="line"><span class="javascript">        <span class="comment">//页面一开始会默认执行一次</span></span></div><div class="line"><span class="javascript">        $scope.$watch(<span class="string">'val'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span></div><div class="line"><span class="javascript">          <span class="keyword">if</span>(newValue.length &gt; <span class="number">10</span>)&#123;</span></div><div class="line"><span class="javascript">            $scope.tips = <span class="string">"大于10"</span>;</span></div><div class="line"><span class="javascript">          &#125;<span class="keyword">else</span>&#123;</span></div><div class="line"><span class="javascript">            $scope.tips = <span class="string">"小于10"</span>;</span></div><div class="line"><span class="undefined">          &#125;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">      &#125;]);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrl"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span> = <span class="string">"val"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- &lt;button ng-click = "changeValue()"&gt;更改值&lt;/button&gt; --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"changeValue()"</span>&gt;</span>更改值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    angular.module(<span class="string">'myApp'</span>,[])</span></div><div class="line"><span class="javascript">      .controller(<span class="string">'demoCtrl'</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span></div><div class="line"><span class="javascript">        $scope.changeValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">          $scope.val = <span class="string">"12345"</span>;</span></div><div class="line"><span class="undefined">        &#125;;</span></div><div class="line"><span class="javascript">        <span class="comment">//如果我们不按照规则来写代码，angularjs的数据双向绑定就会失效</span></span></div><div class="line"><span class="javascript">        <span class="comment">//这时候需要使用$scope.$apply()方法</span></span></div><div class="line"><span class="javascript">        <span class="built_in">window</span>.changeValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">          $scope.val = <span class="string">"222222"</span>;</span></div><div class="line"><span class="javascript">          <span class="comment">//通知angularjs 说 js中的数据变了 你帮我更新一下</span></span></div><div class="line"><span class="undefined">          $scope.$apply();</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="javascript">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">          $scope.val = <span class="string">"我爱你"</span>;</span></div><div class="line"><span class="undefined">          $scope.$apply();</span></div><div class="line"><span class="undefined">        &#125;,2000);</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></div><div class="line"><span class="javascript">        xhr.open(<span class="string">'get'</span>,<span class="string">'./test.json'</span>,<span class="literal">true</span>);</span></div><div class="line"><span class="undefined">        xhr.send();</span></div><div class="line"><span class="javascript">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">          <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123;</span></div><div class="line"><span class="undefined">              $scope.val = xhr.responseText;</span></div><div class="line"><span class="undefined">              $scope.$apply();</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">          &#125;</span></div><div class="line"><span class="undefined">        &#125;;</span></div><div class="line"><span class="undefined">      &#125;]);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><ul><li>在angularjs中 只要你想操作DOM 就要想到指令</li><li><p>作用：</p><ul><li>增强HTML标签的功能</li><li>自定义HTML标签<ul><li>在原生js中 可以将公共的代码封装成函数</li><li>在angularjs中 可以将公共的HTML结构封装成自定义标签</li></ul></li><li>操作DOM<ul><li>在angularjs中 页面中的DOM与数据是有对应关系的</li><li>对数据做增删操作 页面中的DOM会自动增加删除</li><li>DOM的增删是由angularjs通过指令完成的 比如ng-repeat ng-if ng-switch</li><li>如果开发人员要对页面中的DOM做额外的操作</li><li>需要等待angularjs的操作完成后进行</li><li>但是开发人员是不知道angularjs的操作什么时候完成</li><li>不过angularjs自己是知道的</li><li>所以angularjs推荐开发人员也通过指令操作DOM操作</li><li>当内部提供的指令执行完成以后，他会调用开发人员定义的指令</li><li>这样就达到了在angularjs操作完DOM以后 开发人员再去操作DOM的目的</li></ul></li></ul><ul><li><p>语法：</p><ul><li><p>如何定义一个最基本的自定义指令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">模块对象.directive(<span class="string">'指令名称'</span>,[<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="comment">// 指令的具体配置</span></div><div class="line">    &#125;</div><div class="line">&#125;])</div></pre></td></tr></table></figure></li><li><p>指令在HTML中的使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 指令名称：myBtn --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">my-btn</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">my-btn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-btn</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my-btn"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- directive:my-btn --&gt;</span></div></pre></td></tr></table></figure></li><li><p>指令的配置参数介绍</p><ul><li>restrict 自定义指令分类<ul><li>属性指令 A attribute</li><li>元素指令 E element</li><li>样式指令 C class</li><li>注释指令 M comment</li><li>默认值是 AE</li></ul></li><li>template和templateUrl使用方法<ul><li>template 模版字符串</li><li>templateUrl 定义angular模版</li></ul></li><li>link 函数的作用和参数的说明<ul><li>作用：写DOM操作的地方</li><li>有三个参数：scope element attributes</li><li>scope：类似与$scope 作用的范围不同 只针对当前的指令生效</li><li>element：当前指令所要操作的元素</li><li>attributes：当前指令所在标签的属性集合 对象类型</li></ul></li><li>replace的作用<ul><li>将当前指令所在标签删除掉</li><li>布尔类型的值 默认是false 不删除</li></ul></li><li><p>transclude的作用</p><ul><li>如果指令所在的标签内部有内容 会将内容保存到ng-transclude中</li><li>然后在模版内将ng-transclude保存的内容写在想要显示的位置即可</li><li>默认的值是false 不保存原有内容 也就是直接用模版内容替换原有内容<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span> = <span class="string">"myApp"</span> <span class="attr">ng-controller</span> = <span class="string">"demoCtrl"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">my-dir</span>&gt;</span>啦啦啦啦啦啦啦啦<span class="tag">&lt;/<span class="name">my-dir</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    /*</span></div><div class="line"><span class="undefined">      在angularjs中 可以通过自定义的指令 自定义的HTML标签</span></div><div class="line"><span class="undefined">      创建自定义指令的语法</span></div><div class="line"><span class="javascript">        模块对象.directive(<span class="string">'名字'</span>,[<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></div><div class="line"><span class="undefined">  </span></div><div class="line"><span class="undefined">          &#125;</span></div><div class="line"><span class="undefined">        &#125;])</span></div><div class="line"><span class="undefined">      注意：</span></div><div class="line"><span class="undefined">        js =&gt; myDir</span></div><div class="line"><span class="undefined">        html =&gt; my-dir</span></div><div class="line"><span class="undefined">    */</span></div><div class="line"><span class="javascript">    angular.module(<span class="string">'myApp'</span>,[])</span></div><div class="line"><span class="javascript">      .directive(<span class="string">'myDir'</span>,[<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></div><div class="line"><span class="xml">          // template : '<span class="tag">&lt;<span class="name">button</span>&gt;</span>我是按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span>'</span></div><div class="line"><span class="javascript">          templateUrl : <span class="string">'myTpl'</span>,</span></div><div class="line"><span class="javascript">          <span class="comment">//告诉angularjs 指令标签内部的内容需要保留</span></span></div><div class="line"><span class="javascript">          transclude : <span class="literal">true</span>,</span></div><div class="line"><span class="javascript">          link : <span class="function"><span class="keyword">function</span>(<span class="params">scope,element,attributes</span>)</span>&#123;</span></div><div class="line"><span class="javascript">            <span class="comment">// scope 向指令控制器的区域暴露数据</span></span></div><div class="line"><span class="javascript">            <span class="comment">// element 自定义标签</span></span></div><div class="line"><span class="javascript">            <span class="comment">// attributes 自定义标签身上的属性集合</span></span></div><div class="line"><span class="javascript">            scope.clickFn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="undefined">              alert(1);</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="javascript">            scope.msg = <span class="string">"我爱你"</span></span></div><div class="line"><span class="undefined">          &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;])</span></div><div class="line"><span class="javascript">      .controller(<span class="string">'demoCtrl'</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">      &#125;])</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"myTpl"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    &lt;button ng-click = <span class="string">"clickFn()"</span>&gt;我是按钮myTpl&#123;&#123;msg&#125;&#125;&lt;span ng-transclude&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></li></ul></li><li><p>scope的作用</p><ul><li>false 默认值 指令没有单独的作用域 继承父级作用域</li><li>true 使指令具有单独的作用域 继承父级作用域</li></ul></li></ul></li><li>自定义指令的简写形式<ul><li>当定义的指令全部使用默认参数 仅仅需要一个DOM操作的地方<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">模块对象.directive(<span class="string">'指令名称'</span>,[<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">// 此处写具体的DOM操作</span></div><div class="line">    &#125;</div><div class="line">&#125;])</div></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><h3 id="开发调试工具"><a href="#开发调试工具" class="headerlink" title="开发调试工具"></a>开发调试工具</h3><ul><li><a href="https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk" target="_blank" rel="external">AngularJS Batarang Chrome开发调试工具</a></li><li>调试工具的使用<ul><li>必须要以服务器的方式打开页面</li><li>将Enable选项勾选</li></ul></li><li>能够实时观察到数据的时时变化</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;p&gt;接着上篇继续来介绍angularjs的一些知识和用法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;angularjs中请求数据的方式&quot;&gt;&lt;a href=&quot;#angularjs中请求数据的方式&quot; class=&quot;headerlink&quot; title=&quot;angularjs中请求数据的方式&quot;&gt;&lt;/a&gt;angularjs中请求数据的方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;angularjs中提供了一些方法，我们可以用这些方法向后台发送数据，获取数据&lt;/li&gt;
&lt;li&gt;语法：&lt;ul&gt;
&lt;li&gt;标准的请求方式(通过例子说明)&lt;ul&gt;
&lt;li&gt;$http()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;简化的请求方式(通过例子说明)&lt;ul&gt;
&lt;li&gt;$http.get()&lt;/li&gt;
&lt;li&gt;$http.post()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cdn.bootcss.com/angular.js/1.6.4/angular-sanitize.min.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ng-bind-html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="summary" scheme="http://haotengfei.com/tags/summary/"/>
    
      <category term="notes" scheme="http://haotengfei.com/tags/notes/"/>
    
      <category term="angularJs" scheme="http://haotengfei.com/tags/angularJs/"/>
    
  </entry>
  
  <entry>
    <title>about_angularjs02</title>
    <link href="http://haotengfei.com/2016/05/09/about_angularjs02/"/>
    <id>http://haotengfei.com/2016/05/09/about_angularjs02/</id>
    <published>2016-05-09T12:50:00.000Z</published>
    <updated>2017-10-07T07:44:53.440Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>接着上篇继续来介绍angularjs的一些知识和用法。</p></blockquote><h3 id="创建模块时的第二个参数"><a href="#创建模块时的第二个参数" class="headerlink" title="创建模块时的第二个参数"></a>创建模块时的第二个参数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    /*</span></div><div class="line"><span class="undefined">      加第二个参数 是创建模块</span></div><div class="line"><span class="undefined">      不加第二个参数是 获取模块</span></div><div class="line"><span class="undefined">    */</span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>,[]);</span></div><div class="line"><span class="javascript">    <span class="built_in">console</span>.log(angular.module(<span class="string">'myApp'</span>) === app);     <span class="comment">// true</span></span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><a id="more"></a><h3 id="控制器中的-scope为什么不能改"><a href="#控制器中的-scope为什么不能改" class="headerlink" title="控制器中的$scope为什么不能改"></a>控制器中的$scope为什么不能改</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrl"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    &#123;&#123;msg&#125;&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    /*</span></div><div class="line"><span class="undefined">      angularjs是根据形参的名字传递参数的</span></div><div class="line"><span class="undefined">      如果把形参的名字改了angularjs就不知道你要干什么了</span></div><div class="line"><span class="undefined">    */</span></div><div class="line"><span class="actionscript">    angular.module(<span class="string">'myApp'</span>,[])</span></div><div class="line"><span class="actionscript">      .controller(<span class="string">'demoCtrl'</span>,<span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</span></div><div class="line"><span class="actionscript">        $scope.msg = <span class="string">"我是msg"</span>;</span></div><div class="line"><span class="undefined">      &#125;);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="安全方式创建控制器"><a href="#安全方式创建控制器" class="headerlink" title="安全方式创建控制器"></a>安全方式创建控制器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrl"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    &#123;&#123;msg&#125;&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    /*</span></div><div class="line"><span class="undefined">      js代码压缩工具是不会对字符串进行压缩的</span></div><div class="line"><span class="undefined">    */</span></div><div class="line"><span class="actionscript">    angular.module(<span class="string">'myApp'</span>,[])</span></div><div class="line"><span class="actionscript">      .controller(<span class="string">'demoCtrl'</span>,[<span class="string">'$scope'</span>,<span class="string">'$http'</span>,<span class="function"><span class="keyword">function</span><span class="params">($scope,$http)</span></span>&#123;</span></div><div class="line"><span class="actionscript">          $scope.msg = <span class="string">"我是安全方式创建的msg"</span>;</span></div><div class="line"><span class="undefined">      &#125;]);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="angularjs中的作用域"><a href="#angularjs中的作用域" class="headerlink" title="angularjs中的作用域"></a>angularjs中的作用域</h3><ul><li>局部作用域<ul><li>angularjs中控制器控制的区域是一块局部作用域</li><li>$scope代表的就是局部作用域</li><li>作用域嵌套的情况下 数据是一层一层通过$scope向外查找的 直到全局作用域</li><li>相邻控制器之间是独立的 互不影响</li></ul></li><li>全局作用域<ul><li>$rootScope代表的就是全局作用域</li><li>挂载到全局作用域中的数据 每个控制器都可以拿到</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrl"</span>&gt;</span></div><div class="line">  &#123;&#123;msg&#125;&#125;</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrlA"</span>&gt;</span></div><div class="line">    &#123;&#123;msg&#125;&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrlB"</span>&gt;</span></div><div class="line">    &#123;&#123;msg&#125;&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    /*</span></div><div class="line"><span class="undefined">      angularjs中控制器控制的区域就是一个局部作用域</span></div><div class="line"><span class="undefined">      $scope 代表的就是局部作用域</span></div><div class="line"><span class="undefined">      $rootScope 代表的是全局作用域 全局作用域可以挂载一些公共的属性或者方法</span></div><div class="line"><span class="undefined">    */</span></div><div class="line"><span class="actionscript">    angular.module(<span class="string">'myApp'</span>,[])</span></div><div class="line"><span class="actionscript">      .controller(<span class="string">'demoCtrl'</span>,[<span class="string">'$scope'</span>,<span class="string">'$rootScope'</span>,<span class="function"><span class="keyword">function</span><span class="params">($scope,$rootScope)</span></span>&#123;</span></div><div class="line"><span class="actionscript">        $scope.msg = <span class="string">"我是demoCtrl"</span>;</span></div><div class="line"><span class="actionscript">        $rootScope.msg = <span class="string">"我是全局作用域中的msg"</span>;</span></div><div class="line"><span class="actionscript">        $rootScope.say = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="actionscript">          alert(<span class="string">'hello'</span>);  </span></div><div class="line"><span class="undefined">        &#125;;</span></div><div class="line"><span class="undefined">      &#125;])</span></div><div class="line"><span class="actionscript">      .controller(<span class="string">'demoCtrlA'</span>,[<span class="string">'$scope'</span>,<span class="string">'$rootScope'</span>,<span class="function"><span class="keyword">function</span><span class="params">($scope,$rootScope)</span></span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="comment">//$scope.msg = "我是demoCtrlA";</span></span></div><div class="line"><span class="undefined">        $rootScope.say();</span></div><div class="line"><span class="undefined">      &#125;])</span></div><div class="line"><span class="actionscript">      .controller(<span class="string">'demoCtrlB'</span>,[<span class="string">'$scope'</span>,<span class="string">'$rootScope'</span>,<span class="function"><span class="keyword">function</span><span class="params">($scope,$rootScope)</span></span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="comment">//$scope.msg = "我是demoCtrlB";     </span></span></div><div class="line"><span class="undefined">        $rootScope.say();               </span></div><div class="line"><span class="undefined">      &#125;])</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="angularjs常用的指令"><a href="#angularjs常用的指令" class="headerlink" title="angularjs常用的指令"></a>angularjs常用的指令</h3><ul><li>指令分类：内置指令(普通指令、事件指令)自定义指令</li><li><p>普通指令</p><ul><li><p>ng-repeat 遍历数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrl"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">  ng-repeat="循环中的每一项 in 数据"  循环数据</span></div><div class="line"><span class="comment">  $index  当前循环的索引</span></div><div class="line"><span class="comment">  $first  是否是第一次循环</span></div><div class="line"><span class="comment">  $last   是否是最后一次循环</span></div><div class="line"><span class="comment">  $middle 是否是中间项 除了第一项和最后一项</span></div><div class="line"><span class="comment">  $even   是否是偶数项</span></div><div class="line"><span class="comment">  $odd    是否是奇数项</span></div><div class="line"><span class="comment"> --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"item in arr"</span> <span class="attr">class</span>=<span class="string">"&#123;&#123;$first ? 'first' : ''&#125;&#125;"</span>&gt;</span></div><div class="line">    &#123;&#123;$index + 1&#125;&#125; &#123;&#123;item&#125;&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>是否是第一次循环 &#123;&#123;$first&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>是否是最后一次循环 &#123;&#123;$last&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>是否是中间项循环 &#123;&#123;$middle&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>是否是偶数项循环 &#123;&#123;$even&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>是否是奇数项循环 &#123;&#123;$odd&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">ng-repeat</span>=<span class="string">"item in persons"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;item.name&#125;&#125; &#123;&#123;item.age&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">&#123;&#123;obj.a&#125;&#125; &#123;&#123;obj.b&#125;&#125;    </div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"(key,val) in obj"</span>&gt;</span>&#123;&#123;key&#125;&#125; &#123;&#123;val&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"item in persons"</span>&gt;</span></div><div class="line">    &#123;&#123;item.name&#125;&#125; &#123;&#123;item.age&#125;&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-repeat</span>=<span class="string">"item in item.hobby"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">  angular.module(<span class="string">'myApp'</span>,[])</span></div><div class="line"><span class="actionscript">    .controller(<span class="string">'demoCtrl'</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</span></div><div class="line"><span class="actionscript">      $scope.arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span></div><div class="line"><span class="undefined">      $scope.persons = [</span></div><div class="line"><span class="undefined">        &#123;</span></div><div class="line"><span class="actionscript">          name : <span class="string">'zhangsan'</span>,</span></div><div class="line"><span class="undefined">          age : 19,</span></div><div class="line"><span class="actionscript">          hobby : [<span class="string">'吃'</span>,<span class="string">'喝'</span>,<span class="string">'玩'</span>]</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        &#123;</span></div><div class="line"><span class="actionscript">          name : <span class="string">'lisi'</span>,</span></div><div class="line"><span class="undefined">          age : 18,</span></div><div class="line"><span class="actionscript">          hobby : [<span class="string">'吃'</span>,<span class="string">'喝'</span>,<span class="string">'睡觉'</span>]</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      ];</span></div><div class="line"><span class="undefined">      $scope.obj = &#123;</span></div><div class="line"><span class="undefined">        a : 1,</span></div><div class="line"><span class="undefined">        b : 2</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;]);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>ng-repeat 补充</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrl"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">    再循环中 默认是不允许重复的值的 如果有需要在数据的后面加 track by $index</span></div><div class="line"><span class="comment">   --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"item in arr track by $index"</span>&gt;</span></div><div class="line">      &#123;&#123;item&#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    angular.module(<span class="string">'myApp'</span>,[])</span></div><div class="line"><span class="actionscript">      .controller(<span class="string">'demoCtrl'</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</span></div><div class="line"><span class="actionscript">        $scope.arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span></div><div class="line"><span class="undefined">      &#125;]);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>ng-class 指令 用来操作类名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">  <span class="selector-class">.active</span>&#123;</span></div><div class="line"><span class="undefined">    background-color: pink;</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrl"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">    ng-class="&#123;'active':true&#125;"   添加或者删除类名</span></div><div class="line"><span class="comment">  --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">    如果复选框是选中 值就是true 如果复选框取消选中 值就是false</span></div><div class="line"><span class="comment">  --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"isActive"</span>&gt;</span></div><div class="line">  &#123;&#123;isActive&#125;&#125;</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-class</span>=<span class="string">"&#123;'active' : isActive&#125;"</span>&gt;</span></div><div class="line">    22222222</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    angular.module(<span class="string">'myApp'</span>,[])</span></div><div class="line"><span class="actionscript">      .controller(<span class="string">'demoCtrl'</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</span></div><div class="line"><span class="actionscript">        $scope.isActive = <span class="literal">true</span>;</span></div><div class="line"><span class="undefined">      &#125;]);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>ng-bind ng-bind-template  数据绑定 解决表达式闪烁问题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrl"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">    ng-bind="数据" angularjs会解析指令中的数据 解析完以后会将数据显示在指令所在的元素中</span></div><div class="line"><span class="comment">    ng-bind-template="&#123;&#123;msg1&#125;&#125; &#123;&#123;msg2&#125;&#125;"</span></div><div class="line"><span class="comment">  --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- &lt;div&gt;</span></div><div class="line"><span class="comment">    &lt;span ng-bind="msg1"&gt;&lt;/span&gt;</span></div><div class="line"><span class="comment">    &lt;span ng-bind="msg2"&gt;&lt;/span&gt;</span></div><div class="line"><span class="comment">  &lt;/div&gt; --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-bind-template</span>=<span class="string">"&#123;&#123;msg1&#125;&#125; &#123;&#123;msg2&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    angular.module(<span class="string">'myApp'</span>,[])</span></div><div class="line"><span class="actionscript">      .controller(<span class="string">'demoCtrl'</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</span></div><div class="line"><span class="actionscript">        $scope.msg1 = <span class="string">"我是msg1"</span>;</span></div><div class="line"><span class="actionscript">        $scope.msg2 = <span class="string">"我是msg2"</span>;</span></div><div class="line"><span class="undefined">      &#125;]);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>ng-non-bindable 不解析</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrl"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">    ng-non-bindable 指令所在的元素身上 和 元素内部的angularjs代码 都不会被解析</span></div><div class="line"><span class="comment">   --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-non-bindable</span> <span class="attr">ng-init</span>=<span class="string">"msg='123333'"</span>&gt;</span></div><div class="line">    &#123;&#123;front web developer&#125;&#125; &#123;&#123;msg&#125;&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-bind</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    angular.module(<span class="string">'myApp'</span>,[])</span></div><div class="line"><span class="actionscript">      .controller(<span class="string">'demoCtrl'</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</span></div><div class="line"><span class="actionscript">        $scope.msg = <span class="string">"我是msg"</span>;</span></div><div class="line"><span class="undefined">      &#125;]);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>ng-show ng-hide ng-if 通过样式或增删节点方式控制元素的显示和隐藏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">      <span class="selector-class">.active</span>&#123;</span></div><div class="line"><span class="undefined">        background: red;</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrl"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">      ng-show = "布尔值" 控制元素的显示隐藏</span></div><div class="line"><span class="comment">      ng-hide = "布尔值" 控制元素的显示隐藏</span></div><div class="line"><span class="comment">      ng-if = "布尔值" 控制元素的显示和隐藏 true 显示 false 隐藏</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">      ng-show ng-hide 是通过样式的方式来达到显示和隐藏的目的</span></div><div class="line"><span class="comment">      ng-if 是通过增加删除DOM节点的方式来达到显示和隐藏的目的</span></div><div class="line"><span class="comment">    --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;input type="checkbox" ng-model="isShow"&gt; --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;div ng-show="isShow" ng-bind-template="&#123;&#123;'点击显示隐藏'&#125;&#125;"&gt;&lt;/div&gt; --&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"isShow=true"</span> <span class="attr">ng-class</span>=<span class="string">"&#123;'active':isShow&#125;"</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"isShow=false"</span> <span class="attr">ng-class</span>=<span class="string">"&#123;'active':!isShow&#125;"</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- &lt;div ng-show="isShow" ng-bind-template=&#123;&#123;"我是按钮1对应的内容"&#125;&#125;&gt;&lt;/div&gt; --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;div ng-show="!isShow" ng-bind-template=&#123;&#123;"我是按钮2对应的内容"&#125;&#125;&gt;&lt;/div&gt; --&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-if</span>=<span class="string">"isShow"</span> <span class="attr">ng-bind-template</span>=<span class="string">&#123;&#123;</span>"我是按钮<span class="attr">1</span>对应的内容"&#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-if</span>=<span class="string">"!isShow"</span> <span class="attr">ng-bind-template</span>=<span class="string">&#123;&#123;</span>"我是按钮<span class="attr">2</span>对应的内容"&#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">      angular.module(<span class="string">'myApp'</span>,[])</span></div><div class="line"><span class="actionscript">        .controller(<span class="string">'demoCtrl'</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</span></div><div class="line"><span class="actionscript">          $scope.isShow = <span class="literal">true</span>;</span></div><div class="line"><span class="undefined">        &#125;]);</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>ng-switch ng-switch-when</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrl"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">    ng-switch ng-switch-when 类比原生js中的switch case</span></div><div class="line"><span class="comment">  --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-switch</span>=<span class="string">"num"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"num = 1"</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"num = 2"</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"num = 3"</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-switch-when</span>=<span class="string">"1"</span> <span class="attr">ng-bind-template</span>=<span class="string">"&#123;&#123;'按钮1对应的内容'&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-switch-when</span>=<span class="string">"2"</span> <span class="attr">ng-bind-template</span>=<span class="string">"&#123;&#123;'按钮2对应的内容'&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-switch-when</span>=<span class="string">"3"</span> <span class="attr">ng-bind-template</span>=<span class="string">"&#123;&#123;'按钮3对应的内容'&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    angular.module(<span class="string">'myApp'</span>,[])</span></div><div class="line"><span class="actionscript">      .controller(<span class="string">'demoCtrl'</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</span></div><div class="line"><span class="undefined">        $scope.num = 1; </span></div><div class="line"><span class="undefined">      &#125;]);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></li></ul></li><li><p>事件指令</p><ul><li>ng-click</li><li>ng-dblclick</li><li>ng-blur</li><li>ng-focus</li><li>ng-change</li><li>…</li></ul></li><li>其他指令<ul><li>ng-src = “”</li><li>ng-href = “”</li></ul></li><li>注意<ul><li>大多数指令接收的值是不需要加插值表达式的</li><li>少部分指令在使用的时候需要加上插值表达式</li><li>遇到不需要加的时候着重记忆即可<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrl"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">    原生js中有哪些事件 angularjs中就有哪些事件指令 只多不少</span></div><div class="line"><span class="comment">    ng-dblclick 双击事件</span></div><div class="line"><span class="comment">    ng-mouseenter</span></div><div class="line"><span class="comment">    ng-click</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">  --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"clickFn(10,$event)"</span>&gt;</span>单机事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-dblclick</span>=<span class="string">"dblclickFn()"</span>&gt;</span>双击事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    angular.module(<span class="string">'myApp'</span>,[])</span></div><div class="line"><span class="actionscript">      .controller(<span class="string">'demoCtrl'</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</span></div><div class="line"><span class="actionscript">        $scope.clickFn = <span class="function"><span class="keyword">function</span><span class="params">(num,e)</span></span>&#123;</span></div><div class="line"><span class="javascript">          <span class="built_in">console</span>.log(num);</span></div><div class="line"><span class="javascript">          <span class="built_in">console</span>.log(e);</span></div><div class="line"><span class="actionscript">          alert(<span class="string">"单机事件发生了"</span>);</span></div><div class="line"><span class="undefined">        &#125;;</span></div><div class="line"><span class="actionscript">        $scope.dblclickFn = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="actionscript">          alert(<span class="string">"双击事件发生了"</span>);</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">      &#125;]);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrl"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">    ng-src 当数据回来以后 angularjs在数据解析完以后 会自动生成src属性 防止404错误</span></div><div class="line"><span class="comment">    ng-href 当数据回来以后 angularjs在数据解析完以后 会自动生成href 属性 防止用户点击空连接</span></div><div class="line"><span class="comment">  --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">ng-src</span>=<span class="string">"&#123;&#123;imgUrl&#125;&#125;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-href</span>=<span class="string">"&#123;&#123;link&#125;&#125;"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    angular.module(<span class="string">'myApp'</span>,[])</span></div><div class="line"><span class="actionscript">      .controller(<span class="string">'demoCtrl'</span>,[<span class="string">'$scope'</span>,<span class="string">'$timeout'</span>,<span class="function"><span class="keyword">function</span><span class="params">($scope,$timeout)</span></span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="comment">// $timeout 延时定时器</span></span></div><div class="line"><span class="actionscript">        $timeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="actionscript">          $scope.imgUrl = <span class="string">"http://img01.sogoucdn.com/app/a/100520093/728b3e97663bb9a3-8b6df27c7c8892db-a7ed59234f76151a5c7d1ab3d6610850.jpg"</span>;  </span></div><div class="line"><span class="actionscript">          $scope.link = <span class="string">"http://www.baidu.com"</span>;</span></div><div class="line"><span class="undefined">        &#125;,2000);          </span></div><div class="line"><span class="undefined">      &#125;]);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="练习：在点击提交按钮后将选中项找出来"><a href="#练习：在点击提交按钮后将选中项找出来" class="headerlink" title="练习：在点击提交按钮后将选中项找出来"></a>练习：在点击提交按钮后将选中项找出来</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrl"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>在点击提交按钮后将选中项找出来<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">ng-repeat</span>=<span class="string">"item in balls"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"item.isChecked"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"submitData()"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"item in result"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    angular.module(<span class="string">'myApp'</span>,[])</span></div><div class="line"><span class="actionscript">      .controller(<span class="string">'demoCtrl'</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</span></div><div class="line"><span class="undefined">        $scope.balls = [</span></div><div class="line"><span class="undefined">          &#123;</span></div><div class="line"><span class="actionscript">            name:<span class="string">'足球'</span>,</span></div><div class="line"><span class="actionscript">            isChecked : <span class="literal">false</span> <span class="comment">// 代表当前的数据是否是选中的</span></span></div><div class="line"><span class="undefined">          &#125;,</span></div><div class="line"><span class="undefined">          &#123;</span></div><div class="line"><span class="actionscript">            name:<span class="string">'篮球'</span>,</span></div><div class="line"><span class="actionscript">            isChecked : <span class="literal">false</span></span></div><div class="line"><span class="undefined">          &#125;,</span></div><div class="line"><span class="undefined">          &#123;</span></div><div class="line"><span class="actionscript">            name:<span class="string">'橄榄球'</span>,</span></div><div class="line"><span class="actionscript">            isChecked : <span class="literal">false</span></span></div><div class="line"><span class="undefined">          &#125;,</span></div><div class="line"><span class="undefined">          &#123;</span></div><div class="line"><span class="actionscript">            name:<span class="string">'排球'</span>,</span></div><div class="line"><span class="actionscript">            isChecked : <span class="literal">false</span></span></div><div class="line"><span class="undefined">          &#125;,</span></div><div class="line"><span class="undefined">          &#123;</span></div><div class="line"><span class="actionscript">            name:<span class="string">'乒乓球'</span>,</span></div><div class="line"><span class="actionscript">            isChecked : <span class="literal">false</span></span></div><div class="line"><span class="undefined">          &#125;</span></div><div class="line"><span class="undefined">        ];</span></div><div class="line"><span class="actionscript">        $scope.submitData = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="actionscript">          <span class="comment">//准备新数组</span></span></div><div class="line"><span class="undefined">          $scope.result = [];              </span></div><div class="line"><span class="actionscript">          <span class="comment">//循环数据</span></span></div><div class="line"><span class="actionscript">          <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; $scope.balls.length; i++)&#123;</span></div><div class="line"><span class="actionscript">            <span class="comment">//如果当前数据的isChecked字段为true 就是选中数据</span></span></div><div class="line"><span class="actionscript">            <span class="keyword">if</span>($scope.balls[i].isChecked)&#123;</span></div><div class="line"><span class="actionscript">              <span class="comment">//将选中的数据添加到结果数组中</span></span></div><div class="line"><span class="undefined">              $scope.result.push($scope.balls[i]);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">          &#125;</span></div><div class="line"><span class="undefined">        &#125;   </span></div><div class="line"><span class="undefined">      &#125;]);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="练习：点击按钮清空数据"><a href="#练习：点击按钮清空数据" class="headerlink" title="练习：点击按钮清空数据"></a>练习：点击按钮清空数据</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrl"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"item in list"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;item.description&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-show</span>=<span class="string">"list.length == 0"</span>&gt;</span></div><div class="line">    暂无数据</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"list.length = 0"</span>&gt;</span>清空数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    angular.module(<span class="string">'myApp'</span>,[])</span></div><div class="line"><span class="actionscript">      .controller(<span class="string">'demoCtrl'</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span><span class="params">($scope)</span></span>&#123;</span></div><div class="line"><span class="undefined">        $scope.list = [</span></div><div class="line"><span class="undefined">          &#123;</span></div><div class="line"><span class="actionscript">              id:<span class="string">'1'</span>,</span></div><div class="line"><span class="actionscript">              title:<span class="string">'有人在微信QQ上拉你搞投资？那都是骗子！'</span>,</span></div><div class="line"><span class="actionscript">              description : <span class="string">'喜欢炒股的朋友或许经常在微信或者QQ收到各种“业务员”的推广，有的介绍老师给你，有的介绍私募给你，有的是亲自操刀上阵，通常情况下是在操作获利之后五五分成，在操作一段时间之后，“业务员”会告诉你最近股市不好做，不好赚钱，而“我们有新的业务”，可以快速地获得利润，再给你发一些高收益的截图。'</span></span></div><div class="line"><span class="undefined">          &#125;,</span></div><div class="line"><span class="undefined">          &#123;</span></div><div class="line"><span class="actionscript">              id:<span class="string">'2'</span>,</span></div><div class="line"><span class="actionscript">              title:<span class="string">'女子被"男友"骗150万 相处3年不知对方系闺蜜假扮'</span>,</span></div><div class="line"><span class="actionscript">              description : <span class="string">'时报讯 今年2月，杭州市滨江警方接到一起报警，报警人林芬（化名）称2014年至2017年间，自己被男友高鹏（化名）骗了共计150多万元。近日，民警抓获了该案嫌疑人，一看，这高鹏啊，不仅是个女的，还是林芬的闺蜜。'</span></span></div><div class="line"><span class="undefined">          &#125;</span></div><div class="line"><span class="undefined">        ]</span></div><div class="line"><span class="undefined">      &#125;]);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><blockquote><p>End..</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;p&gt;接着上篇继续来介绍angularjs的一些知识和用法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;创建模块时的第二个参数&quot;&gt;&lt;a href=&quot;#创建模块时的第二个参数&quot; class=&quot;headerlink&quot; title=&quot;创建模块时的第二个参数&quot;&gt;&lt;/a&gt;创建模块时的第二个参数&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;ng-app&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;myApp&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;./angular.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    /*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      加第二个参数 是创建模块&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;      不加第二个参数是 获取模块&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = angular.module(&lt;span class=&quot;string&quot;&gt;&#39;myApp&#39;&lt;/span&gt;,[]);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(angular.module(&lt;span class=&quot;string&quot;&gt;&#39;myApp&#39;&lt;/span&gt;) === app);     &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="summary" scheme="http://haotengfei.com/tags/summary/"/>
    
      <category term="notes" scheme="http://haotengfei.com/tags/notes/"/>
    
      <category term="angularJs" scheme="http://haotengfei.com/tags/angularJs/"/>
    
  </entry>
  
  <entry>
    <title>about_angularjs01</title>
    <link href="http://haotengfei.com/2016/05/08/about_angularjs01/"/>
    <id>http://haotengfei.com/2016/05/08/about_angularjs01/</id>
    <published>2016-05-08T11:50:00.000Z</published>
    <updated>2017-10-06T15:16:22.961Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>简单的介绍一下关于angularjs的一些知识和一些用法</p></blockquote><h3 id="angularjs是什么"><a href="#angularjs是什么" class="headerlink" title="angularjs是什么"></a>angularjs是什么</h3><ul><li>一款优秀的前端高级JS框架</li><li>由谷歌团队负责开发维护</li></ul><h3 id="为什么要学习angularjs"><a href="#为什么要学习angularjs" class="headerlink" title="为什么要学习angularjs"></a>为什么要学习angularjs</h3><ul><li>快速构建单页web应用，化繁为简<ul><li>谷歌的Feedback项目</li><li>将6个月开发的17000行前端代码，使用3周压缩到1500行</li></ul></li></ul><a id="more"></a><h3 id="框架与库"><a href="#框架与库" class="headerlink" title="框架与库"></a>框架与库</h3><ul><li>无论是angularjs还是jQuery都是用原生JS封装的</li><li>库：<ul><li>对代码进行封装，调用封装的方法，简化操作</li></ul></li><li>框架：<ul><li>提供代码的书写规则，按照规则去写代码，框架会帮我们实现相应的功能</li></ul></li></ul><h3 id="anjularjs核心思想"><a href="#anjularjs核心思想" class="headerlink" title="anjularjs核心思想"></a>anjularjs核心思想</h3><ul><li>通过指令拓展HTML功能，通过插值表达式绑定数据到HTML</li><li>不推荐在控制器中直接操作DOM，而是通过指令操作</li><li>以数据为中心，用数据驱动DOM</li></ul><h3 id="框架的版本说明"><a href="#框架的版本说明" class="headerlink" title="框架的版本说明"></a>框架的版本说明</h3><ul><li>目前angularjs框架的版本是1.6.x</li><li>angularjs框架09年诞生，专注与PCweb,并没有考虑到移动端，在移动端性能很差</li><li>所以angularjs团队决定重新开发一个框架，于是乎angular2框架在16年诞生</li><li>angular2并不是angularjs的升级版，而是一个全新的框架</li><li>2016年国内已经形成了angularjs，vue，react三足鼎立的局势</li><li>所以angular2占据的市场份额仍然比较小</li><li>企业里面用的比较多的仍然是angularjs框架</li><li>github中框架星星的数量也可以说明这点<ul><li>angularjs 57.1k angular 27.9k</li></ul></li></ul><h3 id="获取angularjs的方式"><a href="#获取angularjs的方式" class="headerlink" title="获取angularjs的方式"></a>获取angularjs的方式</h3><ul><li><a href="http://angularjs.org" target="_blank" rel="external">在官网上下载</a></li><li><a href="https://cdn.bootcss.com/angular.js/1.6.4/angular.min.js" target="_blank" rel="external">通过CDN的方式引入到页面中</a></li><li><code>&lt;script src=&quot;https://cdn.bootcss.com/angular.js/1.6.4/angular.min.js&quot;&gt;&lt;/script&gt;</code></li></ul><h3 id="angularjs快速入门"><a href="#angularjs快速入门" class="headerlink" title="angularjs快速入门"></a>angularjs快速入门</h3><ul><li>案例对比原生JS与angularjs<ul><li>原生JS实现值加1</li><li>angularjs实现值加1</li></ul></li></ul><p>原生js：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>)[<span class="number">0</span>];</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> inp = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>)[<span class="number">0</span>];</span></div><div class="line"><span class="javascript">  btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="undefined">    inp.value = inp.value - 0 + 1;</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>angularjs：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">    ng-model="变量" 获取表单元素的值，只能写在表单元素上</span></div><div class="line"><span class="comment">    ng-click="" 给当前的元素添加点击事件</span></div><div class="line"><span class="comment">    ng-app 当页面加载结束后，angularjs会去页面中查找有没有一个叫做ng-app的属性，如果没有，什么都不做。如果找到了angularjs会执行这个属性所在的元素包裹的代码</span></div><div class="line"><span class="comment">    1. ng-app 可以写在任何一个标签上</span></div><div class="line"><span class="comment">    2. 通常我们只会在页面中写一个ng-app</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">    在使用了angularjs的页面，以ng-开头的属性 叫做指令</span></div><div class="line"><span class="comment">   --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span> = <span class="string">"val"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"val = val - 0 + 1"</span>&gt;</span>点击加+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>插值表达式介绍<ul><li>这种双大括号的形式称之为插值表达式</li></ul></li><li>差值表达式的作用<ul><li>在表达式中可以写ng中的变量</li><li>可以显示字符串</li><li>在表达式中可以进行计算</li><li>可以在表达式中写三目运算符</li><li>执行angularjs函数</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">    ng-init="变量1=值1;变量2=值2" 给变量赋初始值</span></div><div class="line"><span class="comment">   --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"val"</span> <span class="attr">ng-init</span>=<span class="string">"val = '我是初始值'"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">    &#123;&#123;&#125;&#125; 差值表达式 将数据绑定到页面中</span></div><div class="line"><span class="comment">    作用：</span></div><div class="line"><span class="comment">      1.可以显示angularjs变量</span></div><div class="line"><span class="comment">      2.可以显示字符串</span></div><div class="line"><span class="comment">      3.可以进行简单的计算</span></div><div class="line"><span class="comment">      4.可以写三元运算符</span></div><div class="line"><span class="comment">      5.不可以写if else 判断</span></div><div class="line"><span class="comment">   --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; val &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;"angularjs" + "很好用"&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;22-2+5&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;2 === 1?'正确' : '错误'&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>基本的指令介绍<ul><li>在使用angularjs的页面，以ng-开头的属性称之为指令</li><li>ng-app<ul><li>页面加载完成以后angularjs会在页面中查找这个指令</li><li>没有找到angularjs不会启动</li><li>找到angularjs将会执行指令所在的标签内部包裹的代码</li><li>可以接受模块名字为参数 angularjs会将当前页面交给指令所指定的模块去管理</li></ul></li><li>ng-model<ul><li>获取表单元素的值</li><li>实现双向数据绑定</li></ul></li><li>ng-click<ul><li>给指令所在的元素绑定点击事件</li></ul></li><li>ng-init<ul><li>初始化数据</li></ul></li></ul></li></ul><h3 id="angularjs基于模块开发项目"><a href="#angularjs基于模块开发项目" class="headerlink" title="angularjs基于模块开发项目"></a>angularjs基于模块开发项目</h3><ul><li>模块化开发带来的好处<ul><li>方便管理，复用，后期维护方便</li><li>解决代码冲突，方便多人协作开发</li></ul></li><li>angularjs中模块的种类<ul><li>入口模式</li><li>功能模式</li></ul></li><li>分析模块和控制器与页面之间的关系</li><li>定义模块的语法规则</li><li>定义模块时，第二个参数加与不加的区别<ul><li>加第二个参数是创建模块</li><li>不加第二个参数是获取模块</li></ul></li></ul><h3 id="angularjs中如何使用控制器"><a href="#angularjs中如何使用控制器" class="headerlink" title="angularjs中如何使用控制器"></a>angularjs中如何使用控制器</h3><ul><li>定义及使用控制器</li><li>控制器的作用<ul><li>为用户界面提供数据支持</li><li>用户界面的逻辑主要写在控制器中</li></ul></li><li>ng-click<ul><li>函数调用</li><li>angularjs代码 不能写原生JS代码</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line"><span class="comment">  ng-app="模块的名字"</span></div><div class="line"><span class="comment">  告诉angularjs当前的页面由我创建的myApp模块去管理   </span></div><div class="line"><span class="comment"> --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">    ng-controller="控制器的名字" 告诉angularjs当前区域由 这个控制器去控制</span></div><div class="line"><span class="comment">   --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sideBar"</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrlA"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"val"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span> = <span class="string">"clickFn()"</span>&gt;</span>点我啊<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span> <span class="attr">ng-controller</span>=<span class="string">"demoCtrlB"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    /*</span></div><div class="line"><span class="undefined">      当我们在页面中引入了angularjs文件后 在全局就会有一个叫做angular的对象</span></div><div class="line"><span class="undefined">      创建模块的语法</span></div><div class="line"><span class="javascript">        angular.module(<span class="string">'模块的名字'</span>,[<span class="string">'要依赖的模块的名字'</span>]);   创建模块</span></div><div class="line"><span class="undefined">        注意：如果当前模块没有要依赖的模块 第二个参数一定要写 写一个空数组</span></div><div class="line"><span class="undefined">      创建控制器的语法</span></div><div class="line"><span class="javascript">        模块对象.controller(<span class="string">'控制器的名字'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span></div><div class="line"><span class="undefined">      控制器默认是不会自己执行的，只有在页面使用了ng-controller指令调用了控制器，控制器才能执行</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">      多个兄弟控制器之间的$scope下面挂载了相同的属性 不会冲突 不会覆盖</span></div><div class="line"><span class="undefined">    */ </span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>,[]);</span></div><div class="line"><span class="javascript">    app.controller(<span class="string">'demoCtrlA'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span></div><div class="line"><span class="javascript">      <span class="comment">// $scope 对象类型，为控制器控制的区域提供数据支持</span></span></div><div class="line"><span class="javascript">      <span class="comment">// 暴露在$scope对象下面的值，在控制器控制的区域都可以拿的到 </span></span></div><div class="line"><span class="javascript">      $scope.val = <span class="string">"我是控制器赋的初始值"</span>;</span></div><div class="line"><span class="javascript">      $scope.msg = <span class="string">"我是控制器A中的msg"</span>;     </span></div><div class="line"><span class="javascript">      $scope.clickFn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">        alert(<span class="string">"点我干嘛！"</span>);</span></div><div class="line"><span class="undefined">      &#125;;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="javascript">    app.controller(<span class="string">'demoCtrlB'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span></div><div class="line"><span class="javascript">      $scope.msg = <span class="string">"我是控制器B中的msg"</span>;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="angularjs双向数据绑定"><a href="#angularjs双向数据绑定" class="headerlink" title="angularjs双向数据绑定"></a>angularjs双向数据绑定</h3><ul><li>双向数据绑定介绍<ul><li>双向：html和js</li><li>angularjs中的变量</li><li>html =&gt; js   js =&gt; html</li><li>html中通过表单元素将数据改变，js中跟着同步</li><li>js中将数据改变 html中跟着同步</li></ul></li><li>实现双向数据绑定的必要条件<ul><li>必须是表单元素，并且元素身上有ng-model指令 </li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span> = <span class="string">"myApp"</span> <span class="attr">ng-controller</span> = <span class="string">'demoCtrl'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span> = <span class="string">"val"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; val &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span> = <span class="string">"setvalue()"</span>&gt;</span>设置值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span> = <span class="string">"getvalue()"</span>&gt;</span>获取值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>,[]);</span></div><div class="line"><span class="javascript">    app.controller(<span class="string">'demoCtrl'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span></div><div class="line"><span class="javascript">      <span class="comment">// 页面中的数据与控制器中的数据是 对应的</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">      /*</span></div><div class="line"><span class="undefined">        angularjs在页面加载完以后 会去页面中找ng-app指令 如果没有找到 什么都不做 如果找到执行指令包裹的代码 并且会在js中产生一个对象 用来保存页面中的数据 其实就是$scope对象</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        angularjs在执行代码的时候 在页面中如果碰到了数据 就会去当前区域的控制器中的$scope下面去找 有没有这样的数据 如果有 将数据赋值给当前的元素 当我们给一个文本框写上ng-model指令的时候 不但会获取文本框的值 而且angularjs会监听文本框的值的变化 当事件发生的时候 angularjs获取到文本框中最新的值 并且把值赋值给右侧的变量 当右侧的值发生变化的时候 angularjs会重新去页面中找 哪些地方用到了这个变量 如果找到会将变量更新成最新的值</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        这样的过程叫做数据的双向绑定</span></div><div class="line"><span class="undefined">        双向html和js</span></div><div class="line"><span class="undefined">      */</span></div><div class="line"><span class="javascript">      $scope.val = <span class="string">"我是初始值"</span>;</span></div><div class="line"><span class="javascript">      $scope.setvalue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">        $scope.val = <span class="string">"我是通过设置按钮改变的值"</span>;</span></div><div class="line"><span class="undefined">      &#125;;</span></div><div class="line"><span class="javascript">      $scope.getvalue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="undefined">        alert($scope.val);</span></div><div class="line"><span class="undefined">      &#125;;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="单页web应用介绍（single-page-web-application）简称SPA"><a href="#单页web应用介绍（single-page-web-application）简称SPA" class="headerlink" title="单页web应用介绍（single page web application）简称SPA"></a>单页web应用介绍（single page web application）简称SPA</h3><ul><li>回顾传统网站(<a href="http://www.kuoda.com.cn/indexs.html" target="_blank" rel="external">http://www.kuoda.com.cn/indexs.html</a>)</li><li>单页应用网站(<a href="http://m.daqizhong.com/index.html#/" target="_blank" rel="external">http://m.daqizhong.com/index.html#/</a>)</li><li>单页Web应用，就是只有一张Web应用的页面</li><li>单页应用程序的特点<ul><li>整个网站由一个页面构成</li><li>公共的部分只加载一次</li><li>利用ajax局部刷新达到切换的目的</li><li>不会发生页面跳转白屏的现象</li><li>锚点与页面对应</li></ul></li><li>单页Web应用的应用场景<ul><li>单页面应用对搜索引擎不友好 不适合做面向大众的展示型网站</li><li>网站后台管理系统 办公OA 混合App 等等不需要被搜索引擎搜索到的应用</li></ul></li><li>原生JS实现一个简单的单页面demo</li><li>angularjs实现一个简单的单页面demo</li></ul><p>原生JS：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#index"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#list"</span>&gt;</span>列表页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">/*当地址栏中的锚点值发生变化的时候 执行对应的处理函数*/</span></span></div><div class="line"><span class="undefined">    /*</span></div><div class="line"><span class="undefined">      1.监听地址栏中的锚点变化</span></div><div class="line"><span class="undefined">      2.获取当前的锚点值</span></div><div class="line"><span class="undefined">      3.判断下锚点值是什么</span></div><div class="line"><span class="undefined">      4.发送ajax请求取对应的数据</span></div><div class="line"><span class="undefined">    */</span></div><div class="line"><span class="javascript">    <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">if</span>(location.hash === <span class="string">"#index"</span>)&#123;</span></div><div class="line"><span class="javascript">        <span class="comment">//获取首页内容</span></span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></div><div class="line"><span class="javascript">        xhr.open(<span class="string">'get'</span>,<span class="string">'./index.html'</span>,<span class="literal">true</span>);</span></div><div class="line"><span class="undefined">        xhr.send();</span></div><div class="line"><span class="javascript">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">          <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123;</span></div><div class="line"><span class="javascript">              <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>).innerHTML = xhr.responseText;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">          &#125;</span></div><div class="line"><span class="undefined">        &#125;;</span></div><div class="line"><span class="javascript">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(location.hash === <span class="string">"#list"</span>)&#123;</span></div><div class="line"><span class="javascript">        <span class="comment">//获取列表页中的数据</span></span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></div><div class="line"><span class="javascript">        xhr.open(<span class="string">'get'</span>,<span class="string">'./list.html'</span>,<span class="literal">true</span>);</span></div><div class="line"><span class="undefined">        xhr.send();</span></div><div class="line"><span class="javascript">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">          <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123;</span></div><div class="line"><span class="javascript">              <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>).innerHTML = xhr.responseText;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">          &#125;</span></div><div class="line"><span class="undefined">        &#125;;</span></div><div class="line"><span class="undefined">      &#125;</span></div><div class="line"><span class="undefined">    &#125;;</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="angularjs中的路由"><a href="#angularjs中的路由" class="headerlink" title="angularjs中的路由"></a>angularjs中的路由</h3><ul><li>angularjs中的路由使用方法<ul><li><a href="https://docs.angularjs.org/api/ngRoute" target="_blank" rel="external">官方说明文档</a></li><li>如何获取路由模块<ul><li><a href="https://cdn.bootcss.com/angular.js/1.6.4/angular-route.min.js" target="_blank" rel="external">通过CDN的方式引入到页面中</a></li></ul></li><li>在html页面中通过script标签的方式引入路由模块文件</li><li>在应用主模块中依赖路由模块ngRoute  </li><li>配置路由<ul><li>通过config方法注入$routeProvider</li><li>介绍配置中常用的参数</li></ul></li><li>路由和控制器的组合</li><li>使用templateUrl方式载入模块需要在html环境下（本地file协议下不支持）</li></ul></li></ul><p>angularjs：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span> = <span class="string">"myApp"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#!/index1"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#!/list"</span>&gt;</span>列表页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"angular-route.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">    在前端 路由就是用来配置页面跳转的 配置锚点值与页面的对应关系</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">    在angularjs中 模块依赖分为两步</span></div><div class="line"><span class="comment">      1.将要依赖的模块文件引入页面中</span></div><div class="line"><span class="comment">      2.将模块的名字写在主模块的第二个参数中</span></div><div class="line"><span class="comment">        主模块：入口模块 用来管理页面的模块</span></div><div class="line"><span class="comment">        angular-route =&gt; ngRoute</span></div><div class="line"><span class="comment">    配置路由的语法:</span></div><div class="line"><span class="comment">      模块对象.config(function($routeProvider)&#123;</span></div><div class="line"><span class="comment">        // 在config方法的回调函数中写路由的具体配置</span></div><div class="line"><span class="comment">        $routeProvider</span></div><div class="line"><span class="comment">          .when('锚点值1','&#123;</span></div><div class="line"><span class="comment">            templateUrl:'模版地址'</span></div><div class="line"><span class="comment">          &#125;)  </span></div><div class="line"><span class="comment">          .when('锚点值2','&#123;</span></div><div class="line"><span class="comment">            templateUrl:'模版地址'</span></div><div class="line"><span class="comment">          &#125;)</span></div><div class="line"><span class="comment">        &lt;div ng-view&gt;&lt;/div&gt;  </span></div><div class="line"><span class="comment">        告诉angularjs路由请求的数据放在有ng-view指令的元素中</span></div><div class="line"><span class="comment">        angularjs要求路由的锚点值必须以/开头</span></div><div class="line"><span class="comment">        路由的配置中 不需要写#</span></div><div class="line"><span class="comment">        当我们在页面中使用了路由以后 就不要在页面中使用ng-controller指定控制器了</span></div><div class="line"><span class="comment">        而需要在路由的配置参数中指定</span></div><div class="line"><span class="comment">      &#125;);</span></div><div class="line"><span class="comment">   --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>,[<span class="string">'ngRoute'</span>]);</span></div><div class="line"><span class="javascript">    app.config(<span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>)</span>&#123;</span></div><div class="line"><span class="undefined">      $routeProvider</span></div><div class="line"><span class="javascript">        <span class="comment">// 当访问/index1锚点的时候 请求templateUrl对应的模版</span></span></div><div class="line"><span class="javascript">        .when(<span class="string">'/index1'</span>,&#123;</span></div><div class="line"><span class="javascript">          <span class="comment">// templateUrl:'./index1.html'  // 发送ajax请求</span></span></div><div class="line"><span class="xml">          // template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span>我是通过template设置的模版<span class="tag">&lt;/<span class="name">div</span>&gt;</span>' //不需要发送ajax请求</span></div><div class="line"><span class="javascript">          templateUrl:<span class="string">'index1Tpl'</span>,</span></div><div class="line"><span class="javascript">          controller:<span class="string">'index1Ctrl'</span></span></div><div class="line"><span class="undefined">        &#125;)</span></div><div class="line"><span class="javascript">        .when(<span class="string">'/list'</span>,&#123;</span></div><div class="line"><span class="javascript">          templateUrl:<span class="string">'./list.html'</span>,</span></div><div class="line"><span class="javascript">          controller:<span class="string">'listCtrl'</span></span></div><div class="line"><span class="undefined">        &#125;)</span></div><div class="line"><span class="javascript">        <span class="comment">// 当没有匹配到路由的时候 默认跳转首页</span></span></div><div class="line"><span class="javascript">        <span class="comment">// 两种情况1.输入错误 2.没有输入</span></span></div><div class="line"><span class="javascript">        .otherwise(<span class="string">'/index1'</span>);</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="javascript">    app.controller(<span class="string">'index1Ctrl'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span></div><div class="line"><span class="javascript">      $scope.msg = <span class="string">'我是首页'</span>;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="javascript">    app.controller(<span class="string">'listCtrl'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span></div><div class="line"><span class="javascript">      $scope.msg = <span class="string">'我是列表页'</span>;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"index1Tpl"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是script模版  首页 &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="路由传递参数"><a href="#路由传递参数" class="headerlink" title="路由传递参数"></a>路由传递参数</h3><ul><li>在实际的项目中，访问文章的详情页面的时候，一般地址栏都会显示当前文章的ID</li><li>让控制器知道我们当前访问的是哪一篇文章，得到文章的ID，去请求具体的文章数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#!/index"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span>    </div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#!/list"</span>&gt;</span>列表页<span class="tag">&lt;/<span class="name">a</span>&gt;</span>    </div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./angular-route.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    /*</span></div><div class="line"><span class="undefined">      路由传递参数 3步</span></div><div class="line"><span class="undefined">      从列表页跳转到详情页 将文章的ID传到详情页 在文章详情页拿到ID以后 调用接口</span></div><div class="line"><span class="undefined">        1.在被传递参数的页面(详情页)路由中配置参数占位符(类似与函数的形参)</span></div><div class="line"><span class="undefined">        2.在传递参数的页面(列表页)链接中配置实际参数</span></div><div class="line"><span class="undefined">        3.在被传递参数的页面(详情页)控制器中获取传递过来的参数</span></div><div class="line"><span class="undefined">    */</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>,[<span class="string">'ngRoute'</span>]);</span></div><div class="line"><span class="javascript">    app.config(<span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>)</span>&#123;</span></div><div class="line"><span class="undefined">      $routeProvider</span></div><div class="line"><span class="javascript">        .when(<span class="string">'/index'</span>,&#123;</span></div><div class="line"><span class="javascript">          templateUrl : <span class="string">'indexTpl'</span></span></div><div class="line"><span class="undefined">        &#125;)      </span></div><div class="line"><span class="javascript">        .when(<span class="string">'/list'</span>,&#123;</span></div><div class="line"><span class="javascript">          templateUrl : <span class="string">'listTpl'</span></span></div><div class="line"><span class="undefined">        &#125;)</span></div><div class="line"><span class="javascript">        .when(<span class="string">'/article/:id'</span>,&#123;</span></div><div class="line"><span class="javascript">          templateUrl : <span class="string">'articleTpl'</span>,</span></div><div class="line"><span class="javascript">          controller : <span class="string">'articleCtrl'</span></span></div><div class="line"><span class="undefined">        &#125;)</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="javascript">    app.controller(<span class="string">'articleCtrl'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$routeParams</span>)</span>&#123;</span></div><div class="line"><span class="javascript">      <span class="comment">// $routeParams 对象 里面存储着当前路由传递过来的参数</span></span></div><div class="line"><span class="javascript">      $scope.msg = <span class="string">"当前文章的ID是"</span> + $routeParams.id;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"indexTpl"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="undefined">      我是首页</span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"listTpl"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></div><div class="line"><span class="javascript">      &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#!/article/1"</span>&gt;</span>我是第一篇文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></div><div class="line"><span class="javascript">      &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#!/article/2"</span>&gt;</span>我是第二篇文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></div><div class="line"><span class="javascript">      &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#!/article/3"</span>&gt;</span>我是第三篇文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"articleTpl"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="undefined">      &#123;&#123;msg&#125;&#125;</span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="angularjs相关网站"><a href="#angularjs相关网站" class="headerlink" title="angularjs相关网站"></a>angularjs相关网站</h3><ul><li><a href="http://angularjs.org" target="_blank" rel="external">官方网站</a></li><li><a href="https://code.angularjs.org/1.6.4/docs/api" target="_blank" rel="external">官方文档</a></li><li>[学习网站]<ul><li><a href="http://www.angularjs.net.cn" target="_blank" rel="external">http://www.angularjs.net.cn</a></li><li><a href="http://www.apjs.net" target="_blank" rel="external">http://www.apjs.net</a></li><li><a href="http://www.runoob.com/angularjs/angularjs-tutorial.html" target="_blank" rel="external">http://www.runoob.com/angularjs/angularjs-tutorial.html</a></li><li><a href="https://stackoverflow.com/" target="_blank" rel="external">https://stackoverflow.com/</a></li></ul></li></ul><blockquote><p>End..</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;简单的介绍一下关于angularjs的一些知识和一些用法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;angularjs是什么&quot;&gt;&lt;a href=&quot;#angularjs是什么&quot; class=&quot;headerlink&quot; title=&quot;angularjs是什么&quot;&gt;&lt;/a&gt;angularjs是什么&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一款优秀的前端高级JS框架&lt;/li&gt;
&lt;li&gt;由谷歌团队负责开发维护&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;为什么要学习angularjs&quot;&gt;&lt;a href=&quot;#为什么要学习angularjs&quot; class=&quot;headerlink&quot; title=&quot;为什么要学习angularjs&quot;&gt;&lt;/a&gt;为什么要学习angularjs&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;快速构建单页web应用，化繁为简&lt;ul&gt;
&lt;li&gt;谷歌的Feedback项目&lt;/li&gt;
&lt;li&gt;将6个月开发的17000行前端代码，使用3周压缩到1500行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="summary" scheme="http://haotengfei.com/tags/summary/"/>
    
      <category term="notes" scheme="http://haotengfei.com/tags/notes/"/>
    
      <category term="angularJs" scheme="http://haotengfei.com/tags/angularJs/"/>
    
  </entry>
  
  <entry>
    <title>about_jquery</title>
    <link href="http://haotengfei.com/2016/05/02/about_jquery/"/>
    <id>http://haotengfei.com/2016/05/02/about_jquery/</id>
    <published>2016-05-02T10:50:00.000Z</published>
    <updated>2017-10-03T03:15:09.970Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><ul><li>隐式迭代</li><li>jQuery实例化过程</li><li>插件扩展原理</li><li>链式操作</li><li>特定API的实现思路</li></ul></blockquote><a id="more"></a><h3 id="隐式迭代"><a href="#隐式迭代" class="headerlink" title="隐式迭代"></a>隐式迭代</h3><p>那么什么是隐式迭代呢？<br>其实说白了很简单，比如$.each、$选择器选中的元素调用对应的api进行处理时，表面上看不出循环的样子，这是因为jQuery内部帮我们做了for循环，这就是所谓的隐式迭代。</p><p>举个例子：(实现在页面中的3个div3个span中分别放入内容0、1、2)</p><p>html部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure><p>js部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; divs.length; i++)&#123;</div><div class="line">  div[i].innerHTML = i;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> spans = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; spans.length; i++)&#123;</div><div class="line">  span[i].innerHTML = i;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//每次都会for循环，这样我们发现代码有大量的冗余，那么我们来简单封装一下</span></div><div class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);  </div><div class="line"><span class="keyword">var</span> spans = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'span'</span>);  </div><div class="line">foo(divs);</div><div class="line">foo(spans);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">elements</span>)</span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements.length; i++)&#123;</div><div class="line">  elements[i].innerHTML = i;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>上面的封装虽然暂时实现了需求，但是面对复杂的需求时还是不够灵活，那么怎么变的更灵活呢？(利用回调函数)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);  </div><div class="line">foo(divs,<span class="function"><span class="keyword">function</span>(<span class="params">index,item</span>)</span>&#123;</div><div class="line">  item.innerHTML = index; </div><div class="line">  <span class="comment">//这样就会变的特别灵活，可以增加许多其他的业务。</span></div><div class="line">  item.style.color = <span class="string">'red'</span>;</div><div class="line">&#125;);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">elements,callback</span>)</span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; elements.length; i++)&#123;</div><div class="line">    callback(i,elements[i]);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过上面封装的代码，就不难看出，这样的封装，在实现业务的同时，还可以省去大量的for循环；其实jQuery中的隐式迭代就是采用了类似的封装。但是jquery还改变了for循环中this的指向，其实做法也简单，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);  </div><div class="line">foo(divs,<span class="function"><span class="keyword">function</span>(<span class="params">index,item</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.innerHTML = index; </div><div class="line">  <span class="comment">//这样就会变的特别灵活，可以增加许多其他的业务。</span></div><div class="line">  <span class="keyword">this</span>.style.color = <span class="string">'red'</span>;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === item)      <span class="comment">//true;</span></div><div class="line">&#125;);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">elements,callback</span>)</span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; elements.length; i++)&#123;</div><div class="line">    callback.call(elements[i],i,elements[i]);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><b>总结：</b></p><p>封装到这里后，我们可以发现我们封装的方法已经和jQuery中的$.each已经非常接近了，也不难看出，其实jQuery中的隐式迭代就是这样做的</p><h3 id="jQuery实例化过程"><a href="#jQuery实例化过程" class="headerlink" title="jQuery实例化过程"></a>jQuery实例化过程</h3><h4 id="jQuery实例的本质是什么？"><a href="#jQuery实例的本质是什么？" class="headerlink" title="jQuery实例的本质是什么？"></a>jQuery实例的本质是什么？</h4><p>首先，我们要知道什么是jQuery实例($选择器选中的元素，它的返回值就是jQuery实例);其次jQuery对象和原生DOM对象有什么区别？举个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ret = $(<span class="string">"div"</span>);       <span class="comment">//那么ret就可以说是jQuey对象</span></div><div class="line"><span class="keyword">var</span> dom = ret.get(<span class="number">0</span>);     <span class="comment">//那么dom就可以说是DOM对象</span></div><div class="line"><span class="keyword">var</span> dom = ret[<span class="number">0</span>];         <span class="comment">//这样写也是DOM对象</span></div></pre></td></tr></table></figure><p>通过这个例子可以看出:jQuery对象的本质就是伪数组(类数组);DOM对象就是DOM的实例化对象(浏览器中产生的原生DOM对象)，伪数组（jQuery对象）中存的就是原生DOM对象，</p><h4 id="本质上是什么？"><a href="#本质上是什么？" class="headerlink" title="$本质上是什么？"></a>$本质上是什么？</h4><p>首先，我们来说说什么是对象吧？<mark>  对象就是无序的键值对的集合  </mark><br>我们通过<code>console.dir($)</code>;可也发现打印出来的也是无序列的键值对集合,所以说我们也可以说$是一个对象<br>我们通过<code>console.log(typeof $)</code>可以发现$本质亦可以说是一个函数。但是我们可以说所有的函数都是对象，但是不一定所有的对象都是函数。<mark>因此严格意义上来说$的本质上是一个函数</mark></p><h4 id="实例化过程"><a href="#实例化过程" class="headerlink" title="实例化过程"></a>实例化过程</h4><p><mark>jQuery的实例化是返回jQuery原型的初始化函数(构造函数)实例化出来的实例，但是为了让jQuery实例可以访问到jQuery原型，所以改变init构造函数的原型指向jQuery原型（说白了jQuery实例的最本质就是init函数的实例）</mark></p><p>模仿jQuery实例化过程中的核心代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> $.prototype.init(selector);</div><div class="line">&#125;;</div><div class="line"><span class="comment">//隐式迭代</span></div><div class="line">$.each = <span class="function"><span class="keyword">function</span> (<span class="params">elements,callback</span>)</span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; elements.length; i++)&#123;</div><div class="line">    callback.call(elements[i],i,elements[i]);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">$.prototype = &#123;</div><div class="line">  init : <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(selector); </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; divs.length; i++)&#123;</div><div class="line">      <span class="comment">//方便我们做隐式迭代</span></div><div class="line">      <span class="keyword">this</span>[i] = divs[i]; </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.length = divs.length;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  nihao : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'你好'</span>);    </div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">//再扩充一个方法</span></div><div class="line">  html : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">0</span>)&#123;</div><div class="line">      <span class="comment">//实参列表的长度为0，说明没有传参数，获取第一个元素内部的内容</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>[<span class="number">0</span>].innerHTML;x</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="comment">//设置每个div的内容</span></div><div class="line">      $.each(<span class="keyword">this</span>,<span class="function"><span class="keyword">function</span>(<span class="params">index,item</span>)</span>&#123;</div><div class="line">        item.innerHTML = args[<span class="number">0</span>];</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">$.prototype.init.prototype = $.prototype;</div></pre></td></tr></table></figure><p>以上代码，就模仿jQuery实现了其中的html方法。其他方法也是类似，往上加就可以。</p><p><b>jQuery实例化的优势，为什么要有实例化，到底实例化后在解决什么问题？</b></p><p>jQuery实例化对象的方法相比于普通方法的优势：</p><p>1、不需要出现大量的new关键字。<br>2、可实现链式写法。<br>3、书写更方便</p><p>实例化的原因：</p><p>1、实例化有利于管理程序中不同的DOM选择和处理（不同的选择产生不同的jQuery对象）<br>2、面向过程的书写方式并不适合库级别的程序，所以它采用面向对象的写法，而面向对象的优势在于可以针对不同的需要实例化不同的对象<br>3、实例化使对象既能拥有自己特殊的属性，又能使用公共的方法。</p><p>解决的问题：<br>1、书写方面，不必每次都new对象并赋值给局部变量。<br>2、分类管理。</p><h3 id="插件扩展原理"><a href="#插件扩展原理" class="headerlink" title="插件扩展原理"></a>插件扩展原理</h3><p>全局插件：本质上就是添加到了$对象上<br>实例插件：本质上就是添加到了$.prototype对象上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">  <span class="comment">//全局插件</span></div><div class="line">  $.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"></div><div class="line">  $.extend(&#123;</div><div class="line">    hi : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</div><div class="line">    nihao : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">//实例插件</span></div><div class="line">  $.fn.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">  $.fn.extend(&#123;</div><div class="line">    hi : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</div><div class="line">    nihao : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;  </div><div class="line">  &#125;)</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure><h3 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h3><p>jQuery中几乎所有的能使用链式操作的api中最后都会返回return this，这个this就是当前的实例化对象</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;隐式迭代&lt;/li&gt;
&lt;li&gt;jQuery实例化过程&lt;/li&gt;
&lt;li&gt;插件扩展原理&lt;/li&gt;
&lt;li&gt;链式操作&lt;/li&gt;
&lt;li&gt;特定API的实现思路&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="summary" scheme="http://haotengfei.com/tags/summary/"/>
    
      <category term="notes" scheme="http://haotengfei.com/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>Apache配置</title>
    <link href="http://haotengfei.com/2016/04/01/apache/"/>
    <id>http://haotengfei.com/2016/04/01/apache/</id>
    <published>2016-04-01T11:42:00.000Z</published>
    <updated>2017-09-18T03:15:28.126Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><ul><li>关于apache的配置总是忘，这次来简单总结一下</li></ul></blockquote><h3 id="配置网站跟路径-239行"><a href="#配置网站跟路径-239行" class="headerlink" title="配置网站跟路径(239行)"></a>配置网站跟路径(239行)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DocumentRoot "e:/heima6/"</div><div class="line"><span class="tag">&lt;<span class="name">Directory</span> "<span class="attr">e:</span>/<span class="attr">heima6</span>/"&gt;</span></div></pre></td></tr></table></figure><a id="more"></a><h3 id="配置虚拟主机"><a href="#配置虚拟主机" class="headerlink" title="配置虚拟主机"></a>配置虚拟主机</h3><h4 id="步骤一：httpd-conf文件498行"><a href="#步骤一：httpd-conf文件498行" class="headerlink" title="步骤一：httpd.conf文件498行"></a>步骤一：httpd.conf文件498行</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Virtual hosts</div><div class="line"><span class="keyword">Include</span> <span class="keyword">conf</span>/extra/httpd-vhosts.<span class="keyword">conf</span></div></pre></td></tr></table></figure><h4 id="步骤二：extra-httpd-vhost-conf文件"><a href="#步骤二：extra-httpd-vhost-conf文件" class="headerlink" title="步骤二：extra/httpd-vhost.conf文件"></a>步骤二：extra/httpd-vhost.conf文件</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:<span class="number">80</span>&gt;</div><div class="line">    DocumentRoot <span class="string">"e:/myweb/ajax"</span></div><div class="line">    ServerName studyit.com</div><div class="line">    ServerAlias www<span class="selector-class">.studyit</span><span class="selector-class">.com</span></div><div class="line">    DirectoryIndex abc.html</div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure><h4 id="步骤三：配置hosts文件（C-Windows-System32-drivers-etc-hosts"><a href="#步骤三：配置hosts文件（C-Windows-System32-drivers-etc-hosts" class="headerlink" title="步骤三：配置hosts文件（C:\Windows\System32\drivers\etc\hosts)"></a>步骤三：配置hosts文件（C:\Windows\System32\drivers\etc\hosts)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span>       <span class="selector-tag">studyit</span><span class="selector-class">.com</span></div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span>       <span class="selector-tag">www</span><span class="selector-class">.studyit</span><span class="selector-class">.com</span></div></pre></td></tr></table></figure><h4 id="步骤四：重启Apache服务器"><a href="#步骤四：重启Apache服务器" class="headerlink" title="步骤四：重启Apache服务器"></a>步骤四：重启Apache服务器</h4><h3 id="配置反向代理（解决跨域问题）"><a href="#配置反向代理（解决跨域问题）" class="headerlink" title="配置反向代理（解决跨域问题）"></a>配置反向代理（解决跨域问题）</h3><h4 id="步骤一：配置httpd-conf文件（134行和142行）"><a href="#步骤一：配置httpd-conf文件（134行和142行）" class="headerlink" title="步骤一：配置httpd.conf文件（134行和142行）"></a>步骤一：配置httpd.conf文件（134行和142行）</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute"><span class="nomarkup">LoadModule</span></span> proxy_module modules/mod_proxy.so</div><div class="line"><span class="attribute"><span class="nomarkup">LoadModule</span></span> proxy_http_module modules/mod_proxy_http.so</div></pre></td></tr></table></figure><h4 id="步骤二：配置conf-extra-httpd-vhosts-conf文件"><a href="#步骤二：配置conf-extra-httpd-vhosts-conf文件" class="headerlink" title="步骤二：配置conf/extra/httpd-vhosts.conf文件"></a>步骤二：配置conf/extra/httpd-vhosts.conf文件</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:<span class="number">80</span>&gt;</div><div class="line">    DocumentRoot <span class="string">"e:/heima6/jerry/studyit-bxg"</span></div><div class="line">    ServerName studyit.com</div><div class="line">    ServerAlias www<span class="selector-class">.studyit</span><span class="selector-class">.com</span></div><div class="line">    ProxyRequests Off</div><div class="line">    ProxyPass /api http:<span class="comment">//api.studyit.com</span></div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure><h3 id="地址栏隐藏index-php配置"><a href="#地址栏隐藏index-php配置" class="headerlink" title="地址栏隐藏index.php配置"></a>地址栏隐藏index.php配置</h3><h4 id="步骤一：拷贝-htaccess文件到项目根目录"><a href="#步骤一：拷贝-htaccess文件到项目根目录" class="headerlink" title="步骤一：拷贝.htaccess文件到项目根目录"></a>步骤一：拷贝.htaccess文件到项目根目录</h4><h4 id="步骤二：配置httpd-conf文件（149行）"><a href="#步骤二：配置httpd-conf文件（149行）" class="headerlink" title="步骤二：配置httpd.conf文件（149行）"></a>步骤二：配置httpd.conf文件（149行）</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute"><span class="nomarkup">LoadModule</span></span> rewrite_module modules/mod_rewrite.so</div></pre></td></tr></table></figure><h4 id="步骤三：配置httpd-conf文件-260行"><a href="#步骤三：配置httpd-conf文件-260行" class="headerlink" title="步骤三：配置httpd.conf文件(260行)"></a>步骤三：配置httpd.conf文件(260行)</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AllowOverride <span class="keyword">All</span></div></pre></td></tr></table></figure><blockquote><p>End..</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;关于apache的配置总是忘，这次来简单总结一下&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;配置网站跟路径-239行&quot;&gt;&lt;a href=&quot;#配置网站跟路径-239行&quot; class=&quot;headerlink&quot; title=&quot;配置网站跟路径(239行)&quot;&gt;&lt;/a&gt;配置网站跟路径(239行)&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;DocumentRoot &quot;e:/heima6/&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Directory&lt;/span&gt; &quot;&lt;span class=&quot;attr&quot;&gt;e:&lt;/span&gt;/&lt;span class=&quot;attr&quot;&gt;heima6&lt;/span&gt;/&quot;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="apache" scheme="http://haotengfei.com/tags/apache/"/>
    
  </entry>
  
  <entry>
    <title>AJAX&amp;JS高级</title>
    <link href="http://haotengfei.com/2016/03/08/interview6/"/>
    <id>http://haotengfei.com/2016/03/08/interview6/</id>
    <published>2016-03-08T11:30:00.000Z</published>
    <updated>2017-10-04T11:34:14.035Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p><b>开始怼AJAX&amp;JS高级..</b></p></blockquote><h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><h4 id="Ajax是什么？如何创建一个Ajax？"><a href="#Ajax是什么？如何创建一个Ajax？" class="headerlink" title="Ajax是什么？如何创建一个Ajax？"></a>Ajax是什么？如何创建一个Ajax？</h4><p>Ajax并不是一种新技术，全称是 asychronous javascript and xml 可以说是已有技术的组合，主要用来实现客户端和服务端的异步通信效果，实现页面的局部刷新，早期的浏览器并不能原生支持ajax，可以使用隐藏帧（iframe）方式变相实现异步效果<br>，后来浏览器提供了对ajax的原生支持</p><p>使用ajax原生方式发送请求主要通过XMLHttprequest（标准浏览器）、ActiveXObject(IE浏览器)对象实现异步通信效果</p><a id="more"></a><p>基本步骤：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr =<span class="literal">null</span>;<span class="comment">//创建对象 </span></div><div class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</div><div class="line">xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">&#125;</div><div class="line">     xhr.open(“方式”,”地址”,”标志位”);<span class="comment">//初始化请求 </span></div><div class="line">     xhr.setRequestHeader(“”,””);<span class="comment">//设置http头信息 </span></div><div class="line">     xhr.onreadystatechange =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;<span class="comment">//指定回调函数 </span></div><div class="line">     xhr.send();<span class="comment">//发送请求 </span></div><div class="line"><span class="comment">//js框架（jQuery/EXTJS等）提供的ajax  API对原生的ajax进行了封装，熟悉了基础理论，再学习别的框架就会得心应手，好多都是换汤不换药的内容</span></div></pre></td></tr></table></figure></p><h4 id="如何解决跨域？"><a href="#如何解决跨域？" class="headerlink" title="如何解决跨域？"></a>如何解决跨域？</h4><ul><li>理解跨域的概念：协议、域名、端口都相同才同域，否则跨域</li><li>出于安全考略，服务器不允许ajax跨域获取数据，但是可以跨域获取文件内容，所以基于这一点，可以动态创建script标签，使用标签的src属性访问js文件的形式获取js脚本，并且这个js脚本中的内容是函数调用，该函数的调用是服务器返回的数据，为了获取这里的参数数据，需要事先在页面中定义回调函数，在回调函数中处理服务器返回的数据，这就是解决跨域问题的主流方案</li></ul><h4 id="页面编码与被请求的资源编码不一致？"><a href="#页面编码与被请求的资源编码不一致？" class="headerlink" title="页面编码与被请求的资源编码不一致？"></a>页面编码与被请求的资源编码不一致？</h4><p>对于ajax请求传递的参数，如果是get请求方式，参数如果传递中文，在有些浏览器会乱码，不同的浏览器对参数编码的处理方式不同，所以对get请求的参数需要使用encodeURLComponent函数对参数进行编码处理，后台开发语言都有相应的解码api，对于post请求不需要进行编码</p><h4 id="简述ajax的过程？"><a href="#简述ajax的过程？" class="headerlink" title="简述ajax的过程？"></a>简述ajax的过程？</h4><p>1、创建XMLHttpRequest对象，也就是创建一个异步调用对象<br>2、创建一个新的HTTP请求，并指定该HTTP请求的方式，URL及验证信息<br>3、设置响应HTTP请求状态变化的函数<br>4、发送HTTP请求<br>5、获取异步调用返回的数据<br>6、使用javascript和DOM实现局部刷新</p><h4 id="阐述一下异步加载？"><a href="#阐述一下异步加载？" class="headerlink" title="阐述一下异步加载？"></a>阐述一下异步加载？</h4><p>1、异步加载的方案：动态插入script标签<br>2、通过ajax获取js代码，然后通过eval执行<br>3、script标签上添加defer或者async属性<br>4、创建并插入iframe，让它异步加载</p><h4 id="javascript的同源策略？"><a href="#javascript的同源策略？" class="headerlink" title="javascript的同源策略？"></a>javascript的同源策略？</h4><p>同源策略是客户端脚本(尤其是javascript)的重要的安全度量标准，它最早出自Netscape Navigator2.0，其目的是防止某个文档或脚本从多个不同源去装载，所谓的同源指的是：协议、域名、端口相同，同源策略是一种安全协议，指一段脚本只能读取来自同一来源的窗口和文档属性</p><h4 id="get和post的区别？"><a href="#get和post的区别？" class="headerlink" title="get和post的区别？"></a>get和post的区别？</h4><p>GET:一般用于信息获取，使用URL传递参数，对所发送信息的数量也有限制，一般在2000个字符，有的浏览器是8000个字符</p><p>POST：一般用于修改服务器上的资源，对所发送的信息没有限制<br>在一下情况中使用POST请求<br>1、无法使用缓存文件(更新服务器上的文件或数据库)<br>2、向服务器发送大量数据（POST没有数据量限制）<br>3、发送包含未知字符的用户输入时，POST比GET更稳定也更可靠</p><h4 id="ajax的特点？"><a href="#ajax的特点？" class="headerlink" title="ajax的特点？"></a>ajax的特点？</h4><p>1、通过异步模式，提升了用户的体验<br>2、优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少了带宽的占用<br>3、ajax在客户端运行，承担了一部分本来由服务器承担的工作，减少了大量用户下的服务器负载<br>4、ajax可以实现异步通信效果，实现页面局部刷新，带来更好的用户体验；按需求获取数据，节约带宽资源</p><h4 id="ajax的缺点？"><a href="#ajax的缺点？" class="headerlink" title="ajax的缺点？"></a>ajax的缺点？</h4><p>1、ajax不支持浏览器的back按钮<br>2、安全问题ajax暴露了与服务器交互细节<br>3、对搜索引擎的支持比较弱<br>4、破坏了程序的异常机制</p><h4 id="get和post的区别？-1"><a href="#get和post的区别？-1" class="headerlink" title="get和post的区别？"></a>get和post的区别？</h4><p>get一般用来进行查询操作，url地址有长度限制，请求的参数都暴露在url地址中，如果传递中文参数，需要自己进行编码操作，安全性极低</p><p>post请求主要用来提交数据，没有数据长度的限制，提交的数据内容存在于http请求体中数据不会暴露在url地址中</p><h4 id="解释jsonp？"><a href="#解释jsonp？" class="headerlink" title="解释jsonp？"></a>解释jsonp？</h4><p>jsonp并不是一种数据格式，而json是一种数据格式，jsonp是用来解决跨域获取数据的一种解决方案，具体是通过动态创建script标签，然后通过标签的src属性获取js文件中的js脚本，该脚本的内容是一个函数的调用，参数就是服务器返回的数据，为了处理这些返回的数据，需要事先在页面定义好回调函数，本质使用的并不是ajax技术</p><h4 id="ajax和json？"><a href="#ajax和json？" class="headerlink" title="ajax和json？"></a>ajax和json？</h4><ul><li>Ajax全称是asynchronous Javascript and Xml 即 异步 javascript 和 xml，用于在web页面中实现异步数据交互，实现页面的局部刷新</li><li>优点：可以使得页面不重载全部内容的情况下加载局部内容，降低数据的传输量，避免用户的不断刷新和跳转页面，提高用户的体验</li><li>缺点：对搜索引擎不友好，要实现ajax下的前后退功能成本较大，可能造成请求数的增加跨域问题的限制</li><li>JSON是一种轻量级的数据交换格式，ECMA的一个子集</li><li>优点:轻量级，易与人的阅读和编写，便于机器（javascript）解析，支持复合数据类型（数据、对象、字符串、数字）</li></ul><h4 id="http常见的状态码？"><a href="#http常见的状态码？" class="headerlink" title="http常见的状态码？"></a>http常见的状态码？</h4><ul><li>200 - 请求成功</li><li>301 - 资源（网页）被永久转移到其他url</li><li>404 - 请求的网页等资源不存在</li><li>500 - 内部服务器错误</li></ul><h4 id="从输入url到页面加载完成的过程？"><a href="#从输入url到页面加载完成的过程？" class="headerlink" title="从输入url到页面加载完成的过程？"></a>从输入url到页面加载完成的过程？</h4><p>分为4个步骤<br>1、当发送一个url请求时，不管这个url是web页面的url还是web页面上每个资源的url，浏览器都会开启一个线程来处理这个请求，同时在远程DNS服务器上启动一个DNS查询，这能使浏览器获得请求对应的IP地址<br>2、浏览器与远程web服务器通过TCP三次握手协商来建立一个TCP/IP连接，该握手包括一个同步报文，一个同步-应答报文和一个应答报文，这三个报文在浏览器和服务器之间传递。该握手首先由客户端尝试建立起通信，而后服务器应答接受客户端的请求，最后由客户端发出该请求已经被接受的报文<br>3、一旦TCP/IP连接建立，浏览器会通过该链接向远程服务器发送HTTP的get请求，远程服务器找到资源并使用HTTP响应返回该资源，值为200的HTTP响应状态为一个正确的状态响应<br>4、此时web服务器提供资源服务，客户端开始下载资源</p><h4 id="多个域名来存储资源？"><a href="#多个域名来存储资源？" class="headerlink" title="多个域名来存储资源？"></a>多个域名来存储资源？</h4><p>确保用户在不同的地区能用最快的速度打开网站，其中某个域名崩溃，用户也可以通过其他域名访问网站，并且不同的资源放在不同的服务器上有利于减轻单台服务器的压力</p><h4 id="减少页面加载的时间？"><a href="#减少页面加载的时间？" class="headerlink" title="减少页面加载的时间？"></a>减少页面加载的时间？</h4><p>1、压缩css和js文件<br>2、合并js和css文件，减少http请求<br>3、外部js、css文件放在最底下<br>4、减少DOM操作，尽可能用变量代替不必要的DOM操作</p><h3 id="JS高级"><a href="#JS高级" class="headerlink" title="JS高级"></a>JS高级</h3><h4 id="Jquery一个对象如何绑定多个事件？"><a href="#Jquery一个对象如何绑定多个事件？" class="headerlink" title="Jquery一个对象如何绑定多个事件？"></a>Jquery一个对象如何绑定多个事件？</h4><p>jquery可以给一个对象同时绑定多个事件，底层实现方法是使用addEventListener或attachEvent兼容不同的浏览器实现事件的绑定，这样可以给同一个对象注册多个事件</p><h4 id="webkit？debug？"><a href="#webkit？debug？" class="headerlink" title="webkit？debug？"></a>webkit？debug？</h4><p>webkit是浏览器引擎，包括html渲染和js的解析功能，手机浏览器的主流内核，与之相对应的引擎有Gecko（Mozilla Firefox 等使用）和Trident（也称MSHTML，IE 使用）</p><p>对于浏览器的调试工具要熟练使用，主要是页面结构分析，后台的请求信息查看，js调试工具使用，熟练使用这些工具可以快速提高解决问题的效率</p><h4 id="前端templating是干嘛的？"><a href="#前端templating是干嘛的？" class="headerlink" title="前端templating是干嘛的？"></a>前端templating是干嘛的？</h4><p>Web模版引擎是为了使用户界面与业务数据（内容）分离而产生的<br>Mustache是一个logic-less（轻逻辑）模版解析引擎，它的优势在于可以应用在Javascript、php、python、perl等多种编程语言中<br>Underscore封装了常用的Javascript对象操作方法，用于提高开发效率<br>Handlebars是javascript一个语义模版库，通过对view和data的分离来快速构建Web模版</p><h4 id="自定义console-log-的方法？"><a href="#自定义console-log-的方法？" class="headerlink" title="自定义console.log()的方法？"></a>自定义console.log()的方法？</h4><p>方法一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(msg);</div><div class="line">&#125;;</div><div class="line">log(<span class="string">"hello world!"</span>);         <span class="comment">// hello world</span></div></pre></td></tr></table></figure><p>如果要传入多个参数呢？显然上面的方法不能满足要求，所以更好的方法是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log().apply(<span class="built_in">console</span>,<span class="built_in">arguments</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>那么apply和call方法的异同？</p><p>对于apply和call两者在作用上是相同的，即是调用一个对象的一个方法，以另一个对象替换当前的对象。将一个函数的对象的上下文从初始的上下文改变为由 thisObj 指定的新对象<br>但是两者在参数上是有区别的，对于第一个参数意义都是一样的，但是对于第二个参数：apply传入的是一个参数的数组，也就是将多个参数组合成一个数组传入，而call则做为call的参数传入（从第二个参数开始）。如 func.call(func1,var1,var2,var3)对应的apply写法为：func.apply(func1,[var1,var2,var3])</p><h4 id="javascript中的伪数组？"><a href="#javascript中的伪数组？" class="headerlink" title="javascript中的伪数组？"></a>javascript中的伪数组？</h4><p>伪数组（类数组）：无法直接调用数组的方法或期望length属性有什么特殊的行为，但是仍然可以对真正数组遍历的方法来遍历他们，典型的是函数的argument参数，还有像调用getElementsByTagName,document.childNodes之类的，他们都返回NodeList对象都属于伪数组，可以使用Array.prototype.slice.call(fakeArray)将数组转化为真正的Array对象</p><h4 id="实现对页面某个节点的拖拽？"><a href="#实现对页面某个节点的拖拽？" class="headerlink" title="实现对页面某个节点的拖拽？"></a>实现对页面某个节点的拖拽？</h4><p>1、给需要拖拽的节点绑定mousedown、mousemove、mouseup事件<br>2、mousedown事件触发后，开始拖拽<br>3、mousemove时，需要通过event.clientX和clientY获取拖拽位置，并且实时更新位置<br>4、mouseup的时候，拖拽结束<br>5、需要注意浏览器边界的情况</p><h4 id="IE和火狐的事件机制有什么区别？"><a href="#IE和火狐的事件机制有什么区别？" class="headerlink" title="IE和火狐的事件机制有什么区别？"></a>IE和火狐的事件机制有什么区别？</h4><p>1、在IE中，事件对象是做为一个全局变量来保存和维护的。所有的浏览器事件，不管是用户触发的，还是其他事件，都会更新在window.event对象，所以在代码中，只要调用window.evnet就可以获取事件对象，再event.srcElement就可以取得触发事件的元素进行进一步处理<br>2、在FireFox中，事件对象却不是全局对象，一般情况下是现场发生，现场使用，Firefox把事件自动传递给事件处理程序</p><p>关于事件的兼容性处理要熟练掌握，事件对象具体哪些存在兼容问题，IE与标准事件模型事件冒泡与事件捕获的支持理解</p><h4 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h4><p>简单的理解就是函数的嵌套形成闭包，闭包包括函数本身以及它的外部作用域<br>使用闭包可以形成独立的空间，延长变量的生命周期，保存中间状态</p><h4 id="如何判断一个对象是否属于一个类？"><a href="#如何判断一个对象是否属于一个类？" class="headerlink" title="如何判断一个对象是否属于一个类？"></a>如何判断一个对象是否属于一个类？</h4><p>Instanceof  constructor</p><h4 id="new操作符具体干了些什么？"><a href="#new操作符具体干了些什么？" class="headerlink" title="new操作符具体干了些什么？"></a>new操作符具体干了些什么？</h4><p>1、创建一个空对象，并且this变量引用该对象，同时还继承了该对象的原型<br>2、属性和方法被加入到this引用的对象中<br>3、新创建的对象由this所引用，并且最后隐式的返回this</p><h4 id="js延迟加载的方式有哪些？"><a href="#js延迟加载的方式有哪些？" class="headerlink" title="js延迟加载的方式有哪些？"></a>js延迟加载的方式有哪些？</h4><p>1、<code>&lt;script&gt;</code>标签的async=”async”属性（详细参见：script标签的async属性）<br>2、<code>&lt;script&gt;</code>标签的defer=”defer”属性<br>3、动态创建<code>&lt;script&gt;</code>标签<br>4、ajax eval（使用ajax得到脚本内容，然后通过eval_r(xmlhttp.responseText)来运行脚本）<br>5、iframe方式</p><h4 id="模块化开发怎么做？"><a href="#模块化开发怎么做？" class="headerlink" title="模块化开发怎么做？"></a>模块化开发怎么做？</h4><p>理解模块化开发模式：浏览器端requirejs seajs，服务端nodejs；ES6模块化；fis、webpack等前端整体模块化解决方案； grunt、gulp等前端工作流的使用</p><h4 id="requirejs的核心原理是什么？"><a href="#requirejs的核心原理是什么？" class="headerlink" title="requirejs的核心原理是什么？"></a>requirejs的核心原理是什么？</h4><p>核心是js的加载模块，通过正则匹配模块以及模块之间的依赖关系，保证文件加载的先后数序<br>根据文件的路径对加载过的文件做了缓存</p><h4 id="document-write和innerHTML的区别？"><a href="#document-write和innerHTML的区别？" class="headerlink" title="document.write和innerHTML的区别？"></a>document.write和innerHTML的区别？</h4><p>document.write是重写整个document，写入的内容是字符串的html<br>innerHTML是HTMLElement的属性，是一个元素的内部html内容</p><h3 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h3><ul><li>创建新节点<ul><li>createDocumentFragment()         // 创建一个DOM片段</li><li>createElement_x()                // 创建一个具体的元素</li><li>createTextNode()                 // 创建一个文本节点</li></ul></li><li>添加、移除、替换、插入<ul><li>appendChild() </li><li>removeChild()</li><li>replaceChild()</li><li>insertBefore()</li></ul></li><li>查找<ul><li>getElementsByTagName()</li><li>getElementsByName()</li><li>getElementById()</li></ul></li></ul><h4 id="数组和对象的原生方法？"><a href="#数组和对象的原生方法？" class="headerlink" title="数组和对象的原生方法？"></a>数组和对象的原生方法？</h4><p>Array.concat()                        连接数组<br>Array.join()                          将数组元素连接起来构建一个字符串<br>Array.length                          数组的大小<br>Array.pop()                           删除并返回数组的最后一个元素<br>Array.push()                          给数组添加元素<br>Array.reverse()                       颠倒数组中的元素的顺序<br>Array.shift()                         将元素移除数组<br>Array.slice()                         返回数组的一部分<br>Array.sort()                          对数组元素进行排序<br>Array.splice()                        插入删除或替换数组中的元素<br>Array.toLocaleString()                把数组转化为局部字符串<br>Array.toString()                      把数组转化为字符串<br>Array.unshift()                       把数组头部插入一个元素<br>Object.hasOwnProperty()               检查属性是否被继承<br>Object.isPropertyOf()                 一个对象是否是另一个对象的原型<br>Object.PropertyIsEnumerable()         是否可以通过for/in循环看到属性<br>Object.toLocaleString()               返回对象的本地字符串<br>Object.toString()                     定义一个对象的字符串<br>Object.valueOf()                      指定对象的原始值</p><h4 id="js怎么实现一个类？"><a href="#js怎么实现一个类？" class="headerlink" title="js怎么实现一个类？"></a>js怎么实现一个类？</h4><p>严格来说js中并没有类的概念，不过js中的函数可以做为构造函数来使用，通过new来实例化，其实函数本身也是一个对象</p><h4 id="js中的作用域与变量提升？"><a href="#js中的作用域与变量提升？" class="headerlink" title="js中的作用域与变量提升？"></a>js中的作用域与变量提升？</h4><p>理解js的预解析机制，js的运行主要分为两个阶段：js的预解析和运行，预解析阶段所有的变量声明和函数定义都会提前，但是变量的赋值不会提前</p><h4 id="如何写高性能的javascript？"><a href="#如何写高性能的javascript？" class="headerlink" title="如何写高性能的javascript？"></a>如何写高性能的javascript？</h4><p>使用DocumentFragment优化多次append<br>通过模版元素clone替代createElement<br>使用一次innerHTML赋值代替构建dom元素<br>使用Array做为StringBuffer，代替字符串拼接的操作<br>将循环控制量保存到局部变量<br>顺序无关的变量时，用while代替for<br>将条件分支，按可能性顺序从高到低排列<br>在同一条件子的多（ &gt;2 ）条件分支时，使用 switch 优于 if<br>使用三目运算符代替条件分支<br>需要不断执行的时候，优先考虑使用setInterval</p><h4 id="哪些操作会造成内存泄漏？"><a href="#哪些操作会造成内存泄漏？" class="headerlink" title="哪些操作会造成内存泄漏？"></a>哪些操作会造成内存泄漏？</h4><p>闭包和循环</p><h4 id="javascript对象的创建方式？"><a href="#javascript对象的创建方式？" class="headerlink" title="javascript对象的创建方式？"></a>javascript对象的创建方式？</h4><p>工厂函数<br>构造函数模式<br>原型模式<br>混合构造函数和原型模式<br>动态原型模式<br>寄生构造函数<br>稳妥构造函数模式</p><h4 id="javascript的继承？"><a href="#javascript的继承？" class="headerlink" title="javascript的继承？"></a>javascript的继承？</h4><p>原型链的继承<br>借用构造函数的继承<br>组合继承(原型+借用构造函数)<br>原型式继承<br>寄生式继承<br>寄生组合式继承</p><h4 id="eval是什么？"><a href="#eval是什么？" class="headerlink" title="eval是什么？"></a>eval是什么？</h4><p>他的功能是把对应的字符串解析成Js代码并运行<br>应该避免使用eval，不安全，非常耗费性能（2次，一次解析成js语句，一次执行）</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;p&gt;&lt;b&gt;开始怼AJAX&amp;amp;JS高级..&lt;/b&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;AJAX&quot;&gt;&lt;a href=&quot;#AJAX&quot; class=&quot;headerlink&quot; title=&quot;AJAX&quot;&gt;&lt;/a&gt;AJAX&lt;/h3&gt;&lt;h4 id=&quot;Ajax是什么？如何创建一个Ajax？&quot;&gt;&lt;a href=&quot;#Ajax是什么？如何创建一个Ajax？&quot; class=&quot;headerlink&quot; title=&quot;Ajax是什么？如何创建一个Ajax？&quot;&gt;&lt;/a&gt;Ajax是什么？如何创建一个Ajax？&lt;/h4&gt;&lt;p&gt;Ajax并不是一种新技术，全称是 asychronous javascript and xml 可以说是已有技术的组合，主要用来实现客户端和服务端的异步通信效果，实现页面的局部刷新，早期的浏览器并不能原生支持ajax，可以使用隐藏帧（iframe）方式变相实现异步效果&lt;br&gt;，后来浏览器提供了对ajax的原生支持&lt;/p&gt;
&lt;p&gt;使用ajax原生方式发送请求主要通过XMLHttprequest（标准浏览器）、ActiveXObject(IE浏览器)对象实现异步通信效果&lt;/p&gt;
    
    </summary>
    
    
      <category term="interview" scheme="http://haotengfei.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>HTML5&amp;CSS3</title>
    <link href="http://haotengfei.com/2016/03/07/interview5/"/>
    <id>http://haotengfei.com/2016/03/07/interview5/</id>
    <published>2016-03-07T11:55:00.000Z</published>
    <updated>2017-09-26T13:38:55.023Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p><b>开始怼HTML5&amp;CSS3…</b></p></blockquote><h4 id="CSS3有哪些新特性？"><a href="#CSS3有哪些新特性？" class="headerlink" title="CSS3有哪些新特性？"></a>CSS3有哪些新特性？</h4><p>1、CSS3实现圆角（border-radius），阴影（box-shadow）<br>2、对文字加特效（text-shadow），线性渐变（gradient），旋转（transform）<br>3、transform：rotate(9deg);scale(0.85,0.9);translate(0px,-30px);skew(-9deg,0deg);//旋转，缩放，定位，倾斜<br>4、增加了更多的CSS选择器，多背景，rgba<br>5、在CSS3中唯一引入的伪元素是::selection（设置鼠标选取一段文字后的文字颜色和背景色）<br>6、媒体查询，多栏布局<br>7、border-image</p><a id="more"></a><h4 id="html5有哪些新特性？"><a href="#html5有哪些新特性？" class="headerlink" title="html5有哪些新特性？"></a>html5有哪些新特性？</h4><p>新特性：<br>1、拖拽释放（Drag and drop）API<br>2、语义化更好的内容标签（header，nav,footer,aside,article,section）<br>3、音频、视频API（audio、video）<br>4、画布（canvas）API<br>5、地理（Geolocation）API<br>6、本地离线存储localStorage长期存储数据，浏览器关闭后数据不丢失<br>7、sessionStorage的数据在浏览器关闭后自动删除<br>8、表单控件，calendar、date、time、email、url、search<br>9、新的技术webworker、websocket、Geolocation<br>移除的元素：<br>1、纯表现的元素：basefont，big，center，font，s，strike，tt，u<br>2、对可用性产生负面影响的元素：frame，frameset，noframes；<br>支持HTML5新标签：<br>1、IE8/IE7/IE6支持通过 document.createElement 方法产生的标签，可以利用这一特性让这些浏览器支持 HTML5 新标签，浏览器支持新标签后，还需要添加标签默认的样式（当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架）：<br><code>&lt;!--[if lt IE 9]&gt;</code><br><code>&lt;script&gt; src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&lt;/script&gt;</code><br><code>&lt;![endif]--&gt;</code><br>如何区分：<br>DOCTYPE声明新增的结构元素、功能元素</p><h4 id="localStorage和cookies？"><a href="#localStorage和cookies？" class="headerlink" title="localStorage和cookies？"></a>localStorage和cookies？</h4><ul><li>Cookies:服务器和客户端都可以去访问；大小只有4KB左右；有有效期，过期后将会删除；</li><li>本地存储：只有本地浏览器端可以访问数据，服务器不能访问本地存储知道故意通过POST或GET的通道发送到服务器；每个域5MB；没有过期数据它将保留直到用户从浏览器清除或者使用javascript代码移除</li></ul><h4 id="浏览器内多个标签页之间的通信？"><a href="#浏览器内多个标签页之间的通信？" class="headerlink" title="浏览器内多个标签页之间的通信？"></a>浏览器内多个标签页之间的通信？</h4><ul><li>调用localStorage、cookies等本地存储方式</li></ul><h4 id="网站文件和资源的优化？"><a href="#网站文件和资源的优化？" class="headerlink" title="网站文件和资源的优化？"></a>网站文件和资源的优化？</h4><ul><li>文件合并</li><li>文件最小化、文件压缩</li><li>使用CDN托管</li><li>缓存的使用</li></ul><h4 id="什么是响应式设计？"><a href="#什么是响应式设计？" class="headerlink" title="什么是响应式设计？"></a>什么是响应式设计？</h4><ul><li>他是关于网页的制作中让不同的设备有不同的尺寸和不同的功能。响应式设计是让所有的人能在这些设备上让网站运行正常</li></ul><h4 id="新的HTML5文档类型和字符集？"><a href="#新的HTML5文档类型和字符集？" class="headerlink" title="新的HTML5文档类型和字符集？"></a>新的HTML5文档类型和字符集？</h4><ul><li>HTML5文档类型：<code>&lt;!DOCTYPE HTML&gt;</code></li><li>HTML5使用的编码是：<code>&lt;meta charset = &quot;UTF-8&quot;&gt;</code></li></ul><h4 id="H5Canvas元素有什么用？"><a href="#H5Canvas元素有什么用？" class="headerlink" title="H5Canvas元素有什么用？"></a>H5Canvas元素有什么用？</h4><ul><li>canvas元素用于网页上绘制图形，该元素的强大之处在于可以直接在HTML上进行图形操作</li></ul><h4 id="HTML5存储类型有什么区别？"><a href="#HTML5存储类型有什么区别？" class="headerlink" title="HTML5存储类型有什么区别？"></a>HTML5存储类型有什么区别？</h4><p>在客户端存储数据<br>HTML5提供了两种在客户端存储数据的新方法:</p><ul><li>localStorage - 没有时间限制的数据存储</li><li>sessionStorage - 针对一个session的数据存储<br>之前这些都是由cookie完成的，但是cookie不适合大量数据的存储，因为他们由每个对服务器的请求来传递，这使得cookie的速度很慢，而且效率不高</li></ul><p>在HTML5中，数据不是由每个服务器请求的，而是只有在请求时使用数据，他使在不影响网站性能的情况下存储大量数据称为可能</p><p>对于不同的网站，数据存储于不同的区域，并且一个网站只能访问其自身的数据</p><p>HTML5使用的是Javascript来存储和访问数据的</p><p>localStorage方法：</p><ul><li>localStorage方法存储数据没有时间限制。<br>sessionStorage方法：</li><li>sessionStorage方法针对一个session进行数据存储。当用户关闭浏览器后，数据会被删除</li></ul><h4 id="CSS3新增伪类有哪些？"><a href="#CSS3新增伪类有哪些？" class="headerlink" title="CSS3新增伪类有哪些？"></a>CSS3新增伪类有哪些？</h4><ul><li><code>p:first-of-type</code> 选择属于其父元素的首个p元素的每个p元素</li><li><code>p:last-of-type</code>  选择属于其父元素的最后p元素的每个p元素</li><li><code>p:only-of-type</code>  选择属于其父元素的唯一的p元素的每个p元素</li><li><code>p:only-child</code>  选择属于其父元素的唯一子元素的每个p元素</li><li><code>p:nth-child(2)</code>选择属于其父元素的第二个子元素的每个p元素</li><li><code>:enabled、:disabled</code> 控制表单控件的禁用状态</li><li><code>:checked</code>  单选框或复选框被选中</li></ul><h4 id="H5C3新特性？"><a href="#H5C3新特性？" class="headerlink" title="H5C3新特性？"></a>H5C3新特性？</h4><p>HTML5现在已经不是SGML的子集，主要是关于图像，位置,存储,地理定位等功能的增加。</p><ul><li>绘画canvas元素</li><li>用于媒介回放的video和audio元素</li><li>本地离线存储localStorage长期存储数据，浏览器关闭后数据不丢失</li><li>sessionStorage的数据在浏览器关闭后自动删除</li><li>语义化更好的内容元素，比如：article、footer、header、nav、section</li><li>表单控件：calendar、date、time、email、url、search</li><li>CSS3实现圆角，阴影，对文字加特效，增加了更多的CSS选择器，多背景rgba</li><li>新的技术webworker、websocket、Geolocation<br>移除的元素：</li><li>纯表现的元素：basefont，big，center，font, s，strike，tt，u；</li><li>对可用性产生负面影响的元素：frame，frameset，noframes；</li><li>IE678支持通过document.createElement的方法产生的标签，可以利用这一特性让这些浏览器支持HTML5新标签；浏览器支持新标签后，还要添加标签默认的样式</li><li>最好的方法是使用成熟的框架、使用最多的是html5shim框架<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></div><div class="line"><span class="comment">&lt;script&gt; src="http://html5shim.googlecode.com/svn/trunk/html5.js"&lt;/script&gt;</span></div><div class="line"><span class="comment">&lt;![endif]--&gt;</span></div></pre></td></tr></table></figure></li></ul><h4 id="利用多个域名来存储网站资源？"><a href="#利用多个域名来存储网站资源？" class="headerlink" title="利用多个域名来存储网站资源？"></a>利用多个域名来存储网站资源？</h4><ul><li>CDN缓存更方便</li><li>突破浏览器并发限制</li><li>节约cookie带宽</li><li>节约主域名的连接次数，优化页面响应速度</li><li>防止不必要的安全问题</li></ul><h4 id="cookies、sessionStorage、localStorage？"><a href="#cookies、sessionStorage、localStorage？" class="headerlink" title="cookies、sessionStorage、localStorage？"></a>cookies、sessionStorage、localStorage？</h4><ul><li>sessionStorage用于本地存储的一个会话(session)中的数据，这些数据只有在同一个会话中的页面才能访问，并且当会话结束后，数据也随之销毁，而localStorage用于持久化的本地存储，除非主动删除数据，否则数据永远不会过期</li><li>web storage的概念与cookie相似，区别是它是为了更大容量的存储设计的，Cookie的大小是受限制的，并且每次你请求一个新的页面的时候cookie都会被发送出去，这样无形中浪费了带宽，另外cookie还需要指定的作用域，不可以跨域调用</li><li>初此之外，web storage拥有setItem  getItem  removeItem  clear  等方法。不像cookie需要前端开发者自己去封装setCookie  getCookie  但是cookie也是不可或缺的：cookie的作用与服务器进行交互，做为HTTP规范的一部分而存在，而web storage 仅仅是为了在本地存储数据而生</li></ul><h4 id="css中的content属性？"><a href="#css中的content属性？" class="headerlink" title="css中的content属性？"></a>css中的content属性？</h4><ul><li>css中的content属性专门应用在before、after伪元素上，用来插入生成内容最常见的应用是利用伪类清除浮动</li><li><p>一组常见的利用伪类清除浮动的代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">  content:".";            //这里利用了content属性</div><div class="line">  <span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</div><div class="line">  <span class="selector-tag">height</span><span class="selector-pseudo">:0</span>;</div><div class="line">  <span class="selector-tag">visibility</span><span class="selector-pseudo">:hidden</span>;</div><div class="line">  <span class="selector-tag">clear</span><span class="selector-pseudo">:both</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.clearfix</span>&#123;</div><div class="line">  *zoom:1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>after伪元素通过content在元素的后面生成了内容为一个点的块级素，再利用clear：both清除浮动</p></li></ul><h4 id="HTML5页面中嵌入音频？"><a href="#HTML5页面中嵌入音频？" class="headerlink" title="HTML5页面中嵌入音频？"></a>HTML5页面中嵌入音频？</h4><p>HTML5包含嵌入音频文件的标准方式，支持的格式包括MP3、Wav和Ogg<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"jamshed.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mpeg"</span>&gt;</span> </div><div class="line">   Your browser does'nt support audio embedding feature. </div><div class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></div></pre></td></tr></table></figure></p><h4 id="如何在-HTML5-页面中嵌入视频？"><a href="#如何在-HTML5-页面中嵌入视频？" class="headerlink" title="如何在 HTML5 页面中嵌入视频？"></a>如何在 HTML5 页面中嵌入视频？</h4><p>和音频一样，HTML5 定义了嵌入视频的标准方法，支持的格式包括：MP4、WebM 和 Ogg：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">"450"</span> <span class="attr">height</span>=<span class="string">"340"</span> <span class="attr">controls</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"jamshed.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span> </div><div class="line">   Your browser does'nt support video embedding feature. </div><div class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure></p><h4 id="HTML5-引入什么新的表单属性？"><a href="#HTML5-引入什么新的表单属性？" class="headerlink" title="HTML5 引入什么新的表单属性？"></a>HTML5 引入什么新的表单属性？</h4><p>Datalist  datetime  output  keygen  date  month week  time  number  range emailurl</p><blockquote><p>End..</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h4 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h4&gt;&lt;p&gt;&lt;b&gt;开始怼HTML5&amp;amp;CSS3…&lt;/b&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;CSS3有哪些新特性？&quot;&gt;&lt;a href=&quot;#CSS3有哪些新特性？&quot; class=&quot;headerlink&quot; title=&quot;CSS3有哪些新特性？&quot;&gt;&lt;/a&gt;CSS3有哪些新特性？&lt;/h4&gt;&lt;p&gt;1、CSS3实现圆角（border-radius），阴影（box-shadow）&lt;br&gt;2、对文字加特效（text-shadow），线性渐变（gradient），旋转（transform）&lt;br&gt;3、transform：rotate(9deg);scale(0.85,0.9);translate(0px,-30px);skew(-9deg,0deg);//旋转，缩放，定位，倾斜&lt;br&gt;4、增加了更多的CSS选择器，多背景，rgba&lt;br&gt;5、在CSS3中唯一引入的伪元素是::selection（设置鼠标选取一段文字后的文字颜色和背景色）&lt;br&gt;6、媒体查询，多栏布局&lt;br&gt;7、border-image&lt;/p&gt;
    
    </summary>
    
    
      <category term="interview" scheme="http://haotengfei.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>面试题-JS基础(下)</title>
    <link href="http://haotengfei.com/2016/03/06/interview4/"/>
    <id>http://haotengfei.com/2016/03/06/interview4/</id>
    <published>2016-03-06T11:45:00.000Z</published>
    <updated>2017-09-24T11:24:27.845Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p><b>接着上篇继续来…</b></p></blockquote><h4 id="列举BOM常用的对象及window对象常用的方法？"><a href="#列举BOM常用的对象及window对象常用的方法？" class="headerlink" title="列举BOM常用的对象及window对象常用的方法？"></a>列举BOM常用的对象及window对象常用的方法？</h4><ul><li>BOM常用的对象：window、document、location、screen、history、navigator</li><li>window对象常用的方法：alert()、confirm()、prompt()、open()、close()</li></ul><a id="more"></a><h4 id="创建函数的几种方式？"><a href="#创建函数的几种方式？" class="headerlink" title="创建函数的几种方式？"></a>创建函数的几种方式？</h4><p>1、函数声明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum1</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> num1+num2;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>2、函数表达式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum2 = <span class="function"><span class="keyword">function</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> num1+num2;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>3、函数对象方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum3 = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"num1"</span>,<span class="string">"num2"</span>,<span class="string">"return num1+num2"</span>);</div></pre></td></tr></table></figure><h4 id="javascript如何实现继承？"><a href="#javascript如何实现继承？" class="headerlink" title="javascript如何实现继承？"></a>javascript如何实现继承？</h4><p>1、构造继承法<br>2、原型继承法<br>3、实例继承法</p><h4 id="javascript创造对象的几种方式？"><a href="#javascript创造对象的几种方式？" class="headerlink" title="javascript创造对象的几种方式？"></a>javascript创造对象的几种方式？</h4><p>1、使用json创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">obj.name = <span class="string">'张三'</span>;</div><div class="line">obj.action = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">'吃饭'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>2、使用Object创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">obj.name = <span class="string">'张三'</span>;</div><div class="line">obj.action = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">'吃饭'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>3、通过函数创造对象</p><p>(1)、使用this关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">'张三'</span>;</div><div class="line">  <span class="keyword">this</span>.age = <span class="number">19</span>;</div><div class="line">  <span class="keyword">this</span>.action = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'吃饭'</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>(2)、使用prototype关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">obj</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">obj.prototype.name = <span class="string">'张三'</span>;</div><div class="line">obj.prototype.action = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">'吃饭'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>4、通过Window创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.name = <span class="string">'张三'</span>;</div><div class="line"><span class="built_in">window</span>.age = <span class="number">19</span>;</div><div class="line"><span class="built_in">window</span>.action = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">'吃饭'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>5、使用内置对象创造对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'实例初始化String'</span>);</div><div class="line"><span class="keyword">var</span> str1 = <span class="string">'直接赋值的String'</span>;</div><div class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'x'</span>,<span class="string">'alert(x)'</span>);   <span class="comment">//示例初始化func</span></div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();    <span class="comment">//示例初始化一个Object</span></div></pre></td></tr></table></figure><h4 id="iframe的优缺点"><a href="#iframe的优缺点" class="headerlink" title="iframe的优缺点"></a>iframe的优缺点</h4><p>优点：</p><p>1、解决加载缓慢的第三方内容如图标和广告等的加载问题<br>2、Security sandbox<br>3、并行加载脚本</p><p>缺点：</p><p>1、iframe会阻塞主页的Onload事件<br>2、即使内容为空，加载也需要时间<br>3、没有语义</p><h4 id="谈谈cookie的弊端？"><a href="#谈谈cookie的弊端？" class="headerlink" title="谈谈cookie的弊端？"></a>谈谈cookie的弊端？</h4><p>缺点：</p><p>1、Cookie数量和长度额限制。每个domain最多只有20条cookie，每个cookie的长度不能超过4kb，否则会被截掉<br>2、安全性问题，如果cookie被人拦截了，那人就可以取得所有的session信息，即使加密也与事无补，即使加密也于事无补，因为拦截者并不需要知道cookie的意义，他只要原样转发cookie就可达到目的了<br>3、有些状态不可能保存在客户端，例如，为了防止重复提交表单，我们需要在服务端保存一个计数器。如果我们把这个计数器保存在客户端，那么它起不到任何作用</p><h4 id="js延迟加载的方式有哪些？"><a href="#js延迟加载的方式有哪些？" class="headerlink" title="js延迟加载的方式有哪些？"></a>js延迟加载的方式有哪些？</h4><p>1、defer和async<br>2、动态创建DOM方式(创建script，插入DOM中，加载完毕后callback)<br>3、按需异步加载入js</p><h4 id="document-write和innerHTML的区别？"><a href="#document-write和innerHTML的区别？" class="headerlink" title="document.write和innerHTML的区别？"></a>document.write和innerHTML的区别？</h4><ul><li>document.write只能重绘整个页面</li><li>innerHTML可以重绘页面的一部分</li></ul><h4 id="哪些操作会造成内存泄漏？"><a href="#哪些操作会造成内存泄漏？" class="headerlink" title="哪些操作会造成内存泄漏？"></a>哪些操作会造成内存泄漏？</h4><p>内存泄漏指任何对象在您不再拥有或需要它之后依然存在<br>垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量，如果一个对象的引用数量为0(没有其他对象引用过该对象)，或该对象的的唯一引用是循环的，那么该对象的内存既可以回收<br>1、setTimeout的第一个参数使用字符串而非函数的话，会引发内存泄漏<br>2、闭包<br>3、控制台日志<br>4、循环(在两个对象，彼此引用，且彼此保留的时候，就会产生一个循环)</p><h4 id="统计出现最多字符的次数？"><a href="#统计出现最多字符的次数？" class="headerlink" title="统计出现最多字符的次数？"></a>统计出现最多字符的次数？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'asdfssaaasasasasaa'</span>;</div><div class="line"><span class="keyword">var</span> json = &#123;&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(!json[str.charAt(i)])&#123;</div><div class="line">                json[str.charAt(i)] = <span class="number">1</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">                json[str.charAt(i)]++;</div><div class="line">        &#125;   </div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> iMax = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> iIndex = <span class="string">''</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> json)&#123;</div><div class="line">        <span class="keyword">if</span>(json[i]&gt;iMax)&#123;</div><div class="line">                iMax = json[i];</div><div class="line">                iIndex = i;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">alert(<span class="string">'出现次数最多的是:'</span>+iIndex+<span class="string">'出现'</span>+iMax+<span class="string">'次'</span>);</div></pre></td></tr></table></figure><h4 id="写一个获取非行间样式的函数？"><a href="#写一个获取非行间样式的函数？" class="headerlink" title="写一个获取非行间样式的函数？"></a>写一个获取非行间样式的函数？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr,value</span>)</span>&#123;</div><div class="line"><span class="keyword">if</span>(!value)&#123;</div><div class="line"><span class="keyword">if</span>(obj.currentStyle)&#123;</div><div class="line"><span class="keyword">return</span> obj.currentStyle(attr);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">obj.getComputedStyle(attr,<span class="literal">false</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">obj.style[attr] = value;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="事件委托是什么？"><a href="#事件委托是什么？" class="headerlink" title="事件委托是什么？"></a>事件委托是什么？</h4><p>利用事件冒泡的原理，让自己所触发的事件，让他的父元素代替执行</p><h4 id="谈谈闭包？"><a href="#谈谈闭包？" class="headerlink" title="谈谈闭包？"></a>谈谈闭包？</h4><p>我的理解是，闭包就是能够读取其他函数内部变量的函数。在本质上闭包就是将函数内部和函数外部连接起来的一座桥梁</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> num = <span class="number">1</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> n = <span class="number">2</span>;</div><div class="line">        alert(n + num);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> inner;</div><div class="line">&#125;</div><div class="line">outer()();</div></pre></td></tr></table></figure><h4 id="解释jsonp的原理？"><a href="#解释jsonp的原理？" class="headerlink" title="解释jsonp的原理？"></a>解释jsonp的原理？</h4><ul><li>动态创建script标签，回调函数</li><li>Ajax是页面无刷新请求数据操作</li></ul><h4 id="js的本地、内置、宿主对象？"><a href="#js的本地、内置、宿主对象？" class="headerlink" title="js的本地、内置、宿主对象？"></a>js的本地、内置、宿主对象？</h4><ul><li>本地对象：array obj regExp 等可以new出实例化</li><li>内置对象：global Math等不可以实例化的    </li><li>宿主对象：document、window等</li></ul><h4 id="window-location-search-？"><a href="#window-location-search-？" class="headerlink" title="window.location.search()？"></a>window.location.search()？</h4><ul><li>查询(参数)部分,除了给动态语言赋值以外，我们同样可以给静态页面，并使用javascript来获得相对应的参数值</li><li>返回值：?包括? 后面的值</li></ul><h4 id="window-location-hash？"><a href="#window-location-hash？" class="headerlink" title="window.location.hash？"></a>window.location.hash？</h4><ul><li>返回锚点，#包括#后面的值</li></ul><h4 id="window-location-reload-？"><a href="#window-location-reload-？" class="headerlink" title="window.location.reload()？"></a>window.location.reload()？</h4><ul><li>刷新当前的页面</li></ul><h4 id="javascript中的垃圾回收机制？"><a href="#javascript中的垃圾回收机制？" class="headerlink" title="javascript中的垃圾回收机制？"></a>javascript中的垃圾回收机制？</h4><ul><li>在javascript中如果一个对象不再被引用，那么这个对象就会被GC回收。如果两个对象相互引用，而不再被第三者引用，那么这两个相互引用的对象也会被回收。因为函数a被b引用，b又被a以外的c引用，这就是为什么，函数a执行后不会被回收的原因</li></ul><h4 id="如何在HTML中添加事件？"><a href="#如何在HTML中添加事件？" class="headerlink" title="如何在HTML中添加事件？"></a>如何在HTML中添加事件？</h4><ul><li>标签之中添加onclick = “fun()”</li><li>js添加Eobj.onclick = method</li><li>现代事件：IE ：obj.attachEvent(‘onclick’,method);   FF:obj.addEventListener(‘click’,method,false)</li></ul><h4 id="BOM对象、window对象？"><a href="#BOM对象、window对象？" class="headerlink" title="BOM对象、window对象？"></a>BOM对象、window对象？</h4><ul><li>window对象是JS的最顶层对象，其他的BOM对象都是window对象的属性</li><li>document 对象，文档对象</li><li>location 对象，浏览器当前URL对象</li><li>navigator 对象，浏览器本身信息</li><li>screen 对象，客户端屏幕信息</li><li>history 对象，浏览器访问历史信息</li></ul><h4 id="bind-、live-、delegate-？"><a href="#bind-、live-、delegate-？" class="headerlink" title="bind()、live()、delegate()？"></a>bind()、live()、delegate()？</h4><ul><li>bind 绑定事件，对新添加的事件不起作用，方法用于将一个处理程序附加到每个匹配元素的的事件上并返回jQuery事件</li><li>live 方法将一个事件处理程序附加到与当前选择器匹配的所有元素(包含现有的将来添加的)的指定事件上并返回jQuery对象</li><li>delegate 方法基于一组特定的根元素将处理程序附加到匹配选择器的所有元素(现在的或将来的)一个或者多个事件上</li></ul><h4 id="你如何优化自己的代码？"><a href="#你如何优化自己的代码？" class="headerlink" title="你如何优化自己的代码？"></a>你如何优化自己的代码？</h4><ul><li>代码重用</li><li>避免全局变量(命名空间、封闭空间、模块化mvc)</li><li>拆分函数避免函数过于臃肿</li><li>注释</li></ul><h4 id="简述readonly与disabled的区别？"><a href="#简述readonly与disabled的区别？" class="headerlink" title="简述readonly与disabled的区别？"></a>简述readonly与disabled的区别？</h4><ul><li>ReadOnly和disabled的作用是使用户不能够改变表单域中的内容，但是两者之间还是有区别的</li><li>readOnly只针对input(text/password)和textarea有效，而disabled对于所有的表单元素有效，包括select、radio、checkbox、button等</li><li>在表单元素中使用了disabled后，我们将表单以POST或者GET的方式提交的话，这个元素的值不会被传递出去，而readOnly会将值传出去</li></ul><h4 id="解释一下ajax原理？"><a href="#解释一下ajax原理？" class="headerlink" title="解释一下ajax原理？"></a>解释一下ajax原理？</h4><ul><li>ajax的工作原理相当于在用户和服务器之间加了一个中间层，使用户操作与服务器响应异步化。这样把以前的一些服务器负担的工作转嫁到客户端，利用客户端闲置的处理能力来处理，减轻服务器和带宽的负担，从而达到节约ISP的空间及带宽租用成本的目的</li><li>简单的来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对XMLHttpRequest有所了解</li></ul><h4 id="为什么扩展javascript内置对象不是好的做法？"><a href="#为什么扩展javascript内置对象不是好的做法？" class="headerlink" title="为什么扩展javascript内置对象不是好的做法？"></a>为什么扩展javascript内置对象不是好的做法？</h4><ul><li>因为你不知道哪一天浏览器或javascript本身就可以实现这个方法，而且和你扩展的实现有不一致的表现。到时候你的javascript代码可能已经在无数个页面中执行了数年，而浏览器的实现导致所有的扩展原型的代码都崩溃了</li></ul><h4 id="三元表达式？"><a href="#三元表达式？" class="headerlink" title="三元表达式？"></a>三元表达式？</h4><ul><li>又叫三元运算符表示需要三个操作数</li><li>语法是：条件？结果1：结果2；这里你把条件写在？的前面后面跟着用冒号分隔结果1和结果2，满足条件时结果1否则结果2</li></ul><h4 id="浏览器标准模式和怪异模式？"><a href="#浏览器标准模式和怪异模式？" class="headerlink" title="浏览器标准模式和怪异模式？"></a>浏览器标准模式和怪异模式？</h4><ul><li>所谓的标准模式是指，浏览器按W3C标准解析执行代码；</li><li>怪异模式是指使用浏览器自己的方式解析执行代码，因为不同浏览器解析执行的方式不一样，所以我们称之为怪异模式</li></ul><h4 id="jQuery中的ajax常用参数？"><a href="#jQuery中的ajax常用参数？" class="headerlink" title="jQuery中的ajax常用参数？"></a>jQuery中的ajax常用参数？</h4><ul><li>async是否异步</li><li>Url请求地址</li><li>contentType发送信息到服务器的时内容编码类型</li><li>data发送到服务器的数据</li><li>dataType预期服务器返回的内容</li><li>type请求数据类型</li><li>success请求成功回调函数</li><li>error请求失败回调函数</li></ul><h4 id="ff和IE的脚本兼容问题？"><a href="#ff和IE的脚本兼容问题？" class="headerlink" title="ff和IE的脚本兼容问题？"></a>ff和IE的脚本兼容问题？</h4><ul><li>window.event：表示当前事件对象，IE有这个对象，FF没有，FF通过给事件处理函数传递事件对象</li><li>获取事件源：IE用srcElement获取事件源，而FF用target获取事件源</li><li>添加去除事件：IE：element.attachEvent(‘onclick’,function);element.detachEvent(‘onclick’,function); FF:element.addEventListener(‘click’,function,true);element.removeEventListener(‘click’,function,true)</li><li>获取标签的自定义属性：IE：div.value或div[‘value’]; FF：可用div.getAttribute(‘value’)</li></ul><h4 id="BOM对象，window对象的方法？"><a href="#BOM对象，window对象的方法？" class="headerlink" title="BOM对象，window对象的方法？"></a>BOM对象，window对象的方法？</h4><ul><li>BOM对象：winodw、document、history、navigator、location、screen</li><li>方法：alert、confirm、prompt、open、close</li></ul><h4 id="伪数组？"><a href="#伪数组？" class="headerlink" title="伪数组？"></a>伪数组？</h4><ul><li>伪数组(类数组)：无法直接调用数组方法或期望length属性有什么特殊的行为，但是仍可以对真正的数组遍历方法来遍历它们。典型的是函数的argument参数，还有像调用getElementsByTagName,document.childNodes之类的，他们都返回NodeList对象都属于伪数组。可以使用Array.prototype.slice.call(fakeArray)将数组转化为正真的Array对象</li></ul><blockquote><p>End.. 下篇总结H5C3..</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h4 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h4&gt;&lt;p&gt;&lt;b&gt;接着上篇继续来…&lt;/b&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;列举BOM常用的对象及window对象常用的方法？&quot;&gt;&lt;a href=&quot;#列举BOM常用的对象及window对象常用的方法？&quot; class=&quot;headerlink&quot; title=&quot;列举BOM常用的对象及window对象常用的方法？&quot;&gt;&lt;/a&gt;列举BOM常用的对象及window对象常用的方法？&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;BOM常用的对象：window、document、location、screen、history、navigator&lt;/li&gt;
&lt;li&gt;window对象常用的方法：alert()、confirm()、prompt()、open()、close()&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="interview" scheme="http://haotengfei.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>面试题-JS基础(上)</title>
    <link href="http://haotengfei.com/2016/03/05/interview3/"/>
    <id>http://haotengfei.com/2016/03/05/interview3/</id>
    <published>2016-03-05T11:40:00.000Z</published>
    <updated>2017-09-19T03:40:24.648Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p><b>基础HTML&amp;CSS结束，开始JS基础…</b></p></blockquote><h4 id="javascript的typeof返回哪些数据类型？"><a href="#javascript的typeof返回哪些数据类型？" class="headerlink" title="javascript的typeof返回哪些数据类型？"></a>javascript的typeof返回哪些数据类型？</h4><figure class="highlight console"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">alert(typeof [1, 2]); //object</div><div class="line">alert(typeof 'leipeng'); //string</div><div class="line">var i = true; </div><div class="line">alert(typeof i); //boolean</div><div class="line">alert(typeof 1); //number</div><div class="line">var a; </div><div class="line">alert(typeof a); //undefined</div><div class="line">function a()&#123;;&#125;;</div><div class="line">alert(typeof a) //function</div></pre></td></tr></table></figure><a id="more"></a><h4 id="说3种强制类型转化，2种隐式类型转化？"><a href="#说3种强制类型转化，2种隐式类型转化？" class="headerlink" title="说3种强制类型转化，2种隐式类型转化？"></a>说3种强制类型转化，2种隐式类型转化？</h4><ul><li>强制：(parseInt();parseFloat();Number())</li><li>隐式：(==;!!)</li></ul><h4 id="split-、join-的区别？"><a href="#split-、join-的区别？" class="headerlink" title="split()、join()的区别？"></a>split()、join()的区别？</h4><ul><li>前者是切割成数组的形式；后者是将数组转化为字符串</li></ul><h4 id="数组的方法pop-push-unshift-shift-？"><a href="#数组的方法pop-push-unshift-shift-？" class="headerlink" title="数组的方法pop() push() unshift() shift()？"></a>数组的方法pop() push() unshift() shift()？</h4><ul><li>尾部添加push();尾部删除pop()</li><li>头部添加unshift();头部删除shift()</li></ul><h4 id="事件绑定和普通事件有什么区别？"><a href="#事件绑定和普通事件有什么区别？" class="headerlink" title="事件绑定和普通事件有什么区别？"></a>事件绑定和普通事件有什么区别？</h4><ul><li><p>普通添加事件的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"hello"</span>);</div><div class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="number">2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>执行上面的代码只会alert 2</p></li><li><p>事件绑定方式添加事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"hello"</span>);</div><div class="line">btn.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="number">1</span>);</div><div class="line">&#125;,<span class="literal">false</span>);</div><div class="line">btn.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="number">2</span>);</div><div class="line">&#125;,<span class="literal">false</span>);</div></pre></td></tr></table></figure></li><li><p>执行上面的代码会先alert 1 再 alert 2</p></li><li>普通添加事件的方法不支持添加多个事件，最下面的事件会覆盖上面的，而事件绑定（addEventListener）方式添加事件可以添加多个</li><li>addEventListener不兼容低版本IE</li><li>普通事件无法取消</li><li>addEventLisntener还支持事件冒泡+事件捕获</li></ul><h4 id="IE和DOM事件流的区别？"><a href="#IE和DOM事件流的区别？" class="headerlink" title="IE和DOM事件流的区别？"></a>IE和DOM事件流的区别？</h4><ul><li>执行顺序不一样</li><li>参数不一样</li><li>事件加不加on</li><li>this的指向问题</li></ul><h4 id="IE和标准下有哪些兼容写法？"><a href="#IE和标准下有哪些兼容写法？" class="headerlink" title="IE和标准下有哪些兼容写法？"></a>IE和标准下有哪些兼容写法？</h4><ul><li>Var ev = ev || window.event</li><li>document.documentElement.clientWidth || document.body.clientWidth</li><li>Var target = ev.srcElement||ev.target</li></ul><h4 id="call和apply的区别？"><a href="#call和apply的区别？" class="headerlink" title="call和apply的区别？"></a>call和apply的区别？</h4><ul><li>call方法：<ul><li>语法：call(thisObj,Object1,Object2…)</li><li>定义：调用一个对象的一个方法，以另一个对象替换当前对象</li><li>说明：</li><li>call方法可以用来代替另一个对象来调用一个方法，call方法可以将一个函数的对象上下文从初始的上下文改变为由thisObj指定的新对象</li><li>如果没有提供thisObj参数，那么Global对象被用作thisObj</li></ul></li><li>apply方法：<ul><li>语法：apply(thisObj,[argArray])</li><li>定义：应用某一对象的方法，用另一个对象代替当前对象</li><li>说明：</li><li>如果argArray不是一个有效的数组或者不是arguments对象，那么将导致一个TypeError</li><li>如果没有提供argArray和thisObj任何一个参数，那么Global对象将被用作thisObj，并且无法被传递任何参数</li></ul></li></ul><h4 id="b继承a的方法？"><a href="#b继承a的方法？" class="headerlink" title="b继承a的方法？"></a>b继承a的方法？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">age,name</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">&#125;;</div><div class="line">A.prototype.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">'父级方法'</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params">age,name,job</span>)</span>&#123;</div><div class="line">  A.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</div><div class="line">  <span class="keyword">this</span>.job = job;</div><div class="line">&#125;</div><div class="line">B.prototype = <span class="keyword">new</span> A();</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> A(<span class="number">14</span>,<span class="string">'侠客行'</span>);</div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> B(<span class="number">15</span>,<span class="string">'侠客'</span>,<span class="string">'侠女'</span>);</div></pre></td></tr></table></figure><h4 id="如何阻止事件冒泡和默认事件？"><a href="#如何阻止事件冒泡和默认事件？" class="headerlink" title="如何阻止事件冒泡和默认事件？"></a>如何阻止事件冒泡和默认事件？</h4><p>canceBubble()只支持IE,return false,stopPropagation()</p><h4 id="添加，删除，替换，插入到某个节点的方法？"><a href="#添加，删除，替换，插入到某个节点的方法？" class="headerlink" title="添加，删除，替换，插入到某个节点的方法？"></a>添加，删除，替换，插入到某个节点的方法？</h4><ul><li>obj.appendChild()</li><li>obj.insertBefore()</li><li>obj.replaceChild()</li><li>obj.removeChild()</li></ul><h4 id="javascript的本地对象，内置对象，宿主对象？"><a href="#javascript的本地对象，内置对象，宿主对象？" class="headerlink" title="javascript的本地对象，内置对象，宿主对象？"></a>javascript的本地对象，内置对象，宿主对象？</h4><ul><li>本地对象为array,obj,regexp等可以new实例化</li><li>内置对象为global,Math等不可以实例化的</li><li>宿主对象为浏览器自带的document,window等</li></ul><h4 id="window-onload和document-ready的区别？"><a href="#window-onload和document-ready的区别？" class="headerlink" title="window.onload和document.ready的区别？"></a>window.onload和document.ready的区别？</h4><ul><li>window.onload是在dom文档树加载完和所有文件加载完之后执行的一个函数</li><li>Document.ready原生中没有这种方法，jquery中有$(document).ready(function),在dom文档输加载完之后执行的一个函数(注意：这里的额Dom文档树加载完，不代表所有的文件都加载完)</li><li>$(document).ready要比window.onload先执行</li><li>window.onload只能出来一次，$(document).ready可以出现多次</li></ul><h4 id="和-的区别？"><a href="#和-的区别？" class="headerlink" title="==和===的区别？"></a>==和===的区别？</h4><ul><li>前者会自动转化类型</li><li>后者不会</li></ul><h4 id="javascript的同源策略？"><a href="#javascript的同源策略？" class="headerlink" title="javascript的同源策略？"></a>javascript的同源策略？</h4><ul><li>一段脚本只能读取来自于同一来源的窗口和文档的属性,这里的同一来源指的是主机名,协议和端口号的的组合</li></ul><h4 id="javascript语言的特点？"><a href="#javascript语言的特点？" class="headerlink" title="javascript语言的特点？"></a>javascript语言的特点？</h4><ul><li>javaScript一种直译式脚本语言,是一种动态类型、弱类型、基于原型的语言,内置支持类型。它的解释器被称为javaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML网页上使用，用来给HTML页面增加动态功能。javaScript兼容ECMA标准，因此也称为ECMAScript</li><li>基本特点：<ul><li>是一种解释性脚本语言(代码不进行预编译)</li><li>主要用来向HTML(标准通用标记语言下的一个应用)页面添加交互行为</li><li>可以直接嵌入HTML页面，但是写成单独的js文件有利于结构和行为的分离</li><li>跨平台性，在绝大多数浏览器的支持下，可以在多种平台下运行(windows、linux、Mac、Android、ios等)</li></ul></li></ul><h4 id="javaScript的数据类型？"><a href="#javaScript的数据类型？" class="headerlink" title="javaScript的数据类型？"></a>javaScript的数据类型？</h4><ul><li>基本数据类型：String、boolean、Number、undefined、Null</li><li>引用数据类型：Object(Array,Date,RegExp,Function)</li><li>那么问题来了，如何判断某变量是否为数组数据类型？<ul><li>判断是否具有数组性质，如slice()方法，可以给该变量定义slice方法，故有时会失效</li><li>obj instanceof Array  在某些IE版本中不正确</li><li>前面两种方法皆有漏洞，在ECMA Script5中定义了新方法Array.isArray(),但保证其兼容性，最好的方法如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">Array</span>.isArray === <span class="string">'undefined'</span>)&#123;</div><div class="line">  <span class="built_in">Array</span>.isArray = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arg) === <span class="string">'[object Array]'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul></li></ul><h4 id="如何获取页面中所有的checkbox？"><a href="#如何获取页面中所有的checkbox？" class="headerlink" title="如何获取页面中所有的checkbox？"></a>如何获取页面中所有的checkbox？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> domList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>);</div><div class="line"><span class="keyword">var</span> checkBoxList = [];</div><div class="line"><span class="keyword">var</span> len = domList.length;</div><div class="line"><span class="keyword">while</span>(len--)&#123;</div><div class="line">  <span class="keyword">if</span>(domList[len].type == <span class="string">'checkbox'</span>)&#123;</div><div class="line">    checkBoxList.push(domList[len]);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="设置一个已知ID的DIV的样式？"><a href="#设置一个已知ID的DIV的样式？" class="headerlink" title="设置一个已知ID的DIV的样式？"></a>设置一个已知ID的DIV的样式？</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dom = <span class="built_in">document</span>.getElementById(“ID”);</div><div class="line">dom.innerHTML = “xxxx”</div><div class="line">dom.style.color = “#000”</div></pre></td></tr></table></figure><h4 id="点击DOM节点，执行一个函数？"><a href="#点击DOM节点，执行一个函数？" class="headerlink" title="点击DOM节点，执行一个函数？"></a>点击DOM节点，执行一个函数？</h4><ul><li>直接在DOM里绑定事件：<code>&lt;div onclick=&#39;test()&#39;&gt;&lt;/div&gt;</code></li><li>在JS里通过onclick绑定：<code>xxx.onclick = test</code></li><li>通过事件添加进行绑定：<code>addEventListener(xxx,&#39;click&#39;,test)</code></li><li>那么问题来了，Javascript的事件流模型都有什么？<ul><li>‘事件冒泡’：事件开始由最具体的元素接受，然后逐级向上传播</li><li>‘事件捕获’：事件有最不具体的节点先接受，然后逐级向下，一直到最具体的</li><li>DOM事件流：三个阶段：事件捕获、目标阶段、事件冒泡</li></ul></li></ul><h4 id="下面代码输出为何？"><a href="#下面代码输出为何？" class="headerlink" title="下面代码输出为何？"></a>下面代码输出为何？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a;</div><div class="line">alert(<span class="keyword">typeof</span> a);     <span class="comment">//undefined</span></div><div class="line">alert(b);      <span class="comment">//报错</span></div></pre></td></tr></table></figure><ul><li>解释：Undefined是一个只有一个值的数据类型，这个值就是’undefined’,在使用var申明变量，但并未对其赋值进行初始化时，这个变量值就是undefined，而b由于未曾申明将报错，注意申明变量和申明了未赋值是不一样的</li></ul><h4 id="下面代码输出为何？-1"><a href="#下面代码输出为何？-1" class="headerlink" title="下面代码输出为何？"></a>下面代码输出为何？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</div><div class="line">alert(<span class="keyword">typeof</span> a);    <span class="comment">//object</span></div></pre></td></tr></table></figure><ul><li>解释：null是一个只有一个值的数据类型，这个值就是null，表示一个空指针对象，所以用typeof检测会返回’odject’</li></ul><h4 id="下面代码输出为何？-2"><a href="#下面代码输出为何？-2" class="headerlink" title="下面代码输出为何？"></a>下面代码输出为何？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="literal">undefined</span>;</div><div class="line"><span class="literal">undefined</span> == <span class="literal">null</span>;    <span class="comment">//true</span></div><div class="line"><span class="number">1</span> == <span class="literal">true</span>;            <span class="comment">//true</span></div><div class="line"><span class="number">2</span> == <span class="literal">true</span>;            <span class="comment">//false</span></div><div class="line"><span class="number">0</span> == <span class="literal">false</span>;           <span class="comment">//true</span></div><div class="line"><span class="number">0</span> == <span class="string">''</span>;              <span class="comment">//true</span></div><div class="line"><span class="literal">NaN</span> == <span class="literal">NaN</span>;           <span class="comment">//false</span></div><div class="line">[] == <span class="literal">false</span>;          <span class="comment">//true</span></div><div class="line">[] == ![];            <span class="comment">//true</span></div></pre></td></tr></table></figure><ul><li>解释：<ul><li>undefined与null相等，但是不恒等</li><li>一个是number一个是string时，会尝试将string转化为number</li><li>尝试将boolean转化为number，0或1</li><li>尝试将Object转化为number或string，取决于另外一个对比量的类型</li><li>所以对0空字符串的判断，建议使用’===’，全等会判断两边的值类型，类型不匹配时为false</li></ul></li><li>那么问题来了，看下面的代码输出什么，foo的值为什么？</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="string">'11'</span>+<span class="number">2</span>-<span class="string">'1'</span>;</div><div class="line"><span class="built_in">console</span>.log(foo);</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> foo); </div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"><span class="string">* 执行完之后foo的值为111，foo的类型是number，因为在减法计算的时候自动转化为number类型</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">#### 看代码给答案？</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">`</span><span class="string">``</span>javascript</div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Object</span>()</div><div class="line">a.value = <span class="number">1</span>;</div><div class="line">b = a;</div><div class="line">b.value = <span class="number">2</span>;</div><div class="line">alert(a.value);</div></pre></td></tr></table></figure><ul><li>答案：2(考察引用数据类型细节)</li></ul><h4 id="数组和字符串转换？"><a href="#数组和字符串转换？" class="headerlink" title="数组和字符串转换？"></a>数组和字符串转换？</h4><ul><li>数组变成字符串以’-‘来连接 <code>[].join(&#39;-&#39;)</code></li><li>字符串变成数组 <code>&#39;123&#39;.split(&#39;&#39;)</code></li></ul><h4 id="将’get-element-by-id’变成’getElementById’？"><a href="#将’get-element-by-id’变成’getElementById’？" class="headerlink" title="将’get-element-by-id’变成’getElementById’？"></a>将’get-element-by-id’变成’getElementById’？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">combo</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> arr = msg.split(<span class="string">'-'</span>);</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt; arr.length;i++)&#123;</div><div class="line">    arr[i] = arr[i].charAt(<span class="number">0</span>).toUpperCase()+arr[i].substr(<span class="number">1</span>,arr[i].length<span class="number">-1</span>);</div><div class="line">  &#125;</div><div class="line">  msg = arr.join(<span class="string">''</span>);</div><div class="line">  <span class="keyword">return</span> msg;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="var-arr-3-2-5-7-1-？"><a href="#var-arr-3-2-5-7-1-？" class="headerlink" title="var arr = [3,2,5,7,1]？"></a>var arr = [3,2,5,7,1]？</h4><ul><li>实现该数组的倒序:<code>arr.reverse()</code></li><li>实现该数组的从大到小的排列:<code>arr.sort(function(a,b){return b-a})</code></li></ul><h4 id="2014年9月26日变为2014-09-26？"><a href="#2014年9月26日变为2014-09-26？" class="headerlink" title="2014年9月26日变为2014-09-26？"></a>2014年9月26日变为2014-09-26？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="comment">//获取年，getFullYear()返回4位的数字</span></div><div class="line"><span class="keyword">var</span> year = d.getFullYear();</div><div class="line"><span class="comment">//获取月，这个比较特殊得加1</span></div><div class="line"><span class="keyword">var</span> month = d.getMonth()+<span class="number">1</span>;</div><div class="line"><span class="comment">//变成两位数</span></div><div class="line">month = month &lt; <span class="number">10</span>?<span class="string">'0'</span>+month:month;</div><div class="line"><span class="comment">//获取日</span></div><div class="line"><span class="keyword">var</span> day = d.getDate();</div><div class="line">day = day &lt; <span class="number">10</span>?<span class="string">'0'</span>+day:day;</div><div class="line">alert(year+<span class="string">'-'</span>+month+<span class="string">'-'</span>+day);</div></pre></td></tr></table></figure><h4 id="正则表达式的替换？"><a href="#正则表达式的替换？" class="headerlink" title="正则表达式的替换？"></a>正则表达式的替换？</h4><ul><li>将字符串<code>&lt;tr&gt;&lt;td&gt;{$id}&lt;/td&gt;&lt;td&gt;{$name}&lt;/td&gt;&lt;/tr&gt;</code>中的{$id}替换成10，{$name}替换成Tony(使用正则表达式)</li><li>“<tr><td>{$id}</td><td>{$id}_{$name}</td></tr>“.replace(/{\$id}/g, ‘10’).replace(/{\$name}/g, ‘Tony’)</li></ul><h4 id="写个函数将-lt-，-gt-，”，-amp-进行转义"><a href="#写个函数将-lt-，-gt-，”，-amp-进行转义" class="headerlink" title="写个函数将&lt;，&gt;，”，&amp;进行转义"></a>写个函数将&lt;，&gt;，”，&amp;进行转义</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escapeHtml</span>(<span class="params">str</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> str.replace(<span class="regexp">/[&lt;&gt;"&amp;]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match</span>) </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (match) &#123;</div><div class="line">                   <span class="keyword">case</span> <span class="string">"&lt;"</span>:</div><div class="line">                      <span class="keyword">return</span> <span class="string">"&amp;lt;"</span>;</div><div class="line">                   <span class="keyword">case</span> <span class="string">"&gt;"</span>:</div><div class="line">                      <span class="keyword">return</span> <span class="string">"&amp;gt;"</span>;</div><div class="line">                   <span class="keyword">case</span> <span class="string">"&amp;"</span>:</div><div class="line">                      <span class="keyword">return</span> <span class="string">"&amp;amp;"</span>;</div><div class="line">                   <span class="keyword">case</span> <span class="string">"\""</span>:</div><div class="line">                      <span class="keyword">return</span> <span class="string">"&amp;quot;"</span>;</div><div class="line">      &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="短路表达式？"><a href="#短路表达式？" class="headerlink" title="短路表达式？"></a>短路表达式？</h4><ul><li>foo = foo || bar;<ul><li>如果foo存在，值不变，否则把bar赋值给foo</li><li>短路表达式：做为”&amp;&amp;”和”||”操作符的操作表达式，这些表达式在进行求值的时候，只要最终的结果可以确定真或假，求值过程将告终，这称之为短路求值</li></ul></li></ul><h4 id="下面代码的输出结果？"><a href="#下面代码的输出结果？" class="headerlink" title="下面代码的输出结果？"></a>下面代码的输出结果？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(foo);     <span class="comment">//undefined</span></div><div class="line">    <span class="keyword">var</span> foo = <span class="number">2</span>;</div><div class="line">    <span class="built_in">console</span>.log(foo);     <span class="comment">//2</span></div><div class="line">&#125;)()</div></pre></td></tr></table></figure><ul><li>函数声明与变量声明会被javascript引擎隐式的提升到当前作用域的顶部，但是值提升不赋值</li></ul><h4 id="两个数组合并，并删除第二个元素？"><a href="#两个数组合并，并删除第二个元素？" class="headerlink" title="两个数组合并，并删除第二个元素？"></a>两个数组合并，并删除第二个元素？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array1 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</div><div class="line"><span class="keyword">var</span> array2 = [<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>];</div><div class="line"><span class="comment">//方法一：</span></div><div class="line"><span class="keyword">var</span> array = array1.concat(array2);</div><div class="line">array.splice(<span class="number">1</span>,<span class="number">1</span>);</div><div class="line"><span class="comment">//方法二：</span></div><div class="line">array1.push.apply(array1,array2);</div><div class="line">array1.splice(<span class="number">1</span>,<span class="number">1</span>);</div><div class="line"><span class="comment">//方法三：</span></div><div class="line">array2 = array1.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">qq,ww</span>)</span>&#123;</div><div class="line">  qq.push(ww);</div><div class="line">  <span class="keyword">return</span> qq;</div><div class="line">&#125;,array2);</div><div class="line">array2.splice(<span class="number">1</span>,<span class="number">1</span>);</div><div class="line"><span class="comment">//方法还有很多比如for循环等，就不一一列举啦..</span></div></pre></td></tr></table></figure><h4 id="添加，删除，移动，复制，创造，查找节点？"><a href="#添加，删除，移动，复制，创造，查找节点？" class="headerlink" title="添加，删除，移动，复制，创造，查找节点？"></a>添加，删除，移动，复制，创造，查找节点？</h4><ul><li><p>创造新节点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">createDocumentFragment()    <span class="comment">//创建一个DOM片段</span></div><div class="line">createElement()             <span class="comment">//创建一个具体的元素</span></div><div class="line">createTextNode()            <span class="comment">//创建一个文本节点</span></div></pre></td></tr></table></figure></li><li><p>添加、删除、替换、插入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">appendChild()               <span class="comment">//添加</span></div><div class="line">removeChild()               <span class="comment">//移除</span></div><div class="line">replaceChild()              <span class="comment">//替换</span></div><div class="line">insertBefore()              <span class="comment">//插入</span></div></pre></td></tr></table></figure></li><li><p>查找</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getElementsByTagName()      <span class="comment">//通过标签名称</span></div><div class="line">getElementsByName()         <span class="comment">//通过元素的name属性值</span></div><div class="line">getElementById()            <span class="comment">//通过元素的ID唯一性</span></div></pre></td></tr></table></figure></li></ul><h4 id="获取URL中的get参数？"><a href="#获取URL中的get参数？" class="headerlink" title="获取URL中的get参数？"></a>获取URL中的get参数？</h4><ul><li>有这样一个URL：<code>http://item.taobao.com/item.htm?a=1&amp;b=2&amp;c=&amp;d=xxx&amp;e</code>，请写一段JS程序提取URL中的各个GET参数(参数名和参数个数不确定)，将其按<code>key-value</code>形式返回到一个json结构中，如<code>{a:’1′, b:’2′, c:”, d:’xxx’, e:undefined}</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrl</span>(<span class="params">url</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">  <span class="keyword">if</span>(<span class="regexp">/\?/</span>.test(url))&#123;</div><div class="line">    <span class="keyword">var</span> urlString = url.substr(url.indexOf(<span class="string">'?'</span>)+<span class="number">1</span>);</div><div class="line">    <span class="keyword">var</span> urlArr = urlString.split(<span class="string">'&amp;'</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; urlArr.length;i++)&#123;</div><div class="line">      <span class="keyword">var</span> arr = urlArr[i].split(<span class="string">'='</span>);</div><div class="line">      obj[arr[<span class="number">0</span>]] = arr[<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> obj;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h4 id="var-reg-new-RegExp-‘’-与var-reg-？"><a href="#var-reg-new-RegExp-‘’-与var-reg-？" class="headerlink" title="var reg=new RegExp(‘’)与var reg=//？"></a>var reg=new RegExp(‘’)与var reg=//？</h4><ul><li>当使用RegExp()构造函数的时候,不仅需要转义引号(即\’表示’),并且还需要双反斜杠(即\表示一个)，因此使用正则表达字面量的效率高</li></ul><h4 id="看代码，给出结果"><a href="#看代码，给出结果" class="headerlink" title="看代码，给出结果"></a>看代码，给出结果</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(i);    </div><div class="line">  &#125;,<span class="number">0</span>);  </div><div class="line">&#125;;      <span class="comment">//4 4 4</span></div></pre></td></tr></table></figure><ul><li>原因：Javascript事件处理器在线程空闲之前不会运行，那么如何让代码输出1 2 3呢？<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;   <span class="comment">//改成立即执行函数</span></div><div class="line">      <span class="built_in">console</span>.log(i);    </div><div class="line">  &#125;(i),<span class="number">0</span>);  </div><div class="line">&#125;;      <span class="comment">//1 2 3</span></div></pre></td></tr></table></figure></li></ul><h4 id="清除字符串前后空格-兼容所有浏览器"><a href="#清除字符串前后空格-兼容所有浏览器" class="headerlink" title="清除字符串前后空格(兼容所有浏览器)"></a>清除字符串前后空格(兼容所有浏览器)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!<span class="built_in">String</span>.prototype.trim)&#123;</div><div class="line">  <span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s+/</span>, <span class="string">""</span>).replace(<span class="regexp">/\s+$/</span>,<span class="string">""</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> str = <span class="string">" \t\n test string "</span>.trim(); </div><div class="line">alert(str == <span class="string">"test string"</span>);          <span class="comment">// alert "true"</span></div></pre></td></tr></table></figure><h4 id="javascript中callee和caller的作用？"><a href="#javascript中callee和caller的作用？" class="headerlink" title="javascript中callee和caller的作用？"></a>javascript中callee和caller的作用？</h4><ul><li>caller是返回一个对函数的引用，该函数调用了当前函数(这个属性只有当函数在执行时才有用；如果在javascript程序中，函数是由顶层调用的，则返回null)</li><li>callee返回正在执行的函数本身的引用，它是arguments的一个属性(这个属性只有在函数执行时才有效；它有一个length属性，可以用来获得形参的个数，因此可以用来比较形参和实参个数是否一致，即比较arguments.length是否等于arguments.callee.length；它可以用来递归匿名函数。)</li><li>那么问题来了？如果一对兔子每月生一对兔子；一对新生兔，从第二个月起就开始生兔子；假定每对兔子都是一雌一雄，试问一对兔子，第n个月能繁殖成多少对兔子？（使用callee完成）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result=[];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n</span>)</span>&#123;  <span class="comment">//典型的斐波那契数列</span></div><div class="line">   <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</div><div class="line">           <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">   &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span>(result[n])&#123;</div><div class="line">                <span class="keyword">return</span> result[n];</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">//argument.callee()表示fn()</span></div><div class="line">                result[n]=<span class="built_in">arguments</span>.callee(n<span class="number">-1</span>)+<span class="built_in">arguments</span>.callee(n<span class="number">-2</span>);</div><div class="line">                <span class="keyword">return</span> result[n];</div><div class="line">        &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h4 id="分析代码，得出正确的结果？"><a href="#分析代码，得出正确的结果？" class="headerlink" title="分析代码，得出正确的结果？"></a>分析代码，得出正确的结果？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">10</span>, b=<span class="number">20</span> , c=<span class="number">30</span>;</div><div class="line">++a;</div><div class="line">a++;</div><div class="line">e=++a+(++b)+(c++)+a++;</div><div class="line">alert(e);     <span class="comment">// 77</span></div></pre></td></tr></table></figure><h4 id="写出程序运行的结果？"><a href="#写出程序运行的结果？" class="headerlink" title="写出程序运行的结果？"></a>写出程序运行的结果？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>, j=<span class="number">0</span>; i&lt;<span class="number">10</span>, j&lt;<span class="number">6</span>; i++, j++)&#123;</div><div class="line">  k = i + j;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 10</span></div></pre></td></tr></table></figure><h4 id="阅读以下代码，请分析出结果？"><a href="#阅读以下代码，请分析出结果？" class="headerlink" title="阅读以下代码，请分析出结果？"></a>阅读以下代码，请分析出结果？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span> ,<span class="number">3</span> ,<span class="number">5</span>);</div><div class="line">arr[<span class="number">4</span>]=<span class="string">'z'</span>;</div><div class="line">arr2 = arr.reverse();</div><div class="line">arr3 = arr.concat(arr2);</div><div class="line">alert(arr3);</div><div class="line"><span class="comment">//弹出提示对话框：z,,5,3,1,z,,5,3,1</span></div></pre></td></tr></table></figure><h4 id="补充按钮事件的函数？"><a href="#补充按钮事件的函数？" class="headerlink" title="补充按钮事件的函数？"></a>补充按钮事件的函数？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;script type=<span class="string">"text/javascript"</span> &gt;</div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">closeWin</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="comment">//在此处添加代码</span></div><div class="line">        <span class="keyword">if</span>(confirm(<span class="string">"确定要退出吗？"</span>))&#123;</div><div class="line">          <span class="built_in">window</span>.close(); </div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &lt;<span class="regexp">/script&gt;</span></div><div class="line"><span class="regexp">  &lt;/</span>head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"关闭窗口"</span> onclick=<span class="string">"closeWin()"</span>/&gt;</div><div class="line">  &lt;<span class="regexp">/body&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>html&gt;</div></pre></td></tr></table></figure><h4 id="将字符串中的html标签去除掉？"><a href="#将字符串中的html标签去除掉？" class="headerlink" title="将字符串中的html标签去除掉？"></a>将字符串中的html标签去除掉？</h4><pre><code class="javascript"><span class="keyword">var</span> str = <span class="string">"&lt;div&gt;这里是div&lt;p&gt;里面的段落&lt;/p&gt;&lt;/div&gt;"</span>;<span class="comment">//</span>&lt;script type=<span class="string">"text/javascript"</span>&gt;  <span class="keyword">var</span> reg = <span class="regexp">/&lt;\/?\w+\/?&gt;/gi</span>;  <span class="keyword">var</span> str = <span class="string">"&lt;div&gt;这里是div&lt;p&gt;里面的段落&lt;/p&gt;&lt;/div&gt;"</span>;  alert(str.replace(reg,<span class="string">""</span>));&lt;<span class="regexp">/script&gt;</span></code></pre><blockquote><p>End..今天先写到这里了，明天继续..</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h4 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h4&gt;&lt;p&gt;&lt;b&gt;基础HTML&amp;amp;CSS结束，开始JS基础…&lt;/b&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;javascript的typeof返回哪些数据类型？&quot;&gt;&lt;a href=&quot;#javascript的typeof返回哪些数据类型？&quot; class=&quot;headerlink&quot; title=&quot;javascript的typeof返回哪些数据类型？&quot;&gt;&lt;/a&gt;javascript的typeof返回哪些数据类型？&lt;/h4&gt;&lt;figure class=&quot;highlight console&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;alert(typeof [1, 2]); //object&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(typeof &#39;leipeng&#39;); //string&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var i = true; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(typeof i); //boolean&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(typeof 1); //number&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var a; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(typeof a); //undefined&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;function a()&amp;#123;;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(typeof a) //function&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="interview" scheme="http://haotengfei.com/tags/interview/"/>
    
  </entry>
  
</feed>
