<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HaoTengFei的博客</title>
  <icon>https://www.gravatar.com/avatar/0eeb18220046cab3a51a59e41706b36d</icon>
  <subtitle>凡心所向，素履以往；生如逆旅，一苇以航</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://haotengfei.oschina.io/"/>
  <updated>2017-09-11T06:22:13.381Z</updated>
  <id>http://haotengfei.oschina.io/</id>
  
  <author>
    <name>HaoTengFei</name>
    <email>374521128@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多功能菜单树</title>
    <link href="http://haotengfei.oschina.io/2017/08/03/menu_tree/"/>
    <id>http://haotengfei.oschina.io/2017/08/03/menu_tree/</id>
    <published>2017-08-02T23:20:00.000Z</published>
    <updated>2017-09-11T06:22:13.381Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><ul><li>知识点<ul><li>原生js中的DOM节点操作</li><li>递归</li><li>构造函数<br>其实要想实现这个多功能菜单树，本身是没有多大难度的，主要考验了你原生js的一个基本操作。</li></ul></li></ul></blockquote><a id="more"></a><p><b>请点击查看效果</b><a target="_blank" href="/assets/demo/test/menu_tree.html">&nbsp;&nbsp;&nbsp;demo</a></p><h3 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h3><ul><li>注释写的都很详细，就不多解释，直接怼代码吧 !</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>菜单树-构造函数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"tree-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/tree.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    <span class="comment">/*模拟数据*/</span></span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> data = [&#123;</span></div><div class="line"><span class="actionscript">        name: <span class="string">'hello'</span>,</span></div><div class="line"><span class="undefined">        children: [</span></div><div class="line"><span class="actionscript">            &#123; name: <span class="string">'哈哈'</span> &#125;,</span></div><div class="line"><span class="actionscript">            &#123; name: <span class="string">'哈哈'</span> &#125;,</span></div><div class="line"><span class="undefined">            &#123;</span></div><div class="line"><span class="actionscript">                name: <span class="string">'哈哈'</span>,</span></div><div class="line"><span class="undefined">                children: [</span></div><div class="line"><span class="actionscript">                    &#123; name: <span class="string">'嘿嘿'</span> &#125;</span></div><div class="line"><span class="undefined">                ]</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="actionscript">            &#123; name: <span class="string">'哈哈'</span> &#125;</span></div><div class="line"><span class="undefined">        ]</span></div><div class="line"><span class="undefined">    &#125;,</span></div><div class="line"><span class="actionscript">        &#123; name: <span class="string">'wat'</span> &#125;,</span></div><div class="line"><span class="undefined">        &#123;</span></div><div class="line"><span class="actionscript">            name: <span class="string">'child folder'</span>,</span></div><div class="line"><span class="undefined">            children: [&#123;</span></div><div class="line"><span class="actionscript">                name: <span class="string">'child folder'</span>,</span></div><div class="line"><span class="undefined">                children: [</span></div><div class="line"><span class="actionscript">                    &#123; name: <span class="string">'hello'</span> &#125;,</span></div><div class="line"><span class="actionscript">                    &#123; name: <span class="string">'wat'</span> &#125;</span></div><div class="line"><span class="undefined">                ]</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="actionscript">                &#123; name: <span class="string">'hello'</span> &#125;,</span></div><div class="line"><span class="actionscript">                &#123; name: <span class="string">'wat'</span> &#125;,</span></div><div class="line"><span class="undefined">                &#123;</span></div><div class="line"><span class="actionscript">                    name: <span class="string">'child folder'</span>,</span></div><div class="line"><span class="undefined">                    children: [</span></div><div class="line"><span class="actionscript">                        &#123; name: <span class="string">'hello'</span> &#125;,</span></div><div class="line"><span class="actionscript">                        &#123; name: <span class="string">'wat'</span> &#125;</span></div><div class="line"><span class="undefined">                    ]</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="undefined">            ]</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    ];</span></div><div class="line"><span class="actionscript">    <span class="keyword">new</span> Tree(<span class="string">'tree-container'</span>,data);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="tree-js代码"><a href="#tree-js代码" class="headerlink" title="tree.js代码"></a>tree.js代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">var</span> Tree = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> self;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params">selector, data</span>) </span>&#123;</div><div class="line">        self = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">this</span>.container = <span class="built_in">document</span>.getElementById(selector);</div><div class="line">        <span class="keyword">this</span>.init(data, <span class="keyword">this</span>.container);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Tree.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params">data, node</span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</div><div class="line">            <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">            <span class="comment">//li.innerHTML = data[i].name;</span></div><div class="line">            <span class="comment">//为了避免事件冒泡    所以这里为事件li添加一个div节点</span></div><div class="line">            <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">            div.innerHTML = data[i].name;</div><div class="line">            li.appendChild(div);</div><div class="line"></div><div class="line">            node.appendChild(li);</div><div class="line">            <span class="keyword">if</span> (data[i].children &amp;&amp; data[i].children.length) &#123;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> span = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</div><div class="line">                span.innerHTML = <span class="string">'[-]'</span>;</div><div class="line">                div.appendChild(span);</div><div class="line"></div><div class="line">                <span class="keyword">var</span> ul = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>);</div><div class="line">                li.appendChild(ul);</div><div class="line">                div.onclick = <span class="keyword">this</span>.toggle;</div><div class="line">                <span class="comment">//给点击的div加一个自定义属性</span></div><div class="line">                div.toggle = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">this</span>.init(data[i].children, ul);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">//这里给没有孩子的div加双击事件</span></div><div class="line">                div.ondblclick = <span class="keyword">this</span>.changeType;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//在这里为node节点的尾部追加一个+节点</span></div><div class="line">        <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">        li.innerHTML = <span class="string">'+'</span>;</div><div class="line">        <span class="comment">//node  其实就是所有的 ul</span></div><div class="line">        li.onclick = <span class="keyword">this</span>.addChild;</div><div class="line">        node.appendChild(li);</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//点击切换的事件处理函数</span></div><div class="line">    Tree.prototype.toggle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.dir(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">this</span>.nextSibling.style.display = <span class="keyword">this</span>.toggle ? <span class="string">'none'</span>:<span class="string">'block'</span>;</div><div class="line">        <span class="keyword">this</span>.firstElementChild.innerHTML = <span class="keyword">this</span>.toggle? <span class="string">'[+]'</span>:<span class="string">'[-]'</span>;</div><div class="line">        <span class="keyword">this</span>.toggle = !<span class="keyword">this</span>.toggle;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//添加子节点</span></div><div class="line">    Tree.prototype.addChild = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> parent = <span class="keyword">this</span>.parentElement;</div><div class="line">        <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">        div.innerHTML = <span class="string">'new stuff'</span>;</div><div class="line">        li.appendChild(div);</div><div class="line">        div.ondblclick = self.changeType;</div><div class="line">        parent.insertBefore(li,<span class="keyword">this</span>);</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//改变节点的类型   由单节点变成目录节点</span></div><div class="line">    Tree.prototype.changeType = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> parent = <span class="keyword">this</span>.parentElement;</div><div class="line">        <span class="keyword">var</span> span = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</div><div class="line">        span.innerHTML = <span class="string">'[-]'</span>;</div><div class="line">        <span class="keyword">this</span>.appendChild(span);</div><div class="line">        <span class="keyword">var</span> ul = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>);</div><div class="line">        <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">        li.innerHTML = <span class="string">'+'</span>;</div><div class="line">        li.onclick = self.addChild;</div><div class="line">        ul.appendChild(li);</div><div class="line">        parent.appendChild(ul);</div><div class="line">        <span class="keyword">this</span>.onclick = self.toggle;</div><div class="line">        <span class="keyword">this</span>.ondblclick = <span class="literal">null</span>;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> Tree;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;知识点&lt;ul&gt;
&lt;li&gt;原生js中的DOM节点操作&lt;/li&gt;
&lt;li&gt;递归&lt;/li&gt;
&lt;li&gt;构造函数&lt;br&gt;其实要想实现这个多功能菜单树，本身是没有多大难度的，主要考验了你原生js的一个基本操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://haotengfei.oschina.io/tags/js/"/>
    
      <category term="oop" scheme="http://haotengfei.oschina.io/tags/oop/"/>
    
      <category term="demo" scheme="http://haotengfei.oschina.io/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>canvas结合面向对象（下）</title>
    <link href="http://haotengfei.oschina.io/2017/08/02/canvas_oop_3/"/>
    <id>http://haotengfei.oschina.io/2017/08/02/canvas_oop_3/</id>
    <published>2017-08-02T08:05:00.000Z</published>
    <updated>2017-09-11T05:54:34.634Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=189259&auto=0&height=66"></iframe><blockquote><h3 id="canvas实现小鸟游戏"><a href="#canvas实现小鸟游戏" class="headerlink" title="canvas实现小鸟游戏"></a>canvas实现小鸟游戏</h3><ul><li><p><b>结构：</b></p><ul><li>fb.js当作一个管理模块的js里面创建了一个img加载的方法(对象);</li><li>根据fb.js去创建不同的功能的模块(sky.js、pipe.js、land.js、bird.js);</li><li>最后通过game.js将这些模块组织在一起，按照一定的规则运行游戏。</li></ul></li><li><p>通过这个小游戏，可以很好的理解，认识，运用面向对象，充分体验出了其易维护、质量高、效率高、易扩展、可读性高等优点。</p></li></ul></blockquote><a id="more"></a><h3 id="canvas-小鸟游戏"><a href="#canvas-小鸟游戏" class="headerlink" title="canvas 小鸟游戏"></a>canvas 小鸟游戏</h3><p><b>请点击查看效果图</b><a target="_blank" href="/assets/demo/test/bird1.html">&nbsp;&nbsp;&nbsp;demo</a><br><!-- <iframe src='/assets/demo/bird/index.html'></iframe> --><br><!-- [demo](/assets/demo/jiugongge_demo2.html) --></p><h3 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        canvas&#123;</span></div><div class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">            display: block;</span></div><div class="line"><span class="undefined">            margin: 0 auto;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"800"</span> <span class="attr">height</span>=<span class="string">"600"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/fb.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/sky.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/pipe.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/land.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/bird.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/game.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> game = <span class="keyword">new</span> FB.Game();</span></div><div class="line"><span class="undefined">    game.init();</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="入口函数和资源加载-fb-js"><a href="#入口函数和资源加载-fb-js" class="headerlink" title="入口函数和资源加载(fb.js)"></a>入口函数和资源加载(fb.js)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">window</span>) </span>&#123;</div><div class="line">    <span class="built_in">window</span>.FB = &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> loadSource = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.paths = [<span class="string">'birds'</span>,<span class="string">'land'</span>,<span class="string">'pipe1'</span>,<span class="string">'pipe2'</span>,<span class="string">'sky'</span>];</div><div class="line">        <span class="keyword">this</span>.dir = <span class="string">'images/'</span>;</div><div class="line">        <span class="keyword">this</span>.fix = <span class="string">'.png'</span>;</div><div class="line">    &#125;</div><div class="line">    loadSource.prototype.load = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">var</span> imgTotal = that.paths.length;</div><div class="line">        <span class="keyword">var</span> loadedNum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> imgList = &#123;&#125;;</div><div class="line">        <span class="keyword">this</span>.paths.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> img = <span class="keyword">new</span> Image()</div><div class="line">            img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                loadedNum ++;</div><div class="line">                imgList[item] = img;</div><div class="line">                <span class="keyword">if</span>(loadedNum == imgTotal)&#123;</div><div class="line">                    <span class="comment">/*开始游戏了完成业务*/</span></div><div class="line">                    callback &amp;&amp; callback(imgList);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            img.src = that.dir + item + that.fix;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    FB.loadSource = loadSource;</div><div class="line">&#125;)(<span class="built_in">window</span>)</div></pre></td></tr></table></figure><h3 id="管理天空的函数-sky-js"><a href="#管理天空的函数-sky-js" class="headerlink" title="管理天空的函数(sky.js)"></a>管理天空的函数(sky.js)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">fb</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> Sky = <span class="function"><span class="keyword">function</span> (<span class="params">ctx,skyImg,x</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ctx = ctx;</div><div class="line">        <span class="comment">/*确定绘制的位置*/</span></div><div class="line">        <span class="keyword">this</span>.x = x || <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>.y = <span class="number">0</span>;</div><div class="line">        <span class="comment">/*图片*/</span></div><div class="line">        <span class="keyword">this</span>.img = skyImg;</div><div class="line">        <span class="comment">/*速度*/</span></div><div class="line">        <span class="keyword">this</span>.speed = <span class="number">3</span>;</div><div class="line">    &#125;;</div><div class="line">    Sky.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ctx.drawImage(<span class="keyword">this</span>.img,<span class="keyword">this</span>.x,<span class="keyword">this</span>.y);</div><div class="line">        <span class="keyword">this</span>.x -= <span class="keyword">this</span>.speed;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.x &lt; - <span class="keyword">this</span>.ctx.canvas.width)&#123;</div><div class="line">            <span class="comment">/*不能直接定位在800位置*/</span></div><div class="line">            <span class="keyword">this</span>.x += <span class="number">2</span> * <span class="keyword">this</span>.ctx.canvas.width;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    fb.Sky = Sky;</div><div class="line">&#125;)(FB);</div></pre></td></tr></table></figure><h3 id="管理管子的函数-pipe-js"><a href="#管理管子的函数-pipe-js" class="headerlink" title="管理管子的函数(pipe.js)"></a>管理管子的函数(pipe.js)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">fb</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> Pipe = <span class="function"><span class="keyword">function</span> (<span class="params">ctx,topImg,botImg,x</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ctx = ctx;</div><div class="line">        <span class="keyword">this</span>.topImg = topImg;</div><div class="line">        <span class="keyword">this</span>.botImg = botImg;</div><div class="line">        <span class="comment">/*上下管道的距离*/</span></div><div class="line">        <span class="keyword">this</span>.space = <span class="number">200</span>;</div><div class="line">        <span class="comment">/*管道尺寸*/</span></div><div class="line">        <span class="keyword">this</span>.pipeWidth = <span class="keyword">this</span>.topImg.width;</div><div class="line">        <span class="keyword">this</span>.pipeHeight = <span class="keyword">this</span>.topImg.height;</div><div class="line">        <span class="comment">/*管道定位*/</span></div><div class="line">        <span class="comment">/*空出运行路线*/</span></div><div class="line">        <span class="keyword">this</span>.x = x + <span class="number">400</span>;</div><div class="line">        <span class="comment">/*速度*/</span></div><div class="line">        <span class="keyword">this</span>.speed = <span class="number">3</span>;</div><div class="line">        <span class="comment">/*初始化Y坐标  定位管道的*/</span></div><div class="line">        <span class="keyword">this</span>.initY();</div><div class="line">    &#125;</div><div class="line">    Pipe.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">/*绘制管道*/</span></div><div class="line">        <span class="keyword">this</span>.ctx.drawImage(<span class="keyword">this</span>.topImg,<span class="keyword">this</span>.x,<span class="keyword">this</span>.topY);</div><div class="line">        <span class="keyword">this</span>.ctx.drawImage(<span class="keyword">this</span>.botImg,<span class="keyword">this</span>.x,<span class="keyword">this</span>.botY);</div><div class="line">        <span class="comment">/*绘制和管道一样大小的路径*/</span></div><div class="line">        <span class="keyword">this</span>.ctx.rect(<span class="keyword">this</span>.x,<span class="keyword">this</span>.topY,<span class="keyword">this</span>.pipeWidth,<span class="keyword">this</span>.pipeHeight);</div><div class="line">        <span class="keyword">this</span>.ctx.rect(<span class="keyword">this</span>.x,<span class="keyword">this</span>.botY,<span class="keyword">this</span>.pipeWidth,<span class="keyword">this</span>.pipeHeight);</div><div class="line">        <span class="comment">//this.ctx.stroke();</span></div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">this</span>.x -= <span class="keyword">this</span>.speed;</div><div class="line">        <span class="comment">/*衔接*/</span></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.x &lt; - <span class="keyword">this</span>.topImg.width)&#123;</div><div class="line">            <span class="keyword">this</span>.x += <span class="number">6</span>*<span class="number">3</span>*<span class="keyword">this</span>.topImg.width;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    Pipe.prototype.initY = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> randomH = <span class="number">80</span> * <span class="built_in">Math</span>.random();</div><div class="line">        <span class="keyword">var</span> minH = <span class="number">140</span>;</div><div class="line">        <span class="keyword">var</span> topH = minH + randomH; <span class="comment">/*140-220*/</span></div><div class="line">        <span class="comment">/*上面图片定位 Y轴*/</span></div><div class="line">        <span class="keyword">this</span>.topY = -<span class="keyword">this</span>.pipeHeight + topH;</div><div class="line">        <span class="comment">/*下面图片定位 Y轴*/</span></div><div class="line">        <span class="keyword">this</span>.botY = topH + <span class="keyword">this</span>.space;</div><div class="line">    &#125;</div><div class="line">    fb.Pipe = Pipe;</div><div class="line">&#125;)(FB);</div></pre></td></tr></table></figure><h3 id="管理陆地的函数-land-js"><a href="#管理陆地的函数-land-js" class="headerlink" title="管理陆地的函数(land.js)"></a>管理陆地的函数(land.js)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">fb</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> Land = <span class="function"><span class="keyword">function</span> (<span class="params">ctx,landImg,x</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ctx = ctx;</div><div class="line">        <span class="keyword">this</span>.landImg = landImg;</div><div class="line">        <span class="keyword">this</span>.x = x;</div><div class="line">        <span class="keyword">this</span>.y = <span class="keyword">this</span>.ctx.canvas.height - <span class="keyword">this</span>.landImg.height;</div><div class="line">        <span class="keyword">this</span>.speed = <span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line">    Land.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ctx.drawImage(<span class="keyword">this</span>.landImg,<span class="keyword">this</span>.x,<span class="keyword">this</span>.y);</div><div class="line">        <span class="keyword">this</span>.x -= <span class="keyword">this</span>.speed;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.x &lt; - <span class="keyword">this</span>.landImg.width)&#123;</div><div class="line">            <span class="keyword">this</span>.x += <span class="number">4</span> * <span class="keyword">this</span>.landImg.width;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    fb.Land = Land;</div><div class="line">&#125;)(FB);</div></pre></td></tr></table></figure><h3 id="管理小鸟的函数-bird-js"><a href="#管理小鸟的函数-bird-js" class="headerlink" title="管理小鸟的函数(bird.js)"></a>管理小鸟的函数(bird.js)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">fb</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> Land = <span class="function"><span class="keyword">function</span> (<span class="params">ctx,landImg,x</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ctx = ctx;</div><div class="line">        <span class="keyword">this</span>.landImg = landImg;</div><div class="line">        <span class="keyword">this</span>.x = x;</div><div class="line">        <span class="keyword">this</span>.y = <span class="keyword">this</span>.ctx.canvas.height - <span class="keyword">this</span>.landImg.height;</div><div class="line">        <span class="keyword">this</span>.speed = <span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line">    Land.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ctx.drawImage(<span class="keyword">this</span>.landImg,<span class="keyword">this</span>.x,<span class="keyword">this</span>.y);</div><div class="line">        <span class="keyword">this</span>.x -= <span class="keyword">this</span>.speed;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.x &lt; - <span class="keyword">this</span>.landImg.width)&#123;</div><div class="line">            <span class="keyword">this</span>.x += <span class="number">4</span> * <span class="keyword">this</span>.landImg.width;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    fb.Land = Land;</div><div class="line">&#125;)(FB);</div></pre></td></tr></table></figure><h3 id="管理整个游戏-规则、控制各个函数-的函数-game-js"><a href="#管理整个游戏-规则、控制各个函数-的函数-game-js" class="headerlink" title="管理整个游戏(规则、控制各个函数)的函数(game.js)"></a>管理整个游戏(规则、控制各个函数)的函数(game.js)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">fb</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> Game = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">/*获取画布*/</span></div><div class="line">        <span class="keyword">this</span>.ctx = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</div><div class="line">        <span class="comment">/*定义命令*/</span></div><div class="line">        <span class="keyword">this</span>.running = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    Game.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.gameStart();</div><div class="line">    &#125;</div><div class="line">    Game.prototype.gameStart = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">        <span class="comment">/*必须加载资源*/</span></div><div class="line">        <span class="keyword">var</span> loadSource = <span class="keyword">new</span> fb.loadSource();</div><div class="line">        loadSource.load(<span class="function"><span class="keyword">function</span> (<span class="params">imgList</span>) </span>&#123;</div><div class="line">            <span class="comment">/*完成游戏的开始*/</span></div><div class="line">            <span class="keyword">var</span> objectList = [];</div><div class="line">            <span class="comment">/*初始化天空对象*/</span></div><div class="line">            <span class="keyword">var</span> skyImg = imgList[<span class="string">'sky'</span>];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">                <span class="keyword">var</span> sky = <span class="keyword">new</span> fb.Sky(that.ctx,skyImg,i*that.ctx.canvas.width);</div><div class="line">                objectList.push(sky);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">/*初始化管道对象*/</span></div><div class="line">            <span class="keyword">var</span> pipeTopImg = imgList[<span class="string">'pipe2'</span>];</div><div class="line">            <span class="keyword">var</span> pipeBotImg = imgList[<span class="string">'pipe1'</span>];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</div><div class="line">                <span class="keyword">var</span> pipe = <span class="keyword">new</span> fb.Pipe(that.ctx,pipeTopImg,pipeBotImg,i*<span class="number">3</span>*pipeTopImg.width);</div><div class="line">                objectList.push(pipe);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">/*初始化陆地*/</span></div><div class="line">            <span class="keyword">var</span> landImg = imgList[<span class="string">'land'</span>];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">                <span class="keyword">var</span> land = <span class="keyword">new</span> fb.Land(that.ctx,landImg,i*landImg.width);</div><div class="line">                objectList.push(land);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">/*初始化鸟*/</span></div><div class="line">            <span class="keyword">var</span> bird = <span class="keyword">new</span> fb.Bird(that.ctx,imgList[<span class="string">'birds'</span>]);</div><div class="line">            objectList.push(bird);</div><div class="line"></div><div class="line">            <span class="keyword">var</span> animation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="comment">/*清空画布*/</span></div><div class="line">                that.ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,that.ctx.canvas.width,that.ctx.canvas.height);</div><div class="line">                <span class="comment">/*开启新路径*/</span></div><div class="line">                that.ctx.beginPath();</div><div class="line"></div><div class="line">                <span class="comment">/*天空绘制*/</span></div><div class="line">                <span class="comment">/*管道绘制*/</span></div><div class="line">                <span class="comment">/*陆地绘制*/</span></div><div class="line">                <span class="comment">/*小鸟绘制*/</span></div><div class="line">                objectList.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">                    item.draw();</div><div class="line">                &#125;)</div><div class="line"></div><div class="line">                <span class="comment">/*游戏规则*/</span></div><div class="line">                <span class="comment">/*1.碰到地面  game over */</span></div><div class="line">                <span class="keyword">if</span>(bird.y &gt;= that.ctx.canvas.height - landImg.height - <span class="number">20</span>)&#123;</div><div class="line">                    <span class="comment">/*结束游戏  停止动画*/</span></div><div class="line">                    that.gameOver();</div><div class="line">                &#125;</div><div class="line">                <span class="comment">/*2.碰到天花板  game over */</span></div><div class="line">                <span class="keyword">if</span>(bird.y &lt;= <span class="number">10</span>)&#123;</div><div class="line">                    that.gameOver();</div><div class="line">                &#125;</div><div class="line">                <span class="comment">/*3.碰到管道  game over */</span></div><div class="line">                <span class="keyword">if</span>(that.ctx.isPointInPath(bird.x,bird.y))&#123;</div><div class="line">                    that.gameOver();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span>(that.running)&#123;</div><div class="line">                    requestAnimationFrame(animation);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            animation();</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    Game.prototype.gameOver = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.running = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    fb.Game = Game;</div><div class="line">&#125;)(FB);</div></pre></td></tr></table></figure><blockquote><p>end…</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=189259&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
&lt;h3 id=&quot;canvas实现小鸟游戏&quot;&gt;&lt;a href=&quot;#canvas实现小鸟游戏&quot; class=&quot;headerlink&quot; title=&quot;canvas实现小鸟游戏&quot;&gt;&lt;/a&gt;canvas实现小鸟游戏&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;结构：&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fb.js当作一个管理模块的js里面创建了一个img加载的方法(对象);&lt;/li&gt;
&lt;li&gt;根据fb.js去创建不同的功能的模块(sky.js、pipe.js、land.js、bird.js);&lt;/li&gt;
&lt;li&gt;最后通过game.js将这些模块组织在一起，按照一定的规则运行游戏。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过这个小游戏，可以很好的理解，认识，运用面向对象，充分体验出了其易维护、质量高、效率高、易扩展、可读性高等优点。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://haotengfei.oschina.io/tags/js/"/>
    
      <category term="canvas" scheme="http://haotengfei.oschina.io/tags/canvas/"/>
    
      <category term="oop" scheme="http://haotengfei.oschina.io/tags/oop/"/>
    
      <category term="demo" scheme="http://haotengfei.oschina.io/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>canvas结合面向对象（中）</title>
    <link href="http://haotengfei.oschina.io/2017/08/02/canvas_oop_2/"/>
    <id>http://haotengfei.oschina.io/2017/08/02/canvas_oop_2/</id>
    <published>2017-08-02T06:22:00.000Z</published>
    <updated>2017-09-11T05:55:28.326Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=857896&auto=0&height=66" style="margin-left: -10px;"></iframe><blockquote><p>前言：<br>canvas实现折线图<br>canvas实现饼状图<br>canvas实现刮刮乐<br>canvas实现人物左右移动<br>canvas实现方向键控制人物行走<br><b style="color:hotpink">代码有点多哦,看累了就听会音乐(<em>^__^</em>)</b></p></blockquote><a id="more"></a><h3 id="canvas-实现折线图"><a href="#canvas-实现折线图" class="headerlink" title="canvas 实现折线图"></a>canvas 实现折线图</h3><p><b>请点击查看效果图</b><a target="_blank" href="/assets/demo/test/lineChart.html">&nbsp;&nbsp;&nbsp;demo</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        canvas &#123;</span></div><div class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    <span class="comment">/*1.准备数据*/</span></span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> data = [</span></div><div class="line"><span class="undefined">        &#123;x:100,y:100&#125;,</span></div><div class="line"><span class="undefined">        &#123;x:200,y:120&#125;,</span></div><div class="line"><span class="undefined">        &#123;x:300,y:180&#125;,</span></div><div class="line"><span class="undefined">        &#123;x:400,y:300&#125;,</span></div><div class="line"><span class="undefined">        &#123;x:500,y:140&#125;</span></div><div class="line"><span class="undefined">    ]</span></div><div class="line"><span class="actionscript">    <span class="comment">/*2.构建对象*/</span></span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> LineChart = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*绘图工具*/</span></span></div><div class="line"><span class="javascript">        <span class="keyword">this</span>.ctx = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span></div><div class="line"><span class="actionscript">        <span class="comment">/*画布的尺寸*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.width = <span class="keyword">this</span>.ctx.canvas.width;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.height = <span class="keyword">this</span>.ctx.canvas.height;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*间距*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.space = <span class="number">20</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*原点坐标*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.x0 = <span class="keyword">this</span>.space;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.y0 = <span class="keyword">this</span>.height - <span class="keyword">this</span>.space;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*箭头大小*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.arrow = <span class="number">10</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*点大小*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.edge = <span class="number">8</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*初始方法*/</span></span></div><div class="line"><span class="actionscript">    LineChart.prototype.init = <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.drawAxis();</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.drawDots(data);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*画轴*/</span></span></div><div class="line"><span class="actionscript">    LineChart.prototype.drawAxis = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*x轴*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.x0,<span class="keyword">this</span>.y0);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width-<span class="keyword">this</span>.space,<span class="keyword">this</span>.y0);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width-<span class="keyword">this</span>.space-<span class="keyword">this</span>.arrow,<span class="keyword">this</span>.y0+<span class="keyword">this</span>.arrow/<span class="number">2</span>);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width-<span class="keyword">this</span>.space-<span class="keyword">this</span>.arrow,<span class="keyword">this</span>.y0-<span class="keyword">this</span>.arrow/<span class="number">2</span>);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.width-<span class="keyword">this</span>.space,<span class="keyword">this</span>.y0);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.stroke();</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.fill();</span></div><div class="line"><span class="actionscript">        <span class="comment">/*y轴*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.x0,<span class="keyword">this</span>.y0);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space,<span class="keyword">this</span>.space);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space + <span class="keyword">this</span>.arrow/<span class="number">2</span>,<span class="keyword">this</span>.space + <span class="keyword">this</span>.arrow);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space - <span class="keyword">this</span>.arrow/<span class="number">2</span>,<span class="keyword">this</span>.space + <span class="keyword">this</span>.arrow);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(<span class="keyword">this</span>.space,<span class="keyword">this</span>.space);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.stroke();</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.fill();</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*画点*/</span></span></div><div class="line"><span class="actionscript">    <span class="comment">/*转换坐标轴*/</span></span></div><div class="line"><span class="actionscript">    LineChart.prototype.transform = <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> canvasData = [];</span></div><div class="line"><span class="actionscript">        data.forEach(<span class="function"><span class="keyword">function</span> <span class="params">(item, i)</span> </span>&#123;</span></div><div class="line"><span class="undefined">            canvasData.push(&#123;x:that.x0+item.x,y:that.y0-item.y&#125;);</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="actionscript">        <span class="keyword">return</span> canvasData;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*绘制单个点*/</span></span></div><div class="line"><span class="actionscript">    LineChart.prototype.drawDot = <span class="function"><span class="keyword">function</span> <span class="params">(dotted)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.moveTo(dotted.x-<span class="keyword">this</span>.edge/<span class="number">2</span>,dotted.y-<span class="keyword">this</span>.edge/<span class="number">2</span>);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(dotted.x+<span class="keyword">this</span>.edge/<span class="number">2</span>,dotted.y-<span class="keyword">this</span>.edge/<span class="number">2</span>);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(dotted.x+<span class="keyword">this</span>.edge/<span class="number">2</span>,dotted.y+<span class="keyword">this</span>.edge/<span class="number">2</span>);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(dotted.x-<span class="keyword">this</span>.edge/<span class="number">2</span>,dotted.y+<span class="keyword">this</span>.edge/<span class="number">2</span>);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.closePath();</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.fill();</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*绘制多个点*/</span></span></div><div class="line"><span class="actionscript">    LineChart.prototype.drawDots = <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> canvasData = <span class="keyword">this</span>.transform(data);</span></div><div class="line"><span class="actionscript">        canvasData.forEach(<span class="function"><span class="keyword">function</span> <span class="params">(item,i)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">            <span class="comment">/*绘制单个点*/</span></span></div><div class="line"><span class="undefined">            that.drawDot(item);</span></div><div class="line"><span class="actionscript">            <span class="comment">/*绘制线*/</span></span></div><div class="line"><span class="actionscript">            <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span></div><div class="line"><span class="undefined">                that.drawLine(that.x0,that.y0,item.x,item.y);</span></div><div class="line"><span class="actionscript">            &#125;<span class="keyword">else</span>&#123;</span></div><div class="line"><span class="undefined">                that.drawLine(canvasData[i-1].x,canvasData[i-1].y,item.x,item.y);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*绘制线*/</span></span></div><div class="line"><span class="actionscript">    LineChart.prototype.drawLine = <span class="function"><span class="keyword">function</span> <span class="params">(mx,my,lx,ly)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.moveTo(mx,my);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(lx,ly);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.stroke();</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">    <span class="keyword">new</span> LineChart().init(data);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="canvas实现饼状图"><a href="#canvas实现饼状图" class="headerlink" title="canvas实现饼状图"></a>canvas实现饼状图</h3><p><b>请点击查看效果图</b><a target="_blank" href="/assets/demo/test/pieChart.html">&nbsp;&nbsp;&nbsp;demo</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        canvas &#123;</span></div><div class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">            display: block;</span></div><div class="line"><span class="undefined">            margin: 0 auto;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line"><span class="comment">1.绘制饼</span></div><div class="line"><span class="comment">数据（人数）转换弧度</span></div><div class="line"><span class="comment">随机颜色</span></div><div class="line"><span class="comment">2.绘制标题</span></div><div class="line"><span class="comment">数据（标题）</span></div><div class="line"><span class="comment">3.绘制说明</span></div><div class="line"><span class="comment">随机颜色</span></div><div class="line"><span class="comment">标题</span></div><div class="line"><span class="comment">--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    <span class="comment">/*准备数据*/</span></span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> data = [</span></div><div class="line"><span class="undefined">        &#123;</span></div><div class="line"><span class="actionscript">            title: <span class="string">'15-20岁'</span>,</span></div><div class="line"><span class="undefined">            num: 12</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        &#123;</span></div><div class="line"><span class="actionscript">            title: <span class="string">'20-25岁'</span>,</span></div><div class="line"><span class="undefined">            num: 30</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        &#123;</span></div><div class="line"><span class="actionscript">            title: <span class="string">'25-30岁'</span>,</span></div><div class="line"><span class="undefined">            num: 22</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        &#123;</span></div><div class="line"><span class="actionscript">            title: <span class="string">'30-35岁'</span>,</span></div><div class="line"><span class="undefined">            num: 10</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        &#123;</span></div><div class="line"><span class="actionscript">            title: <span class="string">'35-100岁'</span>,</span></div><div class="line"><span class="undefined">            num: 12</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">    ];</span></div><div class="line"><span class="actionscript">    <span class="comment">/*创建构造函数*/</span></span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> PieChart = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*画笔*/</span></span></div><div class="line"><span class="javascript">        <span class="keyword">this</span>.ctx = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span></div><div class="line"><span class="actionscript">        <span class="comment">/*画布尺寸*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.width = <span class="keyword">this</span>.ctx.canvas.width;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.height = <span class="keyword">this</span>.ctx.canvas.height;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*设置圆的中心点*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.x0 = <span class="keyword">this</span>.width / <span class="number">2</span> + <span class="number">50</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.y0 = <span class="keyword">this</span>.height / <span class="number">2</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*设置圆半径*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.radius = <span class="number">150</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*延伸的线长度*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.lineOut = <span class="number">20</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    PieChart.prototype.init = <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.drawPie(data);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*获取随机颜色*/</span></span></div><div class="line"><span class="actionscript">    PieChart.prototype.getRandomColor = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> g = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> b = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span></div><div class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="string">'rgb('</span> + r + <span class="string">','</span> + g + <span class="string">','</span> + b + <span class="string">')'</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*转换弧度*/</span></span></div><div class="line"><span class="actionscript">    PieChart.prototype.transformAngle = <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*转换后生成一个包含弧度的新数据*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> total = <span class="number">0</span></span></div><div class="line"><span class="actionscript">        data.forEach(<span class="function"><span class="keyword">function</span> <span class="params">(item)</span> </span>&#123;</span></div><div class="line"><span class="undefined">            total += item.num;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> canvasData = [];</span></div><div class="line"><span class="actionscript">        data.forEach(<span class="function"><span class="keyword">function</span> <span class="params">(item)</span> </span>&#123;</span></div><div class="line"><span class="undefined">            canvasData.push(&#123;</span></div><div class="line"><span class="undefined">                title: item.title,</span></div><div class="line"><span class="undefined">                num: item.num,</span></div><div class="line"><span class="javascript">                angle: item.num / total * <span class="number">2</span> * <span class="built_in">Math</span>.PI</span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="actionscript">        <span class="keyword">return</span> canvasData;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*绘制饼图方法*/</span></span></div><div class="line"><span class="actionscript">    PieChart.prototype.drawPie = <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> canvasData = that.transformAngle(data);</span></div><div class="line"><span class="actionscript">        <span class="comment">/*依赖新的数据*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> startAngle = <span class="number">0</span>;</span></div><div class="line"><span class="actionscript">        canvasData.forEach(<span class="function"><span class="keyword">function</span> <span class="params">(item,i)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">            <span class="comment">/*绘制的扇形*/</span></span></div><div class="line"><span class="undefined">            that.ctx.beginPath();</span></div><div class="line"><span class="undefined">            that.ctx.moveTo(that.x0, that.y0);</span></div><div class="line"><span class="undefined">            that.ctx.arc(that.x0, that.y0, that.radius, startAngle, startAngle + item.angle);</span></div><div class="line"><span class="actionscript">            <span class="comment">//that.ctx.strokeStyle = that.ctx.fillStyle = that.getRandomColor();</span></span></div><div class="line"><span class="actionscript">            <span class="keyword">var</span> color = that.ctx.fillStyle = that.getRandomColor();</span></div><div class="line"><span class="undefined">            that.ctx.fill();</span></div><div class="line"><span class="actionscript">            <span class="comment">/*进行标题的绘制*/</span></span></div><div class="line"><span class="undefined">            that.drawTitle(startAngle, item.angle, color, item.title);</span></div><div class="line"><span class="actionscript">            <span class="comment">/*进行说明的绘制*/</span></span></div><div class="line"><span class="undefined">            that.drawDesc(color,i,item.title);</span></div><div class="line"><span class="actionscript">            <span class="comment">/*记录当前的结束位置  下一次的起始位置*/</span></span></div><div class="line"><span class="undefined">            startAngle = startAngle + item.angle;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*标题的绘制*/</span></span></div><div class="line"><span class="actionscript">    PieChart.prototype.drawTitle = <span class="function"><span class="keyword">function</span> <span class="params">(startAngle, angle, color, title)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*绘制标题需要什么？*/</span></span></div><div class="line"><span class="actionscript">        <span class="comment">/*延时出去的点坐标*/</span></span></div><div class="line"><span class="actionscript">        <span class="comment">/*需要斜边的长度*/</span></span></div><div class="line"><span class="actionscript">        <span class="comment">/*需要弧度*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> edge = <span class="keyword">this</span>.radius + <span class="keyword">this</span>.lineOut;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*x轴方向偏移*/</span></span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> xEdge = <span class="built_in">Math</span>.cos(startAngle + angle / <span class="number">2</span>) * edge;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*y轴方向偏移*/</span></span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> yEdge = <span class="built_in">Math</span>.sin(startAngle + angle / <span class="number">2</span>) * edge;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*计算延伸点坐标*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> xOut = <span class="keyword">this</span>.x0 + xEdge;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> yOut = <span class="keyword">this</span>.y0 + yEdge;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*移动到中心*/</span></span></div><div class="line"><span class="actionscript">        <span class="comment">/*画一条线到延伸点*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.beginPath();</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.x0, <span class="keyword">this</span>.y0);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.lineTo(xOut, yOut);</span></div><div class="line"><span class="actionscript">        <span class="comment">/*绘制横线*/</span></span></div><div class="line"><span class="actionscript">        <span class="comment">/*横线长度*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> textWidth = <span class="keyword">this</span>.ctx.measureText(title).width;</span></div><div class="line"><span class="actionscript">        <span class="keyword">if</span> (xOut &gt; <span class="keyword">this</span>.x0) &#123;</span></div><div class="line"><span class="actionscript">            <span class="comment">/*右边*/</span></span></div><div class="line"><span class="actionscript">            <span class="keyword">this</span>.ctx.textAlign = <span class="string">'left'</span>;</span></div><div class="line"><span class="actionscript">            <span class="keyword">this</span>.ctx.lineTo(xOut + textWidth, yOut);</span></div><div class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></div><div class="line"><span class="actionscript">            <span class="comment">/*左边*/</span></span></div><div class="line"><span class="actionscript">            <span class="keyword">this</span>.ctx.textAlign = <span class="string">'right'</span>;</span></div><div class="line"><span class="actionscript">            <span class="keyword">this</span>.ctx.lineTo(xOut - textWidth, yOut);</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*绘制文字*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.textBaseline = <span class="string">'bottom'</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.fillText(title,xOut,yOut);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.strokeStyle = color;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.stroke();</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*说明的绘制*/</span></span></div><div class="line"><span class="actionscript">    PieChart.prototype.drawDesc = <span class="function"><span class="keyword">function</span> <span class="params">(color,index,title)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.beginPath();</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.fillStyle = color;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.fillRect(<span class="number">20</span>,<span class="number">20</span>+index*(<span class="number">16</span>+<span class="number">10</span>),<span class="number">30</span>,<span class="number">16</span>);</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.textAlign = <span class="string">'left'</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.textBaseline = <span class="string">'top'</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.fillText(title,<span class="number">20</span>+<span class="number">30</span>+<span class="number">10</span>,<span class="number">20</span>+index*(<span class="number">16</span>+<span class="number">10</span>));</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">    <span class="comment">/*初始化*/</span></span></div><div class="line"><span class="actionscript">    <span class="keyword">new</span> PieChart().init(data);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="canvas实现刮刮乐"><a href="#canvas实现刮刮乐" class="headerlink" title="canvas实现刮刮乐"></a>canvas实现刮刮乐</h3><p><b>请点击查看效果图</b><a target="_blank" href="/assets/demo/test/guaguale.html">&nbsp;&nbsp;&nbsp;demo</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">            body&#123;</span></div><div class="line"><span class="undefined">                margin: 0;</span></div><div class="line"><span class="undefined">                padding: 0;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">            canvas &#123;</span></div><div class="line"><span class="css">                <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">                display: block;</span></div><div class="line"><span class="undefined">                margin: 50px auto;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">height</span>=<span class="string">"400"</span> <span class="attr">width</span>=<span class="string">"600"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span></div><div class="line"><span class="actionscript">    img.onload = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> imgStrokeStyle = ctx.createPattern(img,<span class="string">'no-repeat'</span>);</span></div><div class="line"><span class="actionscript">        <span class="comment">/*图片填充方案*/</span></span></div><div class="line"><span class="undefined">        ctx.strokeStyle = imgStrokeStyle;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        ctx.lineWidth = 25;</span></div><div class="line"><span class="actionscript">        ctx.lineCap = <span class="string">'round'</span>;</span></div><div class="line"><span class="actionscript">        ctx.lineJoin = <span class="string">'round'</span>;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> isMouseDown = <span class="literal">false</span>;</span></div><div class="line"><span class="actionscript">        ctx.canvas.addEventListener(<span class="string">'mousedown'</span>,<span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">            isMouseDown = <span class="literal">true</span>;</span></div><div class="line"><span class="actionscript">            <span class="comment">/*起始点*/</span></span></div><div class="line"><span class="undefined">            ctx.moveTo(e.clientX - ctx.canvas.offsetLeft,</span></div><div class="line"><span class="undefined">            e.clientY - ctx.canvas.offsetTop);</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="actionscript">        ctx.canvas.addEventListener(<span class="string">'mousemove'</span>,<span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">            <span class="keyword">if</span>(isMouseDown)&#123;</span></div><div class="line"><span class="actionscript">                <span class="comment">/*绘制*/</span></span></div><div class="line"><span class="undefined">                ctx.lineTo(e.clientX - ctx.canvas.offsetLeft,</span></div><div class="line"><span class="undefined">            e.clientY - ctx.canvas.offsetTop);</span></div><div class="line"><span class="undefined">                ctx.stroke();</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="actionscript">        ctx.canvas.addEventListener(<span class="string">'mouseup'</span>,<span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">            isMouseDown = <span class="literal">false</span>;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    img.src = <span class="string">'images/05.jpg'</span>;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="canvas实现人物来回走动"><a href="#canvas实现人物来回走动" class="headerlink" title="canvas实现人物来回走动"></a>canvas实现人物来回走动</h3><p><b>请点击查看效果图</b><a target="_blank" href="/assets/demo/test/person1.html">&nbsp;&nbsp;&nbsp;demo</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        canvas &#123;</span></div><div class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="css">    <span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</span></div><div class="line"><span class="css">    <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">height</span>=<span class="string">"400"</span> <span class="attr">width</span>=<span class="string">"600"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">    <span class="comment">/*绘制图片*/</span></span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span></div><div class="line"><span class="actionscript">    image.onload = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*图片的宽高 决定人物大小*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> imageWidth = image.width;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> imageHeight = image.height;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*确定人物大小*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> perWidth = imageWidth / <span class="number">4</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> perHeight = imageHeight / <span class="number">4</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*画布尺寸*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> width = ctx.canvas.width;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> height = ctx.canvas.height;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*起始绘制位置*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> startX = width / <span class="number">2</span> - perWidth / <span class="number">2</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> startY = height / <span class="number">2</span> - perHeight / <span class="number">2</span>;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">        <span class="comment">/*步伐的数量*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> step = <span class="number">0</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*步伐的大小*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> stepSize = <span class="number">10</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*方向  1 左  2 右 */</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> direction = <span class="number">1</span>;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">        <span class="comment">/*帧动画*/</span></span></div><div class="line"><span class="actionscript">        <span class="comment">/*索引*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> index = <span class="number">0</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*默认渲染左边*/</span></span></div><div class="line"><span class="undefined">        ctx.drawImage(image, 0, perHeight, perWidth, perHeight, startX, startY, perWidth, perHeight);</span></div><div class="line"><span class="actionscript">        setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="undefined">            index++;</span></div><div class="line"><span class="actionscript">            <span class="keyword">if</span> (index &gt; <span class="number">3</span>) &#123;</span></div><div class="line"><span class="undefined">                index = 0;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="actionscript">            <span class="comment">/*清除上一次的绘制*/</span></span></div><div class="line"><span class="undefined">            ctx.clearRect(0, 0, width, height);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">            <span class="comment">/*需要方向的判断*/</span></span></div><div class="line"><span class="actionscript">            <span class="keyword">if</span> (direction == <span class="number">1</span>) &#123;</span></div><div class="line"><span class="undefined">                step--;</span></div><div class="line"><span class="actionscript">                <span class="comment">/*左*/</span></span></div><div class="line"><span class="actionscript">                <span class="keyword">if</span> ((startX + step * stepSize ) &lt;= <span class="number">0</span>) &#123;</span></div><div class="line"><span class="undefined">                    direction = 2;</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></div><div class="line"><span class="undefined">                step++;</span></div><div class="line"><span class="actionscript">                <span class="comment">/*右*/</span></span></div><div class="line"><span class="actionscript">                <span class="keyword">if</span> ((startX + step * stepSize ) &gt;= (width - perWidth)) &#123;</span></div><div class="line"><span class="undefined">                    direction = 1;</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">            <span class="comment">/*绘制图片*/</span></span></div><div class="line"><span class="undefined">            ctx.drawImage(image, index * perWidth, direction * perHeight, perWidth, perHeight, startX + step * stepSize, startY, perWidth, perHeight);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        &#125;, 100);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    image.src = <span class="string">'images/03.png'</span>;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="canvas方向键控制人物走动"><a href="#canvas方向键控制人物走动" class="headerlink" title="canvas方向键控制人物走动"></a>canvas方向键控制人物走动</h3><p><b>请点击查看效果图</b><a target="_blank" href="/assets/demo/test/person2.html">&nbsp;&nbsp;&nbsp;demo</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        canvas &#123;</span></div><div class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="css">    <span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</span></div><div class="line"><span class="css">    <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">height</span>=<span class="string">"400"</span> <span class="attr">width</span>=<span class="string">"600"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line"><span class="comment">1.加载图片</span></div><div class="line"><span class="comment">2.监听事件</span></div><div class="line"><span class="comment">3.绘制图片</span></div><div class="line"><span class="comment">--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*画笔*/</span></span></div><div class="line"><span class="javascript">        <span class="keyword">this</span>.ctx = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span></div><div class="line"><span class="actionscript">        <span class="comment">/*步伐大小*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.stepSize = <span class="number">10</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*图片地址*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.src = <span class="string">'images/04.png'</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*画布的尺寸*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.width = <span class="keyword">this</span>.ctx.canvas.width;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.height = <span class="keyword">this</span>.ctx.canvas.height;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*画布中心位置*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.x0 = <span class="keyword">this</span>.width/<span class="number">2</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.y0 = <span class="keyword">this</span>.height/<span class="number">2</span>;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    Person.prototype.init = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.loadImage(<span class="function"><span class="keyword">function</span> <span class="params">(image)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">            <span class="comment">/*获取图片相关属性  计算人物尺寸 起始坐标*/</span></span></div><div class="line"><span class="undefined">            that.perWidth = image.width/4;</span></div><div class="line"><span class="undefined">            that.perHeight = image.height/4;</span></div><div class="line"><span class="undefined">            that.startX = that.x0 - that.perWidth/2;</span></div><div class="line"><span class="undefined">            that.startY = that.y0 - that.perHeight/2;</span></div><div class="line"><span class="actionscript">            <span class="comment">/*业务*/</span></span></div><div class="line"><span class="undefined">            that.bindEvent(image);</span></div><div class="line"><span class="actionscript">            <span class="comment">/*初始化  默认的图*/</span></span></div><div class="line"><span class="undefined">            that.drawImg(image,0,0,0,0);</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*加载图片*/</span></span></div><div class="line"><span class="actionscript">    Person.prototype.loadImage = <span class="function"><span class="keyword">function</span> <span class="params">(callback)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span></div><div class="line"><span class="actionscript">        image.onload = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="actionscript">            <span class="comment">/*可以使用图片*/</span></span></div><div class="line"><span class="undefined">            callback &amp;&amp; callback(image);</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="actionscript">        image.src = <span class="keyword">this</span>.src;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*监听事件*/</span></span></div><div class="line"><span class="actionscript">    Person.prototype.bindEvent = <span class="function"><span class="keyword">function</span> <span class="params">(image)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*方向  0下 1左 2右 3上*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> direction = <span class="number">0</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*步数*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> stepX = <span class="number">0</span>;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> stepY = <span class="number">0</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*图片索引*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> index = <span class="number">0</span>;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*监听按键*/</span></span></div><div class="line"><span class="javascript">        <span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></div><div class="line"><span class="actionscript">            <span class="comment">/*怎么知道按的什么键  keyCode*/</span></span></div><div class="line"><span class="actionscript">            <span class="comment">/* 37 左  38 上  39 右  40 下 */</span></span></div><div class="line"><span class="actionscript">            <span class="keyword">switch</span> (e.keyCode)&#123;</span></div><div class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="number">37</span>:</span></div><div class="line"><span class="actionscript">                    <span class="comment">/*左*/</span></span></div><div class="line"><span class="undefined">                    direction = 1;</span></div><div class="line"><span class="undefined">                    stepX --;</span></div><div class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></div><div class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="number">38</span>:</span></div><div class="line"><span class="actionscript">                    <span class="comment">/*上*/</span></span></div><div class="line"><span class="undefined">                    direction = 3;</span></div><div class="line"><span class="undefined">                    stepY --;</span></div><div class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></div><div class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="number">39</span>:</span></div><div class="line"><span class="actionscript">                    <span class="comment">/*右*/</span></span></div><div class="line"><span class="undefined">                    direction = 2;</span></div><div class="line"><span class="undefined">                    stepX ++;</span></div><div class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></div><div class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="number">40</span>:</span></div><div class="line"><span class="actionscript">                    <span class="comment">/*下*/</span></span></div><div class="line"><span class="undefined">                    direction = 0;</span></div><div class="line"><span class="undefined">                    stepY ++;</span></div><div class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="actionscript">            <span class="comment">/*索引的变化*/</span></span></div><div class="line"><span class="undefined">            index ++;</span></div><div class="line"><span class="actionscript">            <span class="keyword">if</span>(index &gt; <span class="number">3</span>)&#123;</span></div><div class="line"><span class="undefined">                index = 0;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">            that.drawImg(image,index,direction,stepX,stepY);</span></div><div class="line"><span class="undefined">        &#125;)</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="actionscript">    <span class="comment">/*绘制图片*/</span></span></div><div class="line"><span class="actionscript">    Person.prototype.drawImg = <span class="function"><span class="keyword">function</span> <span class="params">(image,index,direction,stepX,stepY)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="comment">/*清空画布*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.width,<span class="keyword">this</span>.height);</span></div><div class="line"><span class="actionscript">        <span class="comment">/*图片绘制*/</span></span></div><div class="line"><span class="actionscript">        <span class="keyword">this</span>.ctx.drawImage(</span></div><div class="line"><span class="undefined">            image,</span></div><div class="line"><span class="actionscript">            index*<span class="keyword">this</span>.perWidth,</span></div><div class="line"><span class="actionscript">            direction*<span class="keyword">this</span>.perHeight,</span></div><div class="line"><span class="actionscript">            <span class="keyword">this</span>.perWidth,</span></div><div class="line"><span class="actionscript">            <span class="keyword">this</span>.perHeight,</span></div><div class="line"><span class="actionscript">            <span class="keyword">this</span>.startX + stepX * <span class="keyword">this</span>.stepSize,</span></div><div class="line"><span class="actionscript">            <span class="keyword">this</span>.startY + stepY * <span class="keyword">this</span>.stepSize,</span></div><div class="line"><span class="actionscript">            <span class="keyword">this</span>.perWidth,</span></div><div class="line"><span class="actionscript">            <span class="keyword">this</span>.perHeight);</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">    <span class="comment">/*初始化*/</span></span></div><div class="line"><span class="actionscript">    <span class="keyword">new</span> Person().init();</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><blockquote><p>下篇将介绍到一款小鸟游戏</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=857896&amp;auto=0&amp;height=66&quot; style=&quot;margin-left: -10px;&quot;&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
&lt;p&gt;前言：&lt;br&gt;canvas实现折线图&lt;br&gt;canvas实现饼状图&lt;br&gt;canvas实现刮刮乐&lt;br&gt;canvas实现人物左右移动&lt;br&gt;canvas实现方向键控制人物行走&lt;br&gt;&lt;b style=&quot;color:hotpink&quot;&gt;代码有点多哦,看累了就听会音乐(&lt;em&gt;^__^&lt;/em&gt;)&lt;/b&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://haotengfei.oschina.io/tags/js/"/>
    
      <category term="canvas" scheme="http://haotengfei.oschina.io/tags/canvas/"/>
    
      <category term="oop" scheme="http://haotengfei.oschina.io/tags/oop/"/>
    
      <category term="demo" scheme="http://haotengfei.oschina.io/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>canvas结合面向对象（上）</title>
    <link href="http://haotengfei.oschina.io/2017/08/02/canvas_oop/"/>
    <id>http://haotengfei.oschina.io/2017/08/02/canvas_oop/</id>
    <published>2017-08-02T05:02:00.000Z</published>
    <updated>2017-09-10T10:00:54.161Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>canvas 最早由Apple引入WebKit,用于Mac OS X 的 Dashboard,后来又在Safari和Google Chrome被实现。<br>基于 Gecko 1.8的浏览器,比如 Firefox 1.5, 同样支持这个元素。<br>&lt;canvas&gt; 元素是WhatWG Web applications 1.0规范的一部分,也包含于HTML 5中。  </p></blockquote><h4 id="什么是Canvas？"><a href="#什么是Canvas？" class="headerlink" title="什么是Canvas？"></a>什么是Canvas？</h4><p>HTML5 的 canvas 元素使用 JavaScript 在网页上绘制图像。<br>画布是一个矩形区域，您可以控制其每一像素。<br>canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。<br><a id="more"></a></p><h4 id="创建Canvas元素"><a href="#创建Canvas元素" class="headerlink" title="创建Canvas元素"></a>创建Canvas元素</h4><p>向 HTML5 页面添加 canvas 元素。<br>规定元素的 id、宽度和高度：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"myCanvas"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div></pre></td></tr></table></figure></p><h4 id="Canvas坐标系"><a href="#Canvas坐标系" class="headerlink" title="Canvas坐标系"></a>Canvas坐标系</h4><p><img src="http://www.itnose.net/img/20160708/10765212.png" alt=""></p><h4 id="通过JavaScript来绘制"><a href="#通过JavaScript来绘制" class="headerlink" title="通过JavaScript来绘制"></a>通过JavaScript来绘制</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*获取元素*/</span></div><div class="line"><span class="keyword">var</span> myCanvas = <span class="built_in">document</span>.querySelector(<span class="string">'#myCanvas'</span>);</div><div class="line"><span class="comment">/*获取绘图工具*/</span></div><div class="line"><span class="keyword">var</span> context = myCanvas.getContext(<span class="string">'2d'</span>);</div><div class="line"><span class="comment">/*设置绘图的起始位置*/</span></div><div class="line">context.moveTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line"><span class="comment">/*绘制路径*/</span></div><div class="line">context.lineTo(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line"><span class="comment">/*描边*/</span></div><div class="line">context.stroke();</div></pre></td></tr></table></figure><h3 id="Canvas的基本使用"><a href="#Canvas的基本使用" class="headerlink" title="Canvas的基本使用"></a>Canvas的基本使用</h3><h4 id="图形绘制"><a href="#图形绘制" class="headerlink" title="图形绘制"></a>图形绘制</h4><p>需要理解些概念：  </p><ul><li>路径的概念</li><li>路径的绘制<ul><li>描边 stroke()  </li><li>填充 fill()<br><img src="http://i03.pic.sogou.com/dde45ed0aaa40f4c" alt="">  </li></ul></li><li>闭合路径<ul><li>手动闭合</li><li>程序闭合 closePath()</li></ul></li><li>填充规则(非零环绕)<br><img src="http://i03.pic.sogou.com/df57530a1a90dfe2" alt=""></li><li>开启新的路径 beginPath()</li></ul><h4 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h4><ul><li>画笔的状态<ul><li>lineWidth 线宽，默认1px</li><li>lineCap 线末端类型：(butt默认)、round、square </li><li>lineJoin 相交线的拐点 miter(默认)、round、bevel</li><li>strokeStyle 线的颜色</li><li>fillStyle 填充颜色</li><li>setLineDash() 设置虚线</li><li>getLineDash() 获取虚线宽度集合</li><li>lineDashOffset 设置虚线偏移量（负值向右偏移）</li></ul></li></ul><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul><li><a href="http://www.w3school.com.cn/tags/html_ref_canvas.asp" target="_blank" rel="external">w3school</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial" target="_blank" rel="external">Canvas_API</a></li></ul><h3 id="Canvas图形绘制"><a href="#Canvas图形绘制" class="headerlink" title="Canvas图形绘制"></a>Canvas图形绘制</h3><h4 id="矩形绘制"><a href="#矩形绘制" class="headerlink" title="矩形绘制"></a>矩形绘制</h4><ul><li>rect(x,y,w,h) 没有独立路径</li><li>strokeRect(x,y,w,h) 有独立路径，不影响别的绘制</li><li>fillRect(x,y,w,h) 有独立路径，不影响别的绘制</li><li>clearRect(x,y,w,h) 擦除矩形区域</li></ul><h4 id="圆弧绘制"><a href="#圆弧绘制" class="headerlink" title="圆弧绘制"></a>圆弧绘制</h4><ul><li>弧度概念</li><li>arc()<ul><li>x 圆心横坐标</li><li>y 圆心纵坐标</li><li>r 半径</li><li>startAngle 开始角度</li><li>endAngle 结束角度</li><li>anticlockwise 是否逆时针方向绘制（默认false表示顺时针；true表示逆时针）</li></ul></li></ul><h4 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h4><ul><li>ctx.font = ‘微软雅黑’ 设置字体</li><li>strokeText()</li><li>fillText(text,x,y,maxWidth)<ul><li>text 要绘制的文本</li><li>x,y 文本绘制的坐标（文本左下角）</li><li>maxWidth 设置文本最大宽度，可选参数</li></ul></li><li>ctx.textAlign文本水平对齐方式，相对绘制坐标来说的<ul><li>left</li><li>center</li><li>right</li><li>start 默认</li><li>end</li><li>direction属性css(rtl ltr) start和end于此相关<ul><li>如果是ltr,start和left表现一致</li><li>如果是rtl,start和right表现一致</li></ul></li></ul></li><li>ctx.textBaseline 设置基线（垂直对齐方式  ）<ul><li>top 文本的基线处于文本的正上方，并且有一段距离</li><li>middle 文本的基线处于文本的正中间</li><li>bottom 文本的基线处于文本的证下方，并且有一段距离</li><li>hanging 文本的基线处于文本的正上方，并且和文本粘合</li><li>alphabetic 默认值，基线处于文本的下方，并且穿过文字</li><li>ideographic 和bottom相似，但是不一样</li></ul></li><li>measureText() 获取文本宽度obj.width</li></ul><h3 id="做动画"><a href="#做动画" class="headerlink" title="做动画"></a>做动画</h3><h4 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h4><ul><li>drawImage()<ul><li>三个参数drawImage(img,x,y)<ul><li>img 图片对象、canvas对象、video对象</li><li>x,y 图片绘制的左上角</li></ul></li><li>五个参数drawImage(img,x,y,w,h)<ul><li>img 图片对象、canvas对象、video对象</li><li>x,y 图片绘制的左上角</li><li>w,h 图片绘制尺寸设置(图片缩放，不是截取)</li></ul></li><li>九个参数drawImage(img,x,y,w,h,x1,y1,w1,h1)<ul><li>img 图片对象、canvas对象、video对象</li><li>x,y,w,h 图片中的一个矩形区域</li><li>x1,y1,w1,h1 画布中的一个矩形区域</li></ul></li></ul></li></ul><h4 id="序列帧动画"><a href="#序列帧动画" class="headerlink" title="序列帧动画"></a>序列帧动画</h4><ul><li>绘制精灵图</li><li>动起来</li><li>控制边界</li><li>键盘控制</li></ul><h4 id="坐标变换"><a href="#坐标变换" class="headerlink" title="坐标变换"></a>坐标变换</h4><ul><li>平移 移动画布的原点<ul><li>translate(x,y) 参数表示移动目标点的坐标</li></ul></li><li>缩放<ul><li>scale(x,y) 参数表示宽高的缩放比例</li></ul></li><li>旋转<ul><li>rotate(angle) 参数表示旋转角度</li></ul></li></ul><h4 id="路径判断"><a href="#路径判断" class="headerlink" title="路径判断"></a>路径判断</h4><ul><li>isPointInPath()</li><li>isPointInStroke()</li></ul><blockquote><p>后续文章将介绍canvas的具体使用</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;canvas 最早由Apple引入WebKit,用于Mac OS X 的 Dashboard,后来又在Safari和Google Chrome被实现。&lt;br&gt;基于 Gecko 1.8的浏览器,比如 Firefox 1.5, 同样支持这个元素。&lt;br&gt;&amp;lt;canvas&amp;gt; 元素是WhatWG Web applications 1.0规范的一部分,也包含于HTML 5中。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;什么是Canvas？&quot;&gt;&lt;a href=&quot;#什么是Canvas？&quot; class=&quot;headerlink&quot; title=&quot;什么是Canvas？&quot;&gt;&lt;/a&gt;什么是Canvas？&lt;/h4&gt;&lt;p&gt;HTML5 的 canvas 元素使用 JavaScript 在网页上绘制图像。&lt;br&gt;画布是一个矩形区域，您可以控制其每一像素。&lt;br&gt;canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://haotengfei.oschina.io/tags/js/"/>
    
      <category term="canvas" scheme="http://haotengfei.oschina.io/tags/canvas/"/>
    
      <category term="oop" scheme="http://haotengfei.oschina.io/tags/oop/"/>
    
  </entry>
  
  <entry>
    <title>CSS3-demo</title>
    <link href="http://haotengfei.oschina.io/2017/01/05/case_css3/"/>
    <id>http://haotengfei.oschina.io/2017/01/05/case_css3/</id>
    <published>2017-01-05T11:15:00.000Z</published>
    <updated>2017-09-10T10:53:26.938Z</updated>
    
    <content type="html"><![CDATA[<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=497745338&auto=0&height=66"></iframe></p><blockquote><p>最近在闲暇之余，折腾了几个关于css3的小demo</p><ul><li>3D-相册</li><li>小题莫</li><li>美女放大镜</li></ul></blockquote><a id="more"></a><h3 id="3D-相册"><a href="#3D-相册" class="headerlink" title="3D-相册"></a>3D-相册</h3><p><b>请点击查看效果</b><a target="_blank" href="/assets/demo/test/3D-photo.html">&nbsp;&nbsp;&nbsp;demo</a></p><h3 id="小题莫"><a href="#小题莫" class="headerlink" title="小题莫"></a>小题莫</h3><p><b>请点击查看效果</b><a target="_blank" href="/assets/demo/test/Timor.html">&nbsp;&nbsp;&nbsp;demo</a></p><h3 id="美女放大镜"><a href="#美女放大镜" class="headerlink" title="美女放大镜"></a>美女放大镜</h3><p><b>请点击查看效果</b><a target="_blank" href="/assets/demo/test/fangda.html">&nbsp;&nbsp;&nbsp;demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=497745338&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最近在闲暇之余，折腾了几个关于css3的小demo&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3D-相册&lt;/li&gt;
&lt;li&gt;小题莫&lt;/li&gt;
&lt;li&gt;美女放大镜&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="css3" scheme="http://haotengfei.oschina.io/tags/css3/"/>
    
      <category term="demo" scheme="http://haotengfei.oschina.io/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>artTemplate</title>
    <link href="http://haotengfei.oschina.io/2016/12/10/artTemplate/"/>
    <id>http://haotengfei.oschina.io/2016/12/10/artTemplate/</id>
    <published>2016-12-10T02:36:00.000Z</published>
    <updated>2017-09-10T09:57:16.085Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=139774&auto=0&height=66"></iframe><h3 id="模版引擎"><a href="#模版引擎" class="headerlink" title="模版引擎"></a>模版引擎</h3><p>作用：渲染页面的工具<br>渲染：数据转换成html格式的代码，显示在页面</p><h3 id="有哪些常用的模版引擎"><a href="#有哪些常用的模版引擎" class="headerlink" title="有哪些常用的模版引擎"></a>有哪些常用的模版引擎</h3><p>国外：handlebars mustache<br>国内：artTemplate(性能好) baiduTemplate velocity<br><a id="more"></a></p><h3 id="使用artTemplate"><a href="#使用artTemplate" class="headerlink" title="使用artTemplate"></a>使用artTemplate</h3><p>1.准备数据<br>2.准备模版<br>3.数据和模版绑定—&gt;生成html格式的代码<br>4.显示页面</p><p>artTemplate：js工具，js插件<br>下载：<a href="https://github.com/aui/art-template" target="_blank" rel="external">https://github.com/aui/art-template</a><br>template-native.js  原生语法<br>template.js 简洁语法</p><h4 id="artTemplate-简洁语法模板"><a href="#artTemplate-简洁语法模板" class="headerlink" title="artTemplate 简洁语法模板"></a>artTemplate 简洁语法模板</h4><p>在页面中引用模板引擎：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"dist/template.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure><p>下载(<a href="https://raw.github.com/aui/artTemplate/master/dist/template.js" target="_blank" rel="external">https://raw.github.com/aui/artTemplate/master/dist/template.js</a>)</p><p>编写模版<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">type</span>=<span class="string">"text/html"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;title&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></div><div class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></div><div class="line"><span class="actionscript">    &#123;&#123;<span class="keyword">each</span> list <span class="keyword">as</span> value i&#125;&#125;</span></div><div class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>索引 </span><span class="template-variable">&#123;&#123;i + 1&#125;&#125;</span><span class="xml"> ：</span><span class="template-variable">&#123;&#123;value&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></div><div class="line"><span class="handlebars"><span class="xml">    </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span><span class="xml"></span></span></div><div class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><p>渲染数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = &#123;</div><div class="line">    title: <span class="string">'标签'</span>,</div><div class="line">    list: [<span class="string">'文艺'</span>, <span class="string">'博客'</span>, <span class="string">'摄影'</span>, <span class="string">'电影'</span>, <span class="string">'民谣'</span>, <span class="string">'旅行'</span>, <span class="string">'吉他'</span>]</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> html = template(<span class="string">'test'</span>, data);</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).innerHTML = html;</div></pre></td></tr></table></figure></p><p>简洁语法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;if admin&#125;&#125;</div><div class="line">    &#123;&#123;include 'admin_content'&#125;&#125;</div><div class="line"></div><div class="line">    &#123;&#123;each list&#125;&#125;</div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;$index&#125;&#125;. &#123;&#123;$value.user&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    &#123;&#123;/each&#125;&#125;</div><div class="line">&#123;&#123;/if&#125;&#125;</div></pre></td></tr></table></figure></p><h4 id="artTemplate-原生-js-模板语法版"><a href="#artTemplate-原生-js-模板语法版" class="headerlink" title="artTemplate 原生 js 模板语法版"></a>artTemplate 原生 js 模板语法版</h4><p><b>使用</b></p><p>在页面中引用模板引擎：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"dist/template-native.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p><p>下载(<a href="https://raw.github.com/aui/artTemplate/master/dist/template-native.js" target="_blank" rel="external">https://raw.github.com/aui/artTemplate/master/dist/template-native.js</a>)</p><p><b>表达式</b></p><p>&lt;% 与 %&gt; 符号包裹起来的语句则为模板的逻辑表达式。</p><p><b>输出表达式</b></p><p>对内容编码输出：<br><figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby">content</span><span class="xml"><span class="tag">%&gt;</span></span></div></pre></td></tr></table></figure></p><p>不编码输出：<br><figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"><span class="comment">#content</span></span><span class="xml"><span class="tag">%&gt;</span></span></div></pre></td></tr></table></figure></p><p>编码可以防止数据中含有 HTML 字符串，避免引起 XSS 攻击。</p><p>逻辑</p><p>支持使用 js 原生语法<br><figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby">title</span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; list.length; i ++) &#123;</span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>条目内容 <span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby">i + <span class="number">1</span></span><span class="xml"><span class="tag">%&gt;</span> ：<span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby">list[i]</span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">&#125;</span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></div></pre></td></tr></table></figure></p><p>模板不能访问全局对象，公用的方法请参见文档 辅助方法 章节 模板包含表达式</p><p>用于嵌入子模板。<br><figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">include</span>(<span class="string">'template_name'</span>) </span><span class="xml"><span class="tag">%&gt;</span></span></div></pre></td></tr></table></figure></p><p>子模板默认共享当前数据，亦可以指定数据：<br><figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">include</span>(<span class="string">'template_name'</span>, news_list) </span><span class="xml"><span class="tag">%&gt;</span></span></div></pre></td></tr></table></figure></p><p>辅助方法</p><p>使用template.helper(name, callback)注册公用辅助方法，例如一个基本的 UBB 替换方法：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">template.helper(<span class="string">'$ubb2html'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(content)</span> </span>&#123;</div><div class="line">    <span class="comment">// 处理字符串...</span></div><div class="line">    <span class="keyword">return</span> content;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>模板中使用的方式：<br><figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> $ubb2html(content) </span><span class="xml"><span class="tag">%&gt;</span></span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=139774&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;模版引擎&quot;&gt;&lt;a href=&quot;#模版引擎&quot; class=&quot;headerlink&quot; title=&quot;模版引擎&quot;&gt;&lt;/a&gt;模版引擎&lt;/h3&gt;&lt;p&gt;作用：渲染页面的工具&lt;br&gt;渲染：数据转换成html格式的代码，显示在页面&lt;/p&gt;
&lt;h3 id=&quot;有哪些常用的模版引擎&quot;&gt;&lt;a href=&quot;#有哪些常用的模版引擎&quot; class=&quot;headerlink&quot; title=&quot;有哪些常用的模版引擎&quot;&gt;&lt;/a&gt;有哪些常用的模版引擎&lt;/h3&gt;&lt;p&gt;国外：handlebars mustache&lt;br&gt;国内：artTemplate(性能好) baiduTemplate velocity&lt;br&gt;
    
    </summary>
    
    
      <category term="notes" scheme="http://haotengfei.oschina.io/tags/notes/"/>
    
      <category term="summary" scheme="http://haotengfei.oschina.io/tags/summary/"/>
    
      <category term="template" scheme="http://haotengfei.oschina.io/tags/template/"/>
    
  </entry>
  
  <entry>
    <title>OOP-snake_game</title>
    <link href="http://haotengfei.oschina.io/2016/09/03/snake/"/>
    <id>http://haotengfei.oschina.io/2016/09/03/snake/</id>
    <published>2016-09-03T02:22:00.000Z</published>
    <updated>2017-09-11T05:42:56.744Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于hexo的一些限制，每次传demo就头疼，具体的代码已经传到我的github上，此外还有一个是用二维数组实现的贪吃蛇游戏，也在我的github上。</p><ul><li>github上传的关于oop实现贪吃蛇游戏中的js代码，还用了sea.js模块化管理，虽然sea.js已经过时了，但是思想还是那个思想。<br><b>请点击查看效果图</b><a target="_blank" href="/assets/demo/test/snake_game.html">&nbsp;&nbsp;&nbsp;demo</a></li></ul></blockquote><h4 id="案例目标"><a href="#案例目标" class="headerlink" title="案例目标"></a>案例目标</h4><p>游戏的目的是用来体会js高级语法的使用 不需要具备抽象对象的能力，使用面向对象的方式分析问题，需要一个漫长的过程。<br><a id="more"></a></p><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><h4 id="搭建页面"><a href="#搭建页面" class="headerlink" title="搭建页面"></a>搭建页面</h4><p>放一个容器盛放游戏场景 div#map，设置样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#map</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="分析对象"><a href="#分析对象" class="headerlink" title="分析对象"></a>分析对象</h4><ul><li>游戏对象</li><li>蛇对象</li><li>食物对象</li></ul><h4 id="创建食物对象"><a href="#创建食物对象" class="headerlink" title="创建食物对象"></a>创建食物对象</h4><ul><li><p>Food</p><ul><li><p>属性</p><ul><li>x       </li><li>y</li><li>width</li><li>height</li><li>color       </li></ul></li><li><p>方法</p><ul><li>render       随机创建一个食物对象，并输出到map上</li></ul></li></ul></li><li><p>创建Food的构造函数，并设置属性</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> position = <span class="string">'absolute'</span>;</div><div class="line"><span class="keyword">var</span> elements = [];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Food</span>(<span class="params">x, y, width, height, color</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = x || <span class="number">0</span>;</div><div class="line">  <span class="keyword">this</span>.y = y || <span class="number">0</span>;</div><div class="line">  <span class="comment">// 食物的宽度和高度(像素)</span></div><div class="line">  <span class="keyword">this</span>.width = width || <span class="number">20</span>;</div><div class="line">  <span class="keyword">this</span>.height = height || <span class="number">20</span>;</div><div class="line">  <span class="comment">// 食物的颜色</span></div><div class="line">  <span class="keyword">this</span>.color = color || <span class="string">'green'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>通过原型设置render方法，实现随机产生食物对象，并渲染到map上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Food.prototype.render = <span class="function"><span class="keyword">function</span> (<span class="params">map</span>) </span>&#123;</div><div class="line">  <span class="comment">// 随机食物的位置，map.宽度/food.宽度，总共有多少分food的宽度，随机一下。然后再乘以food的宽度</span></div><div class="line">  <span class="keyword">this</span>.x = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * map.offsetWidth / <span class="keyword">this</span>.width) * <span class="keyword">this</span>.width;</div><div class="line">  <span class="keyword">this</span>.y = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * map.offsetHeight / <span class="keyword">this</span>.height) * <span class="keyword">this</span>.height;</div><div class="line"></div><div class="line">  <span class="comment">// 动态创建食物对应的div</span></div><div class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">  map.appendChild(div);</div><div class="line">  div.style.position = position;</div><div class="line">  div.style.left = <span class="keyword">this</span>.x + <span class="string">'px'</span>;</div><div class="line">  div.style.top = <span class="keyword">this</span>.y + <span class="string">'px'</span>;</div><div class="line">  div.style.width = <span class="keyword">this</span>.width + <span class="string">'px'</span>;</div><div class="line">  div.style.height = <span class="keyword">this</span>.height + <span class="string">'px'</span>;</div><div class="line">  div.style.backgroundColor = <span class="keyword">this</span>.color;</div><div class="line">  elements.push(div);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>通过自调用函数，进行封装，通过window暴露Food对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.Food = Food;</div></pre></td></tr></table></figure><h4 id="创建蛇对象"><a href="#创建蛇对象" class="headerlink" title="创建蛇对象"></a>创建蛇对象</h4><ul><li><p>Snake</p></li><li><p>属性</p><ul><li>width    蛇节的宽度 默认20</li><li>height   蛇节的高度 默认20</li><li>body     数组，蛇的头部和身体，第一个位置是蛇头</li><li>direction    蛇运动的方向  默认right  可以是 left  top bottom</li></ul></li><li><p>方法</p><ul><li>render  把蛇渲染到map上</li></ul></li><li><p>Snake构造函数</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> position = <span class="string">'absolute'</span>;</div><div class="line"><span class="keyword">var</span> elements = [];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Snake</span>(<span class="params">width, height, direction</span>) </span>&#123;</div><div class="line">  <span class="comment">// 设置每一个蛇节的宽度</span></div><div class="line">  <span class="keyword">this</span>.width = width || <span class="number">20</span>;</div><div class="line">  <span class="keyword">this</span>.height = height || <span class="number">20</span>;</div><div class="line">  <span class="comment">// 蛇的每一部分, 第一部分是蛇头</span></div><div class="line">  <span class="keyword">this</span>.body = [</div><div class="line">    &#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">color</span>: <span class="string">'red'</span>&#125;,</div><div class="line">    &#123;<span class="attr">x</span>: <span class="number">2</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">color</span>: <span class="string">'red'</span>&#125;,</div><div class="line">    &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">color</span>: <span class="string">'red'</span>&#125;</div><div class="line">  ];</div><div class="line">  <span class="keyword">this</span>.direction = direction || <span class="string">'right'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>render方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Snake.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params">map</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.body.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> obj = <span class="keyword">this</span>.body[i];</div><div class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">    map.appendChild(div);</div><div class="line">    div.style.left = obj.x * <span class="keyword">this</span>.width + <span class="string">'px'</span>;</div><div class="line">    div.style.top = obj.y * <span class="keyword">this</span>.height + <span class="string">'px'</span>;</div><div class="line">    div.style.position = position;</div><div class="line">    div.style.backgroundColor = obj.color;</div><div class="line">    div.style.width = <span class="keyword">this</span>.width + <span class="string">'px'</span>;</div><div class="line">    div.style.height = <span class="keyword">this</span>.height + <span class="string">'px'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在自调用函数中暴露Snake对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.Snake = Snake;</div></pre></td></tr></table></figure><h4 id="创建游戏对象"><a href="#创建游戏对象" class="headerlink" title="创建游戏对象"></a>创建游戏对象</h4><p>游戏对象，用来管理游戏中的所有对象和开始游戏</p><ul><li><p>Game</p><ul><li><p>属性</p><ul><li><p>food</p></li><li><p>snake</p></li><li><p>map</p></li></ul></li><li><p>方法</p><ul><li>start            开始游戏（绘制所有游戏对象）</li></ul></li></ul></li></ul><ul><li>构造函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Game</span>(<span class="params">map</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.food = <span class="keyword">new</span> Food();</div><div class="line">  <span class="keyword">this</span>.snake = <span class="keyword">new</span> Snake();</div><div class="line">  <span class="keyword">this</span>.map = map;</div><div class="line">&#125;</div><div class="line"><span class="string">``</span><span class="string">`  </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">- 开始游戏，渲染食物对象和蛇对象</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">`</span><span class="string">``</span>js</div><div class="line">Game.prototype.start = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.food.render(<span class="keyword">this</span>.map);</div><div class="line">  <span class="keyword">this</span>.snake.render(<span class="keyword">this</span>.map);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="游戏的逻辑"><a href="#游戏的逻辑" class="headerlink" title="游戏的逻辑"></a>游戏的逻辑</h3><h4 id="写蛇的move方法"><a href="#写蛇的move方法" class="headerlink" title="写蛇的move方法"></a>写蛇的move方法</h4><ul><li>在蛇对象(snake.js)中，在Snake的原型上新增move方法</li></ul><ol><li>让蛇移动起来，把蛇身体的每一部分往前移动一下</li><li>蛇头部分根据不同的方向决定 往哪里移动</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Snake.prototype.move = <span class="function"><span class="keyword">function</span> (<span class="params">food, map</span>) </span>&#123;</div><div class="line">  <span class="comment">// 让蛇身体的每一部分往前移动一下</span></div><div class="line">  <span class="keyword">var</span> i = <span class="keyword">this</span>.body.length - <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span>(; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">    <span class="keyword">this</span>.body[i].x = <span class="keyword">this</span>.body[i - <span class="number">1</span>].x;</div><div class="line">    <span class="keyword">this</span>.body[i].y = <span class="keyword">this</span>.body[i - <span class="number">1</span>].y;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 根据移动的方向，决定蛇头如何处理</span></div><div class="line">  <span class="keyword">switch</span>(<span class="keyword">this</span>.direction) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'left'</span>: </div><div class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].x -= <span class="number">1</span>;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'right'</span>:</div><div class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].x += <span class="number">1</span>;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'top'</span>:</div><div class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].y -= <span class="number">1</span>;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'bottom'</span>:</div><div class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].y += <span class="number">1</span>;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在game中测试</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.snake.move(<span class="keyword">this</span>.food, <span class="keyword">this</span>.map);</div><div class="line"><span class="keyword">this</span>.snake.render(<span class="keyword">this</span>.map);</div></pre></td></tr></table></figure><h4 id="让蛇自己动起来"><a href="#让蛇自己动起来" class="headerlink" title="让蛇自己动起来"></a>让蛇自己动起来</h4><ul><li><p>私有方法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">什么是私有方法？</div><div class="line">  不能被外部访问的方法</div><div class="line">如何创建私有方法？</div><div class="line">  使用自调用函数包裹</div></pre></td></tr></table></figure></li><li><p>在game.js中 添加runSnake的私有方法，开启定时器调用蛇的move和render方法，让蛇动起来</p></li><li>判断蛇是否撞墙</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">runSnake</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> timerId = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.snake.move(<span class="keyword">this</span>.food, <span class="keyword">this</span>.map);</div><div class="line">    <span class="comment">// 在渲染前，删除之前的蛇</span></div><div class="line">    <span class="keyword">this</span>.snake.render(<span class="keyword">this</span>.map);</div><div class="line"></div><div class="line">    <span class="comment">// 判断蛇是否撞墙</span></div><div class="line">    <span class="keyword">var</span> maxX = <span class="keyword">this</span>.map.offsetWidth / <span class="keyword">this</span>.snake.width;</div><div class="line">    <span class="keyword">var</span> maxY = <span class="keyword">this</span>.map.offsetHeight / <span class="keyword">this</span>.snake.height;</div><div class="line">    <span class="keyword">var</span> headX = <span class="keyword">this</span>.snake.body[<span class="number">0</span>].x;</div><div class="line">    <span class="keyword">var</span> headY = <span class="keyword">this</span>.snake.body[<span class="number">0</span>].y;</div><div class="line">    <span class="keyword">if</span> (headX &lt; <span class="number">0</span> || headX &gt;= maxX) &#123;</div><div class="line">      clearInterval(timerId);</div><div class="line">      alert(<span class="string">'Game Over'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (headY &lt; <span class="number">0</span> || headY &gt;= maxY) &#123;</div><div class="line">      clearInterval(timerId);</div><div class="line">      alert(<span class="string">'Game Over'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;.bind(that), <span class="number">150</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在snake中添加删除蛇的私有方法，在render中调用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 删除渲染的蛇</span></div><div class="line">  <span class="keyword">var</span> i = elements.length - <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span>(; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">    <span class="comment">// 删除页面上渲染的蛇</span></div><div class="line">    elements[i].parentNode.removeChild(elements[i]);</div><div class="line">    <span class="comment">// 删除elements数组中的元素</span></div><div class="line">    elements.splice(i, <span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在game中通过键盘控制蛇的移动方向</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindKey</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (e.keyCode) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="number">37</span>:</div><div class="line">        <span class="comment">// left</span></div><div class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'left'</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">38</span>:</div><div class="line">        <span class="comment">// top</span></div><div class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'top'</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">39</span>:</div><div class="line">        <span class="comment">// right</span></div><div class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'right'</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">40</span>:</div><div class="line">        <span class="comment">// bottom</span></div><div class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'bottom'</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;.bind(that), <span class="literal">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在start方法中调用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bindKey();</div></pre></td></tr></table></figure><h4 id="判断蛇是否吃到食物"><a href="#判断蛇是否吃到食物" class="headerlink" title="判断蛇是否吃到食物"></a>判断蛇是否吃到食物</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在Snake的move方法中</span></div><div class="line"></div><div class="line"><span class="comment">// 在移动的过程中判断蛇是否吃到食物</span></div><div class="line"><span class="comment">// 如果蛇头和食物的位置重合代表吃到食物</span></div><div class="line"><span class="comment">// 食物的坐标是像素，蛇的坐标是几个宽度，进行转换</span></div><div class="line"><span class="keyword">var</span> headX = <span class="keyword">this</span>.body[<span class="number">0</span>].x * <span class="keyword">this</span>.width;</div><div class="line"><span class="keyword">var</span> headY = <span class="keyword">this</span>.body[<span class="number">0</span>].y * <span class="keyword">this</span>.height;</div><div class="line"><span class="keyword">if</span> (headX === food.x &amp;&amp; headY === food.y) &#123;</div><div class="line">  <span class="comment">// 吃到食物，往蛇节的最后加一节</span></div><div class="line">  <span class="keyword">var</span> last = <span class="keyword">this</span>.body[<span class="keyword">this</span>.body.length - <span class="number">1</span>];</div><div class="line">  <span class="keyword">this</span>.body.push(&#123;</div><div class="line">    x: last.x,</div><div class="line">    y: last.y,</div><div class="line">    color: last.color</div><div class="line">  &#125;)</div><div class="line">  <span class="comment">// 把现在的食物对象删除，并重新随机渲染一个食物对象</span></div><div class="line">  food.render(map);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="其它处理"><a href="#其它处理" class="headerlink" title="其它处理"></a>其它处理</h3><h4 id="把html中的js代码放到index-js中"><a href="#把html中的js代码放到index-js中" class="headerlink" title="把html中的js代码放到index.js中"></a>把html中的js代码放到index.js中</h4><p>避免html中出现js代码</p><h4 id="自调用函数的参数"><a href="#自调用函数的参数" class="headerlink" title="自调用函数的参数"></a>自调用函数的参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">window, undefined</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> <span class="built_in">document</span> = <span class="built_in">window</span>.document;</div><div class="line"></div><div class="line">&#125;(<span class="built_in">window</span>, <span class="literal">undefined</span>))</div></pre></td></tr></table></figure><ul><li>传入window对象</li></ul><p>将来代码压缩的时候，可以吧 function (window)  压缩成 function (w)</p><ul><li>传入undefined</li></ul><p>在将来会看到别人写的代码中会把undefined作为函数的参数(当前案例没有使用)<br>因为在有的老版本的浏览器中 undefined可以被重新赋值，防止undefined 被重新赋值</p><h4 id="整理代码"><a href="#整理代码" class="headerlink" title="整理代码"></a>整理代码</h4><p>现在的代码结构清晰，谁出问题就找到对应的js文件即可。<br>通过自调用函数，已经防止了变量命名污染的问题</p><p>但是，由于js文件数较多，需要在页面上引用，会产生文件依赖的问题(先引入那个js，再引入哪个js)<br>将来通过工具把js文件合并并压缩。现在手工合并js文件演示</p><ul><li>问题1</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果存在多个自调用函数要用分号分割，否则语法错误</span></div><div class="line"><span class="comment">// 下面代码会报错</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;())</div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;())</div><div class="line"><span class="comment">// 所以代码规范中会建议在自调用函数之前加上分号</span></div><div class="line"><span class="comment">// 下面代码没有问题</span></div><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;())</div><div class="line"></div><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;())</div></pre></td></tr></table></figure><ul><li>问题2 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 当自调用函数 前面有函数声明时，会把自调用函数作为参数</span></div><div class="line"><span class="comment">// 所以建议自调用函数前，加上;</span></div><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="string">'11'</span>);</div><div class="line">&#125;</div><div class="line">    </div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="string">'22'</span>);</div><div class="line">&#125;())</div></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;由于hexo的一些限制，每次传demo就头疼，具体的代码已经传到我的github上，此外还有一个是用二维数组实现的贪吃蛇游戏，也在我的github上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github上传的关于oop实现贪吃蛇游戏中的js代码，还用了sea.js模块化管理，虽然sea.js已经过时了，但是思想还是那个思想。&lt;br&gt;&lt;b&gt;请点击查看效果图&lt;/b&gt;&lt;a target=&quot;_blank&quot; href=&quot;/assets/demo/test/snake_game.html&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;案例目标&quot;&gt;&lt;a href=&quot;#案例目标&quot; class=&quot;headerlink&quot; title=&quot;案例目标&quot;&gt;&lt;/a&gt;案例目标&lt;/h4&gt;&lt;p&gt;游戏的目的是用来体会js高级语法的使用 不需要具备抽象对象的能力，使用面向对象的方式分析问题，需要一个漫长的过程。&lt;br&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://haotengfei.oschina.io/tags/js/"/>
    
      <category term="oop" scheme="http://haotengfei.oschina.io/tags/oop/"/>
    
      <category term="demo" scheme="http://haotengfei.oschina.io/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>JS核心面向对象</title>
    <link href="http://haotengfei.oschina.io/2016/09/02/js-opp/"/>
    <id>http://haotengfei.oschina.io/2016/09/02/js-opp/</id>
    <published>2016-09-02T00:20:00.000Z</published>
    <updated>2017-09-10T10:00:07.513Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h3><p>Everything is object</p><p><img width="50%" style="display:inline-block;float:left;margin-right:30px" src="https://timgsa.baidu.com/timg?image&quality=80&size=b10000_10000&sec=1504009587&di=18367a651374cb82f82b73505e567e96&src=http%3A%2F%2Fwww.lovehhy.net%2Flib%2Fimg%2F2461710%2F677536_2461710.jpg" alt=""></p><ul><li><b>那么对象到底是什么，我们可以从两个层次来理解</b><ul><li><m style="color:deeppink">对象是单个事物的抽象</m><br>一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。</li><li><m style="color:deeppink">对象是一个容器，封装了属性（property）和方法（method）</m><br>属性是对象的状态，方法是对象的行为（完成某种任务）。比如，我们可以把动物抽象为animal对象，使用“属性”记录具体是那一种动物，使用“方法”表示动物的某种行为（奔跑、捕猎、休息等等）。在实际开发中，对象是一个抽象的概念，可以将其简单理解为：数据集或功能集。</li></ul></li></ul><a id="more"></a><div style="background-color:skyblue"><b>ECMA-262 把对象定义为：</b><br><br>“无序属性的集合，其属性可以包含基本值、对象或者函数。”严格来讲，这就相当于说对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。正因为这样（以及其他将要讨论的原因），我们可以把ECMAScript的 对象想象成散列表：无非就是一组名值对，其中值可以是数据或函数。</div> <h3 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是<span style="color: red">面向</span>对象</h3><p>   ———–  面向对象不是新的东西，它只是过程式代码的一种高度封装，目的在于提高代码的开发效率和可维护性。</p><p><img width="50%" style="display:inline-block;float:left;margin-right:30px" src="https://ss3.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/image/pic/item/b812c8fcc3cec3fd3ea16dbfdc88d43f86942759.jpg" alt=""></p><p><br></p><ul><li><p><b>面向对象（Object-Oriented，OO）的语言有一个标志，那就是它们都有<mark>类的概念</mark>，而通过类可以创建任意多个具有相同属性和方法的对象。</b> </p></li><li><p><b>面向对象编程 —— Object Oriented Programming，简称 <mark>OOP</mark> ，是一种编程开发思想。 它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。</b> </p></li><li><p><b>在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务。 因此，面向对象编程具有<mark>灵活、代码可复用、高度模块化等特点，容易维护和开发</mark>灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一系列函数或指令组成的传统的过程式编程（procedural programming），更适合多人合作的大型软件项目。</b></p></li></ul><p><b> 面向对象与面向过程：</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">面向过程就是亲力亲为，事无巨细，面面俱到，步步紧跟，有条不紊</div><div class="line">面向对象就是找一个对象，指挥结果</div><div class="line">面向对象将执行者转变成指挥者</div><div class="line">面向对象不是面向过程的替代，而是面向过程的封装</div></pre></td></tr></table></figure><p><b> 面向对象的特性：</b><br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">封装性</div><div class="line">继承性</div><div class="line"><span class="string">[多态性]</span></div></pre></td></tr></table></figure></p><h3 id="创造对象"><a href="#创造对象" class="headerlink" title="创造对象"></a>创造对象</h3><ul><li><b style="color:purple">简单方式</b></li></ul><p>我们可以直接通过 new Object() 创建<br>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>()</div><div class="line">  person.name = <span class="string">'Jack'</span></div><div class="line">  person.age = <span class="number">18</span></div><div class="line"></div><div class="line">person.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>每次创建通过 new Object() 比较麻烦，所以可以通过它的简写形式对象字面量来创建<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">  name: <span class="string">'Jack'</span>,</div><div class="line">  age: <span class="number">18</span>,</div><div class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>对于上面的写法固然没有问题，但是假如我们要生成两个 person 实例对象呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person1 = &#123;</div><div class="line">  name: <span class="string">'Jack'</span>,</div><div class="line">  age: <span class="number">18</span>,</div><div class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person2 = &#123;</div><div class="line">  name: <span class="string">'Mike'</span>,</div><div class="line">  age: <span class="number">16</span>,</div><div class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过上面的代码我们不难看出，这样写的代码太过冗余，重复性太高</p><ul><li><b style="color:purple">简单方式的改进：工厂函数</b></li></ul><p>我们可以写一个函数，解决代码重复问题   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    name: name,</div><div class="line">    age: age,</div><div class="line">    sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后生成实例对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">'Jack'</span>, <span class="number">18</span>)</div><div class="line"><span class="keyword">var</span> p2 = createPerson(<span class="string">'Mike'</span>, <span class="number">18</span>)</div></pre></td></tr></table></figure><p>这样封装确实爽多了，通过工厂模式我们解决了创建多个相似对象代码冗余的问题， 但却没有解决对象识别的问题（即怎样知道一个对象的类型）</p><ul><li><b style="color:purple">更优雅的工厂函数：构造函数</b></li></ul><p>一种更优雅的工厂函数就是下面这样，构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">18</span>)</div><div class="line">p1.sayName() <span class="comment">// =&gt; Jack</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Mike'</span>, <span class="number">23</span>)</div><div class="line">p2.sayName() <span class="comment">// =&gt; Mike</span></div></pre></td></tr></table></figure><h3 id="解析构造函数代码的执行"><a href="#解析构造函数代码的执行" class="headerlink" title="解析构造函数代码的执行"></a>解析构造函数代码的执行</h3><p>在上面的示例中，<mark> Person() </mark> 函数取代了 <mark> createPerson() </mark> 函数，但是实现效果是一样的。 这是为什么呢？<br>我们注意到，Person() 中的代码与 createPerson() 有以下几点<mark> 不同 </mark>之处：</p><ul><li>没有显示的创建对象</li><li>直接将属性和方法赋给了 this 对象</li><li>没有 return 语句</li><li>函数名使用的是大写的 Person</li></ul><p>而要创建<mark> Person </mark>实例，则必须使用<mark> new </mark>操作符。 以这种方式调用构造函数会经历以下 4 个步骤：</p><ol><li>创建一个新对象</li><li>将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）</li><li>执行构造函数中的代码</li><li>返回新对象</li></ol><p>下面是具体的伪代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="comment">// 当使用 new 操作符调用 Person() 的时候，实际上这里会先创建一个对象</span></div><div class="line">  <span class="comment">// var instance = &#123;&#125;</span></div><div class="line">  <span class="comment">// 然后让内部的 this 指向 instance 对象</span></div><div class="line">  <span class="comment">// this = instance</span></div><div class="line">  <span class="comment">// 接下来所有针对 this 的操作实际上操作的就是 instance</span></div><div class="line"></div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 在函数的结尾处会将 this 返回，也就是 instance</span></div><div class="line">  <span class="comment">// return this</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="构造函数和实例对象的关系"><a href="#构造函数和实例对象的关系" class="headerlink" title="构造函数和实例对象的关系"></a>构造函数和实例对象的关系</h3><p>使用构造函数的好处不仅仅在于代码的简洁性，更重要的是我们可以识别对象的具体类型了。 在每一个实例对象中同时有一个<mark> constructor </mark>属性，该属性指向创建该实例的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(p1.constructor === Person) <span class="comment">// =&gt; true</span></div><div class="line"><span class="built_in">console</span>.log(p2.constructor === Person) <span class="comment">// =&gt; true</span></div><div class="line"><span class="built_in">console</span>.log(p1.constructor === p2.constructor) <span class="comment">// =&gt; true</span></div></pre></td></tr></table></figure><p>对象的<mark> constructor </mark>属性最初是用来标识对象类型的， 但是，如果要检测对象的类型，还是使用<mark> instanceof </mark>操作符更可靠一些</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person) <span class="comment">// =&gt; true</span></div><div class="line"><span class="built_in">console</span>.log(p2 <span class="keyword">instanceof</span> Person) <span class="comment">// =&gt; true</span></div></pre></td></tr></table></figure><p><b>小结：</b></p><ul><li>构造函数是根据具体的事物抽象出来的抽象模板</li><li>实例对象是根据抽象的构造函数模板得到的具体实例对象</li><li>每一个实例对象都具有一个 constructor 属性，指向创建该实例的构造函数<ul><li><mark> 注意：</mark> constructor 是实例的属性的说法不严谨！</li></ul></li><li>可以通过实例的 constructor 属性判断实例和构造函数之间的关系<ul><li><mark> 注意：</mark> 这种方式不严谨，推荐使用 instanceof 操作符！</li></ul></li></ul><h3 id="原型-更好的解决方案：-prototype"><a href="#原型-更好的解决方案：-prototype" class="headerlink" title="原型 ( 更好的解决方案： prototype )"></a>原型 ( 更好的解决方案： prototype )</h3><p>javascript规定，每一个构造函数都有一个<mark> prototype </mark>属性，指向另一个对象。这个对象所有属性和方法，都会被构造函数的实例继承。<br>这也就意味着，我们可以把所有对象实例需要共享的属性和方法直接定义在<mark> prototype </mark>对象上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(Person.prototype)</div><div class="line"></div><div class="line">Person.prototype.type = <span class="string">'human'</span></div><div class="line"></div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(...)</div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(...)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(p1.sayName === p2.sayName) <span class="comment">// =&gt; true</span></div></pre></td></tr></table></figure></p><ul><li>这时所有实例的 type 属性和 sayName() 方法， 其实都是同一个内存地址，指向 prototype 对象，因此就提高了运行效率</li></ul><h3 id="构造函数、实例、原型三者之间的关系"><a href="#构造函数、实例、原型三者之间的关系" class="headerlink" title="构造函数、实例、原型三者之间的关系"></a>构造函数、实例、原型三者之间的关系</h3><p><img src="https://i.loli.net/2017/08/30/59a6420c6b921.png" alt=""></p><ul><li>任何函数都具有一个 prototype 属性，该属性是一个对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="built_in">console</span>.log(F.prototype) <span class="comment">// =&gt; object</span></div><div class="line"></div><div class="line">F.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'hi!'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>构造函数的<mark> prototype </mark>对象默认都有一个<mark> constructor </mark>属性，指向 prototype 对象所在函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(F.constructor === F) <span class="comment">// =&gt; true</span></div></pre></td></tr></table></figure><ul><li>通过构造函数得到的实例对象内部会包含一个指向构造函数的 prototype 对象的指针<mark> __proto__</mark></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> F()</div><div class="line"><span class="built_in">console</span>.log(instance.__proto__ === F.prototype) <span class="comment">// =&gt; true</span></div></pre></td></tr></table></figure><p><span style="color: red">__proto__ 是非标准属性</span></p><ul><li>实例对象可以直接访问原型对象成员</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">instance.sayHi() <span class="comment">// =&gt; hi!</span></div></pre></td></tr></table></figure><p><b>小结：</b></p><ul><li>任何函数都具有一个<mark> prototype </mark>属性，该属性是一个对象</li><li>构造函数的<mark> prototype </mark>对象默认都有一个<mark> constructor </mark>属性，指向prototype对象所在的函数</li><li>通过构造函数得到的实例对象内部会包含一个指向构造函数的<mark> prototype </mark>对象的指针<mark> __proto__</mark></li><li>所有的实例都直接或间接继承了原型对象的成员</li></ul><h3 id="属性成员的搜索原则：原型链"><a href="#属性成员的搜索原则：原型链" class="headerlink" title="属性成员的搜索原则：原型链"></a>属性成员的搜索原则：原型链</h3><p>了解了<b style="color: #000"> 构造函数-实例-原型对象 </b>三者之间的关系后，接下来我们来解释一下为什么实例对象可以访问原型对象中的成员    </p><ul><li><b style="color: deepskyblue">每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性</b><ul><li>搜索首先从对象实例本身开始</li><li>如果在实例中找到了具有给定名字的属性，则返回该属性的值</li><li>如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性</li><li>如果在原型对象中找到了这个属性，则返回该属性的值</li></ul></li><li><b style="color: deepskyblue">也就是说，在我们调用 person1.sayName() 的时候，会先后执行两次搜索：</b>    <ul><li>首先，解析器会问：“实例 person1 有 sayName 属性吗？”答：“没有”</li><li>然后，它继续搜索，再问：“ person1 的原型有 sayName 属性吗？”答：“有”</li><li>于是，它就读取那个保存在原型对象中的函数</li><li>当我们调用 person2.sayName() 时，将会重现相同的搜索过程，得到相同的结果</li></ul></li></ul><p><b>而这正是多个对象实例共享原型所保存的属性和方法的基本原理</b></p><p><b>小结：</b></p><ul><li>先在自己身上找，找到即返回</li><li>自己身上找不到，则沿着原型链向上查找，找到即返回</li><li>如果一直到原型链的末端还没有找到，则返回 undefined</li></ul><h3 id="实例对象读写原型对象成员"><a href="#实例对象读写原型对象成员" class="headerlink" title="实例对象读写原型对象成员"></a>实例对象读写原型对象成员</h3><ul><li>读取：<ul><li>先在自己身上找，找到即返回</li><li>自己身上找不到，则沿着原型链向上查找，找到即返回</li><li>如果一直到原型链的末端还没有找到，则返回 undefined</li><li>值类型成员写入（实例对象.值类型成员 = xx）</li><li>当实例期望重写原型对象中的某个普通数据成员时实际上会把该成员添加到自己身上</li><li>也就是说该行为实际上会屏蔽掉对原型对象成员的访问</li><li>引用类型成员写入（实例对象.引用类型成员 = xx）</li></ul></li><li>同上<ul><li>复杂类型修改（实例对象.成员.xx = xx）：</li><li>同样会先在自己身上找该成员，如果自己身上找到则直接修改</li><li>如果自己身上找不到，则沿着原型链继续查找，如果找到则修改</li><li>如果一直到原型链的末端还没有找到该成员，则报错（实例对象.undefined.xx = xx）</li></ul></li></ul><h3 id="更简单的原型语法"><a href="#更简单的原型语法" class="headerlink" title="更简单的原型语法"></a>更简单的原型语法</h3><p>我们注意到，前面例子中每添加一个属性和方法就要敲一遍 Person.prototype 。 为减少不必要的输入，更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">  type: <span class="string">'human'</span>,</div><div class="line">  sayHello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name + <span class="string">'，我今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁了'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在该示例中，我们将<mark> Person.prototype </mark>重置到了一个新的对象。 这样做的好处就是为 Person.prototype 添加成员简单了，但是也会带来一个问题，那就是原型对象丢失了<mark> constructor </mark>成员<br>所以，我们为了保持<mark> constructor </mark>的指向正确，建议的写法是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">  <span class="keyword">constructor</span>: Person, // =&gt; 手动将 <span class="keyword">constructor</span> 指向正确的构造函数</div><div class="line">  type: 'human',</div><div class="line">  sayHello: function () &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name + <span class="string">'，我今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁了'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="原型对象的问题"><a href="#原型对象的问题" class="headerlink" title="原型对象的问题"></a>原型对象的问题</h3><ul><li>共享数组</li><li>共享对象</li></ul><p>如果真的希望可以被实例对象之间共享和修改这些共享数据那就不是问题。但是如果不希望实例之间共享和修改这些共享数据则就是问题<br><span style="color: red"> <strong>建议 : </strong></span>最好不要让实例之间互相共享这些数组或者对象成员，一旦修改的话会导致数据的走向很不明确而且难以维护</p><div style="background-color: pink;text-align: center;"><br><b style="font-size: 18px">原型对象使用建议</b><br><br>    私有成员（一般就是非函数成员）放到构造函数中<br>    共享成员（一般就是函数）放到原型对象中<br>    如果重置了 prototype 记得修正 constructor 的指向<br><br></div><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="什么是继承"><a href="#什么是继承" class="headerlink" title="什么是继承"></a>什么是继承</h3><ul><li>现实生活中的继承</li><li>程序中的继承</li></ul><h3 id="构造函数的属性继承：借用构造函数"><a href="#构造函数的属性继承：借用构造函数" class="headerlink" title="构造函数的属性继承：借用构造函数"></a>构造函数的属性继承：借用构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="comment">// 借用构造函数继承属性成员</span></div><div class="line">  Person.call(<span class="keyword">this</span>, name, age)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Student(<span class="string">'张三'</span>, <span class="number">18</span>)</div><div class="line"><span class="built_in">console</span>.log(s1.type, s1.name, s1.age) <span class="comment">// =&gt; human 张三 18</span></div></pre></td></tr></table></figure><h3 id="构造函数的原型方法继承：拷贝继承（for-in）"><a href="#构造函数的原型方法继承：拷贝继承（for-in）" class="headerlink" title="构造函数的原型方法继承：拷贝继承（for-in）"></a>构造函数的原型方法继承：拷贝继承（for-in）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  Person.call(<span class="keyword">this</span>, name, age)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 原型对象拷贝继承原型对象成员</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> Person.prototype) &#123;</div><div class="line">  Student.prototype[key] = Person.prototype[key]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> s1 = Student(<span class="string">'张三'</span>, <span class="number">18</span>)</div><div class="line"></div><div class="line">s1.sayName() <span class="comment">// =&gt; hello 张三</span></div></pre></td></tr></table></figure><h3 id="另一种继承方式：原型继承"><a href="#另一种继承方式：原型继承" class="headerlink" title="另一种继承方式：原型继承"></a>另一种继承方式：原型继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  Person.call(<span class="keyword">this</span>, name, age)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 利用原型的特性实现继承</span></div><div class="line">Student.prototype = <span class="keyword">new</span> Person()</div><div class="line"></div><div class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Student(<span class="string">'张三'</span>, <span class="number">18</span>)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(s1.type) <span class="comment">// =&gt; human</span></div><div class="line"></div><div class="line">s1.sayName() <span class="comment">// =&gt; hello 张三</span></div></pre></td></tr></table></figure><hr><h2 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h2><h3 id="函数的定义方式"><a href="#函数的定义方式" class="headerlink" title="函数的定义方式"></a>函数的定义方式</h3><ul><li>函数声明</li><li>函数表达式</li><li><code>new Function</code></li></ul><h4 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="函数声明与函数表达式的区别"><a href="#函数声明与函数表达式的区别" class="headerlink" title="函数声明与函数表达式的区别"></a>函数声明与函数表达式的区别</h4><ul><li>函数声明必须有名字</li><li>函数声明会函数提升，在预解析阶段就已创建，声明前后都可以调用</li><li>函数表达式类似于变量赋值</li><li>函数表达式可以没有名字，例如匿名函数</li><li>函数表达式没有变量提升，在执行阶段创建，必须在表达式执行之后才可以调用</li></ul><p>下面是一个根据条件定义函数的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</div><div class="line">  &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上代码执行结果在不同浏览器中结果不一致。</p><p>不过我们可以使用函数表达式解决上面的问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</div><div class="line">  &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="函数的调用方式"><a href="#函数的调用方式" class="headerlink" title="函数的调用方式"></a>函数的调用方式</h3><ul><li>普通函数</li><li>构造函数</li><li>对象方法</li></ul><h3 id="函数内-this-指向的不同场景"><a href="#函数内-this-指向的不同场景" class="headerlink" title="函数内 this 指向的不同场景"></a>函数内 <code>this</code> 指向的不同场景</h3><p>函数的调用方式决定了 <code>this</code> 指向的不同：</p><table><thead><tr><th>调用方式</th><th>非严格模式</th><th>备注</th></tr></thead><tbody><tr><td>普通函数调用</td><td>window</td><td>严格模式下是 undefined</td></tr><tr><td>构造函数调用</td><td>实例对象</td><td>原型方法中 this 也是实例对象</td></tr><tr><td>对象方法调用</td><td>该方法所属对象</td><td>紧挨着的对象</td></tr><tr><td>事件绑定方法</td><td>绑定事件对象</td><td></td></tr><tr><td>定时器函数</td><td>window</td></tr></tbody></table><p>这就是对函数内部 this 指向的基本整理，写代码写多了自然而然就熟悉了。</p><h3 id="函数也是对象"><a href="#函数也是对象" class="headerlink" title="函数也是对象"></a>函数也是对象</h3><ul><li>所有函数都是 <code>Function</code> 的实例</li></ul><h3 id="call、apply、bind"><a href="#call、apply、bind" class="headerlink" title="call、apply、bind"></a>call、apply、bind</h3><p>那了解了函数 this 指向的不同场景之后，我们知道有些情况下我们为了使用某种特定环境的 this 引用，<br>这时候时候我们就需要采用一些特殊手段来处理了，例如我们经常在定时器外部备份 this 引用，然后在定时器函数内部使用外部 this 的引用。<br>然而实际上对于这种做法我们的 JavaScript 为我们专门提供了一些函数方法用来帮我们更优雅的处理函数内部 this 指向问题。<br>这就是接下来我们要学习的 call、apply、bind 三个函数方法。</p><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><p><code>call()</code> 方法调用一个函数, 其具有一个指定的 <code>this</code> 值和分别地提供的参数(参数的列表)。</p><p class="danger"><br>  注意：该方法的作用和 <code>apply()</code> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是若干个参数的列表，而 <code>apply()</code> 方法接受的是一个包含多个参数的数组。<br></p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fun.call(thisArg[, arg1[, arg2[, ...]]])</div></pre></td></tr></table></figure><p>参数：</p><ul><li><p><code>thisArg</code></p><ul><li>在 fun 函数运行时指定的 this 值</li><li>如果指定了 null 或者 undefined 则内部 this 指向 window</li></ul></li><li><p><code>arg1, arg2, ...</code></p><ul><li>指定的参数列表</li></ul></li></ul><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><p><code>apply()</code> 方法调用一个函数, 其具有一个指定的 <code>this</code> 值，以及作为一个数组（或类似数组的对象）提供的参数。</p><p class="danger"><br>  注意：该方法的作用和 <code>call()</code> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是若干个参数的列表，而 <code>apply()</code> 方法接受的是一个包含多个参数的数组。<br></p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fun.apply(thisArg, [argsArray])</div></pre></td></tr></table></figure><p>参数：</p><ul><li><code>thisArg</code></li><li><code>argsArray</code></li></ul><p><code>apply()</code> 与 <code>call()</code> 非常相似，不同之处在于提供参数的方式。<br><code>apply()</code> 使用参数数组而不是一组参数列表。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fun.apply(<span class="keyword">this</span>, [<span class="string">'eat'</span>, <span class="string">'bananas'</span>])</div></pre></td></tr></table></figure><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p>bind() 函数会创建一个新函数（称为绑定函数），新函数与被调函数（绑定函数的目标函数）具有相同的函数体（在 ECMAScript 5 规范中内置的call属性）。<br>当目标函数被调用时 this 值绑定到 bind() 的第一个参数，该参数不能被重写。绑定函数被调用时，bind() 也接受预设的参数提供给原函数。<br>一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数。</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fun.bind(thisArg[, arg1[, arg2[, ...]]])</div></pre></td></tr></table></figure><p>参数：</p><ul><li><p>thisArg</p><ul><li>当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。当使用new 操作符调用绑定函数时，该参数无效。</li></ul></li><li><p>arg1, arg2, …</p><ul><li>当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。</li></ul></li></ul><p>返回值：</p><p>返回由指定的this值和初始化参数改造的原函数拷贝。</p><p>示例1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.x = <span class="number">9</span>; </div><div class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</div><div class="line">  x: <span class="number">81</span>,</div><div class="line">  getX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.x; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.getX(); <span class="comment">// 返回 81</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> retrieveX = <span class="built_in">module</span>.getX;</div><div class="line">retrieveX(); <span class="comment">// 返回 9, 在这种情况下，"this"指向全局作用域</span></div><div class="line"></div><div class="line"><span class="comment">// 创建一个新函数，将"this"绑定到module对象</span></div><div class="line"><span class="comment">// 新手可能会被全局的x变量和module里的属性x所迷惑</span></div><div class="line"><span class="keyword">var</span> boundGetX = retrieveX.bind(<span class="built_in">module</span>);</div><div class="line">boundGetX(); <span class="comment">// 返回 81</span></div></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">LateBloomer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.petalCount = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="number">12</span>) + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Declare bloom after a delay of 1 second</span></div><div class="line">LateBloomer.prototype.bloom = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">window</span>.setTimeout(<span class="keyword">this</span>.declare.bind(<span class="keyword">this</span>), <span class="number">1000</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">LateBloomer.prototype.declare = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'I am a beautiful flower with '</span> +</div><div class="line">    <span class="keyword">this</span>.petalCount + <span class="string">' petals!'</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> flower = <span class="keyword">new</span> LateBloomer();</div><div class="line">flower.bloom();  <span class="comment">// 一秒钟后, 调用'declare'方法</span></div></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li><p>call 和 apply 特性一样</p><ul><li>都是用来调用函数，而且是立即调用</li><li>但是可以在调用函数的同时，通过第一个参数指定函数内部 <code>this</code> 的指向</li><li>call 调用的时候，参数必须以参数列表的形式进行传递，也就是以逗号分隔的方式依次传递即可</li><li>apply 调用的时候，参数必须是一个数组，然后在执行的时候，会将数组内部的元素一个一个拿出来，与形参一一对应进行传递</li><li>如果第一个参数指定了 <code>null</code> 或者 <code>undefined</code> 则内部 this 指向 window</li></ul></li><li><p>bind</p><ul><li>可以用来指定内部 this 的指向，然后生成一个改变了 this 指向的新的函数</li><li>它和 call、apply 最大的区别是：bind 不会调用</li><li>bind 支持传递参数，它的传参方式比较特殊，一共有两个位置可以传递<ul><li><ol><li>在 bind 的同时，以参数列表的形式进行传递</li></ol></li><li><ol><li>在调用的时候，以参数列表的形式进行传递</li></ol></li><li>那到底以谁 bind 的时候传递的参数为准呢还是以调用的时候传递的参数为准</li><li>两者合并：bind 的时候传递的参数和调用的时候传递的参数会合并到一起，传递到函数内部</li></ul></li></ul></li></ul><h3 id="函数的其它成员"><a href="#函数的其它成员" class="headerlink" title="函数的其它成员"></a>函数的其它成员</h3><ul><li>arguments<ul><li>实参集合</li></ul></li><li>caller<ul><li>函数的调用者</li></ul></li><li>length<ul><li>形参的个数</li></ul></li><li>name<ul><li>函数的名称</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y, z</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(fn.length) <span class="comment">// =&gt; 形参的个数</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>) <span class="comment">// 伪数组实参参数集合</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee === fn) <span class="comment">// 函数本身</span></div><div class="line">  <span class="built_in">console</span>.log(fn.caller) <span class="comment">// 函数的调用者</span></div><div class="line">  <span class="built_in">console</span>.log(fn.name) <span class="comment">// =&gt; 函数的名字</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  fn(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">f()</div></pre></td></tr></table></figure><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><ul><li>函数可以作为参数</li><li>函数可以作为返回值</li></ul><h4 id="作为参数"><a href="#作为参数" class="headerlink" title="作为参数"></a>作为参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">eat</span> (<span class="params">callback</span>) </span>&#123;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'吃完了'</span>)</div><div class="line">    callback()</div><div class="line">  &#125;, <span class="number">1000</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">eat(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'去唱歌'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h4 id="作为返回值"><a href="#作为返回值" class="headerlink" title="作为返回值"></a>作为返回值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">genFun</span> (<span class="params">type</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === type</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> isArray = genFun(<span class="string">'[object Array]'</span>)</div><div class="line"><span class="keyword">var</span> isObject = genFun(<span class="string">'[object Object]'</span>)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(isArray([])) <span class="comment">// =&gt; true</span></div><div class="line"><span class="built_in">console</span>.log(isArray(&#123;&#125;)) <span class="comment">// =&gt; true</span></div></pre></td></tr></table></figure><h3 id="函数闭包"><a href="#函数闭包" class="headerlink" title="函数闭包"></a>函数闭包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> count = <span class="number">0</span></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    getCount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(count)</div><div class="line">    &#125;,</div><div class="line">    setCount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      count++</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> fns = fn()</div><div class="line"></div><div class="line">fns.getCount() <span class="comment">// =&gt; 0</span></div><div class="line">fns.setCount()</div><div class="line">fns.getCount() <span class="comment">// =&gt; 1</span></div></pre></td></tr></table></figure><h4 id="作用域、作用域链、预解析"><a href="#作用域、作用域链、预解析" class="headerlink" title="作用域、作用域链、预解析"></a>作用域、作用域链、预解析</h4><ul><li>全局作用域</li><li>函数作用域</li><li><strong>没有块级作用域</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="keyword">var</span> foo = <span class="string">'bar'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo)</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">123</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a)</div></pre></td></tr></table></figure><p>作用域链示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">10</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> b = <span class="number">20</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = <span class="number">30</span></div><div class="line">    <span class="built_in">console</span>.log(a + b + c)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> d = <span class="number">40</span></div><div class="line">    <span class="built_in">console</span>.log(c + d)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  fn1()</div><div class="line">  fn2()</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>内层作用域可以访问外层作用域，反之不行</li></ul><h4 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h4><p>闭包就是能够读取其他函数内部变量的函数，<br>由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，<br>因此可以把闭包简单理解成 “定义在一个函数内部的函数”。<br>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p><p>闭包的用途：</p><ul><li>可以在函数外部读取函数内部成员</li><li>让函数内成员始终存活在内存中</li></ul><h4 id="一些关于闭包的例子"><a href="#一些关于闭包的例子" class="headerlink" title="一些关于闭包的例子"></a>一些关于闭包的例子</h4><p>示例1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">  arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="number">111</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i)</div><div class="line">  &#125;, <span class="number">0</span>)</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="number">222</span>)</div></pre></td></tr></table></figure><h4 id="闭包的思考题"><a href="#闭包的思考题" class="headerlink" title="闭包的思考题"></a>闭包的思考题</h4><p>思考题 1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">  name: <span class="string">"My Object"</span>,</div><div class="line">  getNameFunc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</div></pre></td></tr></table></figure><p>思考题 2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;　　</div><div class="line"><span class="keyword">var</span> object = &#123;　　　　</div><div class="line">  name: <span class="string">"My Object"</span>,</div><div class="line">  getNameFunc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> that.name;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</div></pre></td></tr></table></figure><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><h3 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h3><h4 id="递归执行模型"><a href="#递归执行模型" class="headerlink" title="递归执行模型"></a>递归执行模型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">111</span>)</div><div class="line">  fn2()</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fn1'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">222</span>)</div><div class="line">  fn3()</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fn2'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">333</span>)</div><div class="line">  fn4()</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fn3'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn4</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">444</span>)</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fn4'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">fn1()</div></pre></td></tr></table></figure><h4 id="举个栗子：计算阶乘的递归函数"><a href="#举个栗子：计算阶乘的递归函数" class="headerlink" title="举个栗子：计算阶乘的递归函数"></a>举个栗子：计算阶乘的递归函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span> (<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> num * factorial(num - <span class="number">1</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p><span style="color:red">补充</span></p></blockquote><ul><li><p><b>用什么方法来判断一个对象的数据类型,怎么样去判断数组？</b></p><ul><li><p><b style="color:purple">通过简单的type of运算符</b></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">alert(<span class="keyword">typeof</span> <span class="number">1</span>);                <span class="comment">// 返回字符串"number" </span></div><div class="line">alert(<span class="keyword">typeof</span> <span class="string">"1"</span>);              <span class="comment">// 返回字符串"string" </span></div><div class="line">alert(<span class="keyword">typeof</span> <span class="literal">true</span>);             <span class="comment">// 返回字符串"boolean" </span></div><div class="line">alert(<span class="keyword">typeof</span> &#123;&#125;);               <span class="comment">// 返回字符串"object" </span></div><div class="line">alert(<span class="keyword">typeof</span> []);               <span class="comment">// 返回字符串"object " </span></div><div class="line">alert(<span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);     <span class="comment">// 返回字符串"function" </span></div><div class="line">alert(<span class="keyword">typeof</span> <span class="literal">null</span>);             <span class="comment">// 返回字符串"object" </span></div><div class="line">alert(<span class="keyword">typeof</span> <span class="literal">undefined</span>);        <span class="comment">// 返回字符串"undefined"</span></div></pre></td></tr></table></figure></li><li><p><b style="color:purple">从原型入手，Array.prototype.isPrototypeOf(obj)</b></p></li></ul><p><img style="display:inline-block" src="https://i.loli.net/2017/08/30/59a654c420158.png" alt=""></p><ul><li><b style="color:purple">从构造函数入手，obj instanceof Array</b></li></ul><p><img style="display:inline-block" src="https://i.loli.net/2017/08/30/59a6557350dd4.png" alt=""></p><ul><li><b style="color:purple">根据对象的class属性(类属性)，跨原型链调用toString()方法<span style="color:red">（推荐使用！！！）</span></b></li></ul><p><img style="display:inline-block" src="https://i.loli.net/2017/08/30/59a655b06e65a.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>());   <span class="comment">//"[object Date]"</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(Window);       <span class="comment">//"[object window]"</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="regexp">/./</span>);          <span class="comment">//"[object RegExp]"</span></div></pre></td></tr></table></figure><p><i style="color:skypurple">闭包的方法封装一个判断数据类型的方法</i></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateCheck</span>(<span class="params">type</span>) </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === type</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">//  判断是否为对象，调用isObject(obj) 返回boolean值</span></div><div class="line">   <span class="keyword">var</span> isObject = generateCheck(<span class="string">'[object Object]'</span>);</div><div class="line">   <span class="comment">//  判断是否为数组，调用isArray(obj) 返回boolean值</span></div><div class="line">   <span class="keyword">var</span> isArray = generateCheck(<span class="string">'[object Array]'</span>);</div><div class="line">...</div></pre></td></tr></table></figure><ul><li><b style="color:purple">Array.isArray()方法</b></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);  <span class="comment">// true</span></div><div class="line"><span class="built_in">Array</span>.isArray(&#123;<span class="attr">foo</span>: <span class="number">123</span>&#125;); <span class="comment">// false</span></div><div class="line"><span class="built_in">Array</span>.isArray(<span class="string">'foobar'</span>);   <span class="comment">// false</span></div><div class="line"><span class="built_in">Array</span>.isArray(<span class="literal">undefined</span>);  <span class="comment">// false</span></div></pre></td></tr></table></figure><h3 id="伪数组和数组"><a href="#伪数组和数组" class="headerlink" title="伪数组和数组"></a>伪数组和数组</h3></li></ul><p>在JavaScript中，除了5种原始数据类型之外，其他所有的都是对象，包括函数（Function）。</p><h4 id="对象与数组的关系"><a href="#对象与数组的关系" class="headerlink" title="对象与数组的关系"></a>对象与数组的关系</h4><p>在说区别之前，需要先提到另外一个知识，就是 JavaScript 的原型继承。<br>所有 JavaScript 的内置构造函数都是继承自 <code>Object.prototype</code> 。<br>在这个前提下，可以理解为使用 <code>new Array()</code> 或 <code>[]</code> 创建出来的数组对象，都会拥有 <code>Object.prototype</code> 的属性值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;<span class="comment">// 拥有 Object.prototype 的属性值</span></div><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line"><span class="comment">//使用数组直接量创建的数组，由于 Array.prototype 的属性继承自 Object.prototype，</span></div><div class="line"><span class="comment">//那么，它将同时拥有 Array.prototype 和 Object.prototype 的属性值</span></div></pre></td></tr></table></figure><p>可以得到对象和数组的第一个区别：对象没有数组 Array.prototype 的属性值。</p><h4 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h4><p>数组具有一个最基本特征：索引，这是对象所没有的，下面来看一段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line"> </div><div class="line">obj[<span class="number">2</span>] = <span class="string">'a'</span>;</div><div class="line">arr[<span class="number">2</span>] = <span class="string">'a'</span>;</div><div class="line"> </div><div class="line"><span class="built_in">console</span>.log(obj[<span class="number">2</span>]); <span class="comment">// =&gt; a</span></div><div class="line"><span class="built_in">console</span>.log(arr[<span class="number">2</span>]); <span class="comment">// =&gt; a</span></div><div class="line"><span class="built_in">console</span>.log(obj.length); <span class="comment">// =&gt; undefined</span></div><div class="line"><span class="built_in">console</span>.log(arr.length); <span class="comment">// =&gt; 3</span></div></pre></td></tr></table></figure><ul><li>obj[2]输出’a’，是因为对象就是普通的键值对存取数据</li><li>而arr[2]输出’a’ 则不同，数组是通过索引来存取数据，arr[2]之所以输出’a’，是因为数组arr索引2的位置已经存储了数据</li><li>obj.length并不具有数组的特性，并且obj没有保存属性length，那么自然就会输出undefined</li><li>而对于数组来说，length是数组的一个内置属性，数组会根据索引长度来更改length的值</li><li>为什么arr.length输出3，而不是1<ul><li>在给数组添加元素时，并没有按照连续的索引添加，所以导致数组的索引不连续，那么就导致索引长度大于元素个数</li></ul></li></ul><h4 id="什么是伪数组"><a href="#什么是伪数组" class="headerlink" title="什么是伪数组"></a>什么是伪数组</h4><ol><li>拥有 length 属性，其它属性（索引）为非负整数(对象中的索引会被当做字符串来处理，这里你可以当做是个非负整数串来理解)</li><li>不具有数组所具有的方法</li></ol><p>伪数组，就是像数组一样有 <code>length</code> 属性，也有 <code>0、1、2、3</code> 等属性的对象，看起来就像数组一样，但不是数组，比如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fakeArray = &#123;</div><div class="line">  <span class="string">"0"</span>: <span class="string">"first"</span>,</div><div class="line">  <span class="string">"1"</span>: <span class="string">"second"</span>,</div><div class="line">  <span class="string">"2"</span>: <span class="string">"third"</span>,</div><div class="line">  length: <span class="number">3</span></div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fakeArray.length; i++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(fakeArray[i]);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="built_in">Array</span>.prototype.join.call(fakeArray,<span class="string">'+'</span>);</div></pre></td></tr></table></figure><p>常见的伪数组有：</p><ul><li>函数内部的 <code>arguments</code></li><li>DOM 对象列表（比如通过 <code>document.getElementsByTags</code> 得到的列表）</li><li>jQuery 对象（比如 <code>$(&quot;div&quot;)</code> ）</li></ul><p>伪数组是一个 Object，而真实的数组是一个 Array。</p><p>伪数组存在的意义，是可以让普通的对象也能正常使用数组的很多方法，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line"> </div><div class="line"><span class="built_in">Array</span>.prototype.forEach.call(<span class="built_in">arguments</span>, <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">  <span class="comment">// 循环arguments对象</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// push</span></div><div class="line"><span class="comment">// some</span></div><div class="line"><span class="comment">// every</span></div><div class="line"><span class="comment">// filter</span></div><div class="line"><span class="comment">// map</span></div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure><p>以上在借用数组的原型方法的时候都可以通过数组直接量来简化使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="number">0</span>: <span class="string">'a'</span>,</div><div class="line">  <span class="number">1</span>: <span class="string">'b'</span>,</div><div class="line">  <span class="number">2</span>: <span class="string">'c'</span>,</div><div class="line">  length: <span class="number">3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">;[].push.call(obj, <span class="string">'d'</span>)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log([].slice.call(obj))</div><div class="line"></div><div class="line">;[].forEach.call(obj, <span class="function"><span class="keyword">function</span> (<span class="params">num, index</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(num)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ul><li>对象没有数组 Array.prototype 的属性值，类型是 Object ，而数组类型是 Array</li><li>数组是基于索引的实现， length 会自动更新，而对象是键值对</li><li>使用对象可以创建伪数组，伪数组可以正常使用数组的大部分方法</li></ul><h3 id="JavaScript-垃圾回收机制"><a href="#JavaScript-垃圾回收机制" class="headerlink" title="JavaScript 垃圾回收机制"></a>JavaScript 垃圾回收机制</h3><h3 id="JavaScript-运行机制：Event-Loop"><a href="#JavaScript-运行机制：Event-Loop" class="headerlink" title="JavaScript 运行机制：Event Loop"></a>JavaScript 运行机制：Event Loop</h3><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><ul><li>Object.assign()</li><li>Object.create()</li><li>Object.keys()</li><li>Object.defineProperty()</li></ul><h4 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h4><ul><li>constructor</li><li>hasOwnProperty()</li><li>isPrototypeOf</li><li>propertyIsEnumerable()</li><li>toString()</li><li>valueOf()</li></ul><hr><h2 id="JavaScript-模块化编程"><a href="#JavaScript-模块化编程" class="headerlink" title="JavaScript 模块化编程"></a>JavaScript 模块化编程</h2><ul><li>CommonJS</li><li>AMD</li><li>CMD</li><li>UMD</li></ul><h3 id="模块化介绍"><a href="#模块化介绍" class="headerlink" title="模块化介绍"></a>模块化介绍</h3><blockquote><p>掌握模块化基本概念以及使用模块化带来的好处</p></blockquote><p><strong>当你的网站开发越来越复杂的时候，会经常遇到什么问题？</strong></p><ul><li>恼人的命名冲突</li><li>繁琐的文件依赖</li></ul><p>历史上，JavaScript一直没有模块（module）体系，<br>无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。<br>其他语言都有这项功能，比如Ruby的 <code>require</code>、Python的 <code>import</code> ，<br>甚至就连CSS都有 <code>@import</code> ，c 语言中的 <code>include</code>，<br>但是JavaScript任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。</p><p>对于一些其他语言的编程人员，都不知道模块快这么一回事儿，因为人家的语言天生就支持，<br>它就认为这是一个理所当然的事情。</p><ul><li>模块的作用就是：私有空间</li><li><p>可以加载，可以导出</p></li><li><p>什么是模块化</p><ul><li>模块化是指解决一个复杂问题时自顶向下逐层把系统划分成若干模块的过程，有多种属性，分别反映其内部特性。</li><li>解决复杂问题的一种方式而已</li><li>电脑：CPU、主板、显示器、内存、硬盘、输入与输出设备</li><li>房屋模块化</li></ul></li><li><p>使用模块化开发的方式带来的好处</p><ul><li>生产效率高</li><li>可维护性高</li></ul></li></ul><hr><h3 id="模块化开发演变"><a href="#模块化开发演变" class="headerlink" title="模块化开发演变"></a>模块化开发演变</h3><blockquote><p>体验刀耕火种的模块化解决方式</p></blockquote><h4 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h4><ul><li>污染了全局变量</li><li>模块成员之间看不出直接关系</li></ul><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><ul><li>理论意义上减少了变量冲突</li><li>缺点1：暴露了模块中所有的成员，内部状态可以被外部改写，不安全</li><li>缺点2：命名空间会越来越长</li></ul><h4 id="私有空间"><a href="#私有空间" class="headerlink" title="私有空间"></a>私有空间</h4><ul><li>私有空间的变量和函数不会影响全局作用域</li><li>公开公有方法，隐藏私有属性</li></ul><h4 id="模块的维护和扩展"><a href="#模块的维护和扩展" class="headerlink" title="模块的维护和扩展"></a>模块的维护和扩展</h4><ul><li>开闭原则</li><li>可维护性好</li></ul><h4 id="模块的第三方依赖"><a href="#模块的第三方依赖" class="headerlink" title="模块的第三方依赖"></a>模块的第三方依赖</h4><ul><li>保证模块的独立性</li><li>模块之间的依赖关系变得明显</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以后如果不使用第三方规范的情况下，如果写模块可以采用下面这种方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 分号是什么意思</span></div><div class="line"><span class="comment">// 2. 为什么要给你的代码加一个匿名自执行函数</span></div><div class="line"><span class="comment">// 3. 为什么要把使用的依赖作为参数传递进来</span></div><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">形参模块名, 依赖项, 依赖项</span>) </span>&#123;</div><div class="line">  <span class="comment">// 通过 形参模块名 修改模块</span></div><div class="line"></div><div class="line">  <span class="comment">// 如果需要，可以通过给 window 对象挂载属性对外暴露内部成员</span></div><div class="line">  <span class="built_in">window</span>.模块名 = 形参模块名</div><div class="line">&#125;)(<span class="built_in">window</span>.模块名 || &#123;&#125;, 依赖项, 依赖项)</div></pre></td></tr></table></figure><h3 id="模块化规范"><a href="#模块化规范" class="headerlink" title="模块化规范"></a>模块化规范</h3><h4 id="模块系统理解"><a href="#模块系统理解" class="headerlink" title="模块系统理解"></a>模块系统理解</h4><p>自然界生态系统、计算机操作系统、软件办公系统，还有教育系统、金融系统、网络系统、<br>理论系统等等。究竟什么是系统呢？</p><blockquote><p>维基百科：系统泛指由一群有关连的个体组成，根据预先编排好的规则工作，<br>能完成个别元件不能单独完成的工作的群体。<br>系统分为自然系统与人为系统两大类。</p></blockquote><p>简单来说，系统有两个基本特性：</p><ol><li>系统由个体组成</li><li>个体之间有关联，按照规则协同完成任务</li></ol><p>系统之间的个体可以成为系统成员，要构建一个系统，最基本的层面需要做两件事：</p><ol><li><strong>定义系统成员</strong>：确定成员是什么<ul><li>模块是一个 JavaScript 文件</li><li>每一个模块都使用 <code>define</code> 函数去定义</li></ul></li><li><strong>约定系统通讯</strong>：确定成员之间如何交互，遵循的规则是什么<ul><li>一个 SeaJS 模块默认就是私有作用域</li><li>如果想要被外部文件模块所访问，就必须把要公开的属性挂载给 <code>module.exports</code> 对象接口</li><li>使用 <code>require</code> 函数可以加载一个指定的模块，得到该模块代码中暴露的接口对象</li></ul></li><li>如何启动整个模块系统<ul><li>在 html 页面中使用 <code>seajs.use()</code> 方法，指定一个入口文件模块</li></ul></li></ol><p>Sea.js 是一个适用于 Web 浏览器端的模块加载器。<br>在 Sea.js 里，一切皆是模块，所有模块协同构建成模块系统。<br>Sea.js 首要要解决的是模块系统的基本问题：</p><ol><li>模块是什么？</li><li>模块之间如何交互？</li></ol><p>在前端开发领域，一个模块，可以是JS 模块，也可以是 CSS 模块，或是 Template 等模块。<br>而 Sea.js 则专注于 JS 文件模块：</p><ol><li>模块是一段 JavaScript 代码，具有统一的 <strong>基本书写格式</strong></li><li>模块之间通过基本 <strong>交互规则</strong> ，能彼此引用，协同工作</li></ol><p>把上面两点中提及的基本书写格式和基本交互规则描述清楚，就能构建出一个模块系统。<br>对书写格式和交互规则的详细描述，就是模块定义规范（Module Definition Specification）。</p><p>比如 CommonJS 社区的 <code>Modules 1.1.1</code> 规范，<br>以及 <code>NodeJS 的 Modules</code> 规范，<br>还有 RequireJS 提出的 <code>AMD</code> 规范等等。</p><p>Sea.js 遵循的是 <code>CMD</code> 规范。</p><h4 id="常见的-JavaScript-模块化规范"><a href="#常见的-JavaScript-模块化规范" class="headerlink" title="常见的 JavaScript 模块化规范"></a>常见的 JavaScript 模块化规范</h4><p>规范其实就是这些库在推广的过程中逐渐形成的一套规则。</p><p>所谓的规范也就是：</p><ul><li>定义了模块的书写格式</li><li><p>以及模块之间的交互规则</p></li><li><p>Node 环境</p><ul><li>CommonJS</li><li>这里先放在这里，Node 还没有学习，学到 Node 的时候，再说这个问题</li></ul></li><li>浏览器环境<ul><li>AMD<ul><li>RequireJS</li></ul></li><li>CMD Common Module Definition<ul><li>CMD 就是 SeaJS 这个模块加载器在推广的过程中定义的一个模块规范</li></ul></li></ul></li><li>ECMAScript<ul><li>ECMAScript 6</li></ul></li><li>UMD</li></ul><p>CMD、AMD、CommonJS 都是社区制定出来的模块规范，他们的目的都是为了解决 JavaScript 没有模块化系统的问题。<br>他们都有如何定义模块成员，以及模块成员之间如何进行通信交互的规则。</p><p>2015 年 9 月份，ECMAScript  官方推出了 ECMAScript 6 语言标准。<br>在最新的 ES6 语言规范标准中制定了 JavaScript 模块化规范，通过 <code>export</code> 和 <code>import</code> 两个关键字来作为交互规则。</p><p>ES6 才是未来的趋势，以后的大一统。</p><h2 id="SeaJS"><a href="#SeaJS" class="headerlink" title="SeaJS"></a>SeaJS</h2><blockquote><p>A Module Loader for the Web, Enjoy the fun of programming.</p></blockquote><ul><li>官网：<a href="https://seajs.github.io/seajs/docs/" target="_blank" rel="external">https://seajs.github.io/seajs/docs/</a></li><li>Github：<a href="https://github.com/seajs/seajs" target="_blank" rel="external">https://github.com/seajs/seajs</a></li><li>下载地址：<a href="https://github.com/seajs/seajs/archive/3.0.0.zip" target="_blank" rel="external">https://github.com/seajs/seajs/archive/3.0.0.zip</a></li><li>提供简单、极致的模块化开发体验</li><li>A Module Loader for the Web</li><li>JavaScript 模块加载器</li><li>可以实现 在 JavaScript 代码中去加载另一个 JavaScript 代码。</li></ul><h3 id="SeaJS-介绍"><a href="#SeaJS-介绍" class="headerlink" title="SeaJS 介绍"></a>SeaJS 介绍</h3><p>SeaJS 带来的最大好处是：提升代码的可维护性。<br>如果一个网站的 JS 文件超过 3 个，就适合用 SeaJS 来组织和维护代码。<br>涉及的 JS 文件越多，SeaJS 就越适合。</p><ul><li><p>关于 SeaJS</p><ul><li>SeaJS 是一个适用于浏览器环境的 JavaScript 模块加载器<ul><li>一个库文件，类似于 jQuery</li><li>使用这个库提供的规范的模块化的方式来编写 JavaScript 代码</li><li>只关心 JavaScript 文件代码模块如何组织<ul><li>只关心 JavaScript 文件之间如何相互协议、引用、依赖</li></ul></li></ul></li><li>SeaJS 的作者是阿里巴巴支付宝前端架构师，花名：玉伯，玉伯也叫射雕<ul><li><a href="http://www.csdn.net/article/2013-09-03/2816801-front-end-development-seajs-framework" target="_blank" rel="external">Sea.js创始人玉伯的前端开发之路</a></li></ul></li><li><a href="http://seajs.org/" target="_blank" rel="external">SeaJS</a></li><li><a href="https://github.com/seajs/seajs/" target="_blank" rel="external">SeaJS -github</a></li></ul></li><li><p>为什么学习和使用 SeaJS ？</p><ul><li><strong>简单友好的模块定义规范</strong>：SeaJS 遵循 CMD 规范，可以像 Node 一样书写模块代码</li><li><strong>自然直观的代码组织方式</strong>：依赖的自动加载、配置简洁清晰，可以让我们更多的享受编码的乐趣</li><li>SeaJS兼容性非常好，几乎可以运行在任何浏览器引擎上</li><li>注1：SeaJS 只是实现模块化开发的一种方式或者说一种工具而已，重在模块化思想的理解</li><li>注2：因为 SeaJS 采用的 CMD 模块规范和 Node 中的 CommonJS 模块规范非常一致，所以有利于我们学习 Node 中的模块化编程</li></ul></li><li><p>谁在用？</p><ul><li>淘宝网、支付宝、京东、爱奇艺。。。</li></ul></li><li><p>SeaJS 使用场景</p><ul><li>SeaJS 不提供任何功能性 API，只提供了解决 JavaScript 代码的命名污染和文件依赖的问题</li><li>所以 SeaJS 可以和 jQuery、underscore 等库结合使用</li><li>例如 只写写 原生 JavaScript 或者用了一些第三方库</li></ul></li></ul><h3 id="快速上手（Getting-Started）"><a href="#快速上手（Getting-Started）" class="headerlink" title="快速上手（Getting Started）"></a>快速上手（Getting Started）</h3><ol><li>下载 sea.js 库文件<ul><li><a href="https://github.com/seajs/seajs/releases" target="_blank" rel="external">SeaJS - Release</a></li><li><code>bower install seajs</code></li><li><code>npm install seajs</code></li></ul></li><li>在页面中引入 sea.js</li><li>使用 <code>define</code> 函数定义模块</li><li>使用 <code>require</code> 函数加载模块</li><li>使用 <code>module.exports</code> 对外暴露接口对象</li><li>使用 <code>seajs.use</code> 函数启动模块系统</li></ol><h3 id="API-详解"><a href="#API-详解" class="headerlink" title="API 详解"></a>API 详解</h3><h4 id="seajs-use"><a href="#seajs-use" class="headerlink" title="seajs.use"></a><code>seajs.use</code></h4><p>加载模块，启动模块系统。</p><ul><li>加载一个模块 <code>seajs.use(&#39;id&#39;)</code></li><li>加载一个模块，在加载完成时，执行回调 <code>seajs.use(&#39;id&#39;, callback)</code></li><li><p>加载多个模块，加载完成时，执行回调 <code>seajs.use([&#39;id1&#39;,&#39;id2&#39;,...],callback)</code></p></li><li><p>注意：</p><ul><li>在调用 seajs.use 之前，需要先引入 sea.js 文件</li><li>seajs.use 与 <code>DOM ready</code> 事件没有任何关系。如果某些操作要确保在 <code>DOM ready</code> 后执行，需要使用 jquery 等类库来保证</li><li>seajs.use 理论上只用于加载启动，不应该出现在 <code>define</code> 中的模块代码里</li></ul></li></ul><h4 id="define-factory"><a href="#define-factory" class="headerlink" title="define(factory)"></a><code>define(factory)</code></h4><p><code>define</code> 是一个全局函数，用来定义模块。</p><p><code>define</code> 接受 <code>factory</code> 参数，<code>factory</code> 可以是一个函数，也可以是一个对象或字符串。</p><p><code>factory</code> 为对象、字符串时，表示模块的接口就是该对象、字符串。</p><ul><li><p>factory 是一个对象时</p><ul><li><code>define({})</code></li></ul></li><li><p>factory 是一个字符串时</p><ul><li><code>define(&#39;hello&#39;)</code></li></ul></li><li><p>factory 是一个函数时</p><ul><li><code>define(function(require, exports, module){})</code></li></ul></li></ul><h4 id="require"><a href="#require" class="headerlink" title="require"></a><code>require</code></h4><p>require 用来加载一个 js 文件模块，<br>require 用来获取指定模块的接口对象 <code>module.exports</code>。</p><p>require 在加载和执行的时候，js 会按照同步的方式和执行。</p><p>使用注意：</p><ul><li>正确拼写<ul><li>模块 factory 构造方法的第一个参数 <code>必须</code> 命名为 require</li></ul></li><li>不要修改<ul><li>不要重命名 require 函数，或在任何作用域中给 require 重新赋值</li></ul></li><li>使用字符串直接量<ul><li>require 的参数值 必须 是字符串直接量</li></ul></li></ul><p>Tips: 把 <code>require</code> 看做是语法关键字就好啦</p><h4 id="模块标识"><a href="#模块标识" class="headerlink" title="模块标识"></a>模块标识</h4><p>模块标识是一个字符串，用来标识模块。</p><ul><li><p>模块标识可以不包含文件后缀名，比如 <code>.js</code></p><ul><li>seajs 推荐不加 .js 文件模块后缀</li></ul></li><li><p>模块标识可以是 <strong>相对</strong> 或 <strong>顶级</strong> 标识</p></li><li><p>相对标识</p></li></ul><p>相对标识以 <code>.</code> 开头，永远相对于当前模块所处的路径来解析。</p><ul><li>顶级标识</li></ul><p>顶级标识不以 <code>.</code> 或 <code>/</code> 开始，会相对模块系统的基础路径（base路径，默认是 sea.js 文件所属的路径）。<br>可以手动配置 base 路径。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">seajs.config(&#123;</div><div class="line">  base: <span class="string">'./js'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><ul><li>普通路径</li></ul><p>除了相对和顶级标识之外的标识都是普通路径。<br>普通路径的解析规则，会相对当前页面解析。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 假设当前页面是 http://example.com/path/to/page/index.html</span></div><div class="line"></div><div class="line"><span class="comment">// 绝对路径是普通路径：</span></div><div class="line"><span class="built_in">require</span>.resolve(<span class="string">'http://cdn.com/js/a'</span>);</div><div class="line">  <span class="comment">// =&gt; http://cdn.com/js/a.js</span></div><div class="line"></div><div class="line"><span class="comment">// 根路径是普通路径：</span></div><div class="line"><span class="built_in">require</span>.resolve(<span class="string">'/js/b'</span>);</div><div class="line">  <span class="comment">// =&gt; http://example.com/js/b.js</span></div><div class="line"></div><div class="line"><span class="comment">// use 中的相对路径始终是普通路径：</span></div><div class="line">seajs.use(<span class="string">'./c'</span>);</div><div class="line">  <span class="comment">// =&gt; 加载的是 http://example.com/path/to/page/c.js</span></div><div class="line"></div><div class="line">seajs.use(<span class="string">'../d'</span>);</div><div class="line">  <span class="comment">// =&gt; 加载的是 http://example.com/path/to/d.js</span></div></pre></td></tr></table></figure><p><strong>Tips</strong>:</p><ul><li>顶级标识始终相对 <code>base</code> 基础路径解析。<ul><li>如果不设置，base 路径默认就是 sea.js 库文件所属的路径</li><li>可以通过 <code>seajs.config({ base: &#39;基础路径&#39; })</code> 来配置基础路径</li></ul></li><li>绝对路径和根路径始终相对当前页面解析。</li><li>相对标识永远相对于当前文件</li><li><code>seajs.use</code> 中的相对路径始终相对当前页面来解析。</li></ul><h4 id="module"><a href="#module" class="headerlink" title="module"></a>module</h4><p>module 是一个对象，上面存储了与当前模块相关联的一些属性和方法。</p><ul><li><code>module.id</code><ul><li>模块的唯一标识，可以通过 <code>define</code> 方法的第一个参数来指定，默认为该模块文件的绝对路径</li></ul></li><li><code>module.uri</code><ul><li>模块的绝对路径</li></ul></li><li><code>module.dependencies</code><ul><li>dependencies 是一个数组，表示当前模块的依赖</li></ul></li><li><code>module.exports</code><ul><li>当前模块对外提供的接口对象</li><li>相当于每个模块内部最终都执行了这么一句话：<code>return module.exports</code></li><li>模块与模块之间的通信接口</li></ul></li></ul><h4 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h4><p>exports 仅仅是 module.exports 的一个引用。<br>也就是说修改了 exports 就相当于修改了 module.exports。</p><p>但是一旦在 factory 内部给 exports 重新赋值，并不会改变 module.exports 的值。<br>因此给 exports 赋值是无效的。</p><h4 id="exports-和-module-exports-的区别"><a href="#exports-和-module-exports-的区别" class="headerlink" title="exports 和 module.exports 的区别"></a>exports 和 module.exports 的区别</h4><ul><li>每个模块内部对外到处的接口对象始终都是 <code>module.exports</code></li><li>可以通过修改 <code>module.exports</code> 或给它赋值改变模块接口对象</li><li><code>exports</code> 是 <code>module.exports</code> 的一个引用，就好比在每一个模块定义最开始的地方写了这么一句代码：<code>var exports = module.exports</code></li></ul><p>关于这俩哥们儿的区别请分析一下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</div><div class="line">  exports: &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeExports</span> (<span class="params">exports, module</span>) </span>&#123;</div><div class="line">  <span class="comment">// var exports = module.exports</span></div><div class="line">  exports.foo = <span class="string">'bar'</span></div><div class="line"></div><div class="line">  <span class="comment">// 这里赋值拿不到，不要使用使用</span></div><div class="line">  <span class="comment">// exports = function () &#123;&#125;</span></div><div class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports</div><div class="line">&#125;</div><div class="line"></div><div class="line">changeExports(<span class="built_in">module</span>.exports, <span class="built_in">module</span>)</div></pre></td></tr></table></figure><p>那为啥要有 <code>exports</code> ？</p><p>为了开发体验，API更友好，使用 exports 的时候，可以少写一个点儿。</p><p>如果你实在分不清楚 <code>exports</code> 和 <code>module.exports</code> 之间的区别，就只记得 <code>module.exports</code> 就可以了。</p><h4 id="如何将一个普通的模块文件改造为兼容-CMD-规范的模块"><a href="#如何将一个普通的模块文件改造为兼容-CMD-规范的模块" class="headerlink" title="如何将一个普通的模块文件改造为兼容 CMD 规范的模块"></a>如何将一个普通的模块文件改造为兼容 CMD 规范的模块</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">"function"</span> &amp;&amp; define.cmd) &#123;</div><div class="line">  <span class="comment">// 有 Sea.js 等 CMD 模块加载器存在</span></div><div class="line">  define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line">    <span class="comment">// 使用 module.exports 向外暴露接口对象</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="高级配置-seajs-config-options"><a href="#高级配置-seajs-config-options" class="headerlink" title="高级配置 seajs.config(options)"></a>高级配置 <code>seajs.config(options)</code></h4><p>可以对 Sea.js 进行配置，让模块编写、开发调试更方便。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">seajs.config(&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 别名配置</span></div><div class="line">  alias: &#123;</div><div class="line">    <span class="string">'es5-safe'</span>: <span class="string">'gallery/es5-safe/0.9.3/es5-safe'</span>,</div><div class="line">    <span class="string">'json'</span>: <span class="string">'gallery/json/1.0.2/json'</span>,</div><div class="line">    <span class="string">'jquery'</span>: <span class="string">'jquery/jquery/1.10.1/jquery'</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// 路径配置</span></div><div class="line">  paths: &#123;</div><div class="line">    <span class="string">'gallery'</span>: <span class="string">'https://a.alipayobjects.com/gallery'</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// Sea.js 的基础路径</span></div><div class="line">  base: <span class="string">'http://example.com/path/to/base/'</span>,</div><div class="line">&#125;);</div></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是对象&quot;&gt;&lt;a href=&quot;#什么是对象&quot; class=&quot;headerlink&quot; title=&quot;什么是对象&quot;&gt;&lt;/a&gt;什么是对象&lt;/h3&gt;&lt;p&gt;Everything is object&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;50%&quot; style=&quot;display:inline-block;float:left;margin-right:30px&quot; src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b10000_10000&amp;sec=1504009587&amp;di=18367a651374cb82f82b73505e567e96&amp;src=http%3A%2F%2Fwww.lovehhy.net%2Flib%2Fimg%2F2461710%2F677536_2461710.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;那么对象到底是什么，我们可以从两个层次来理解&lt;/b&gt;&lt;ul&gt;
&lt;li&gt;&lt;m style=&quot;color:deeppink&quot;&gt;对象是单个事物的抽象&lt;/m&gt;&lt;br&gt;一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。&lt;/li&gt;
&lt;li&gt;&lt;m style=&quot;color:deeppink&quot;&gt;对象是一个容器，封装了属性（property）和方法（method）&lt;/m&gt;&lt;br&gt;属性是对象的状态，方法是对象的行为（完成某种任务）。比如，我们可以把动物抽象为animal对象，使用“属性”记录具体是那一种动物，使用“方法”表示动物的某种行为（奔跑、捕猎、休息等等）。在实际开发中，对象是一个抽象的概念，可以将其简单理解为：数据集或功能集。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="oop" scheme="http://haotengfei.oschina.io/tags/oop/"/>
    
      <category term="notes" scheme="http://haotengfei.oschina.io/tags/notes/"/>
    
      <category term="summary" scheme="http://haotengfei.oschina.io/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>面试题-Javascript</title>
    <link href="http://haotengfei.oschina.io/2016/03/05/interview3/"/>
    <id>http://haotengfei.oschina.io/2016/03/05/interview3/</id>
    <published>2016-03-05T11:40:00.000Z</published>
    <updated>2017-09-12T11:55:37.241Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p><b>基础HTML&amp;CSS结束，开始Javascript…</b></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h4 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h4&gt;&lt;p&gt;&lt;b&gt;基础HTML&amp;amp;CSS结束，开始Javascript…&lt;/b&gt;&lt;/p&gt;
&lt;/blockquot
      
    
    </summary>
    
    
      <category term="interview" scheme="http://haotengfei.oschina.io/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>面试题-HTML&amp;CSS</title>
    <link href="http://haotengfei.oschina.io/2016/03/04/interview2/"/>
    <id>http://haotengfei.oschina.io/2016/03/04/interview2/</id>
    <published>2016-03-04T11:20:00.000Z</published>
    <updated>2017-09-12T11:47:55.272Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=479949593&auto=0&height=66"></iframe><blockquote><h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p><b>接着上篇继续来…</b></p></blockquote><h4 id="什么是Css-Hack？ie678的hack分别是什么？"><a href="#什么是Css-Hack？ie678的hack分别是什么？" class="headerlink" title="什么是Css Hack？ie678的hack分别是什么？"></a>什么是Css Hack？ie678的hack分别是什么？</h4><ul><li>针对不同的浏览器写不同的css code的过程，就是CSS hack</li><li>示例：<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#test</span>&#123;   </div><div class="line">        <span class="attribute">width</span>:<span class="number">300px</span>;   </div><div class="line">        <span class="attribute">height</span>:<span class="number">300px</span>;   </div><div class="line">        <span class="attribute">background-color</span>:blue;      <span class="comment">/*firefox*/</span></div><div class="line">        <span class="attribute">background-color</span>:red\<span class="number">9</span>;      <span class="comment">/*all ie*/</span></div><div class="line">        <span class="attribute">background-color</span>:yellow;    <span class="comment">/*ie8*/</span></div><div class="line">        +background-color:pink;        /*ie7*/</div><div class="line">        _<span class="selector-tag">background-color</span><span class="selector-pseudo">:orange</span>;       <span class="comment">/*ie6*/</span>    &#125;  </div><div class="line">        <span class="selector-pseudo">:root</span> <span class="selector-id">#test</span> &#123; <span class="attribute">background-color</span>:purple\<span class="number">9</span>; &#125;  <span class="comment">/*ie9*/</span></div><div class="line">@<span class="keyword">media</span> all and (min-width:<span class="number">0px</span>)</div><div class="line">     &#123; <span class="selector-id">#test</span> &#123;<span class="attribute">background-color</span>:black;&#125; &#125;  <span class="comment">/*opera*/</span></div><div class="line">@<span class="keyword">media</span> screen and (-webkit-min-device-pixel-ratio:<span class="number">0</span>)</div><div class="line">&#123; <span class="selector-id">#test</span> &#123;<span class="attribute">background-color</span>:gray;&#125; &#125;       <span class="comment">/*chrome and safari*/</span></div></pre></td></tr></table></figure></li></ul><a id="more"></a><h4 id="行内元素和块级元素的区别？"><a href="#行内元素和块级元素的区别？" class="headerlink" title="行内元素和块级元素的区别？"></a>行内元素和块级元素的区别？</h4><ul><li>块级元素(block)特性：<ul><li>总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示</li><li>宽度(width)、高度(height)、内边距(padding)、和外边距(margin)都是可以控制的</li></ul></li><li>内联元素(inline)特性：<ul><li>和相邻的内联元素在同一行</li><li>宽度(width)、高度(height)、内边距的top/bottom(padding-top/padding-bottom)和外边距的top/bottom(margin-top/margin-bottom)都不可改变（也就是padding和margin的left和right是可以设置的），就是里面文字或图片的大小</li></ul></li><li>那么问题来了，浏览器还有默认的天生inline-block元素（拥有内在尺寸，可设置高宽，但不会自动换行），有哪些？<ul><li><code>&lt;input&gt; 、&lt;img&gt; 、&lt;button&gt; 、&lt;texterea&gt; 、&lt;label&gt;</code></li></ul></li></ul><h4 id="什么是外边距重叠？重叠的结果是什么？"><a href="#什么是外边距重叠？重叠的结果是什么？" class="headerlink" title="什么是外边距重叠？重叠的结果是什么？"></a>什么是外边距重叠？重叠的结果是什么？</h4><ul><li>外边距重叠就是margin-collapse</li><li>在CSS当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距</li><li>折叠结果遵循下列计算规则：<ul><li>两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值</li><li>两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值</li><li>两个外边距一正一负时，折叠结果是两者的相加的和</li></ul></li></ul><h4 id="rgba-和opacity的区别？"><a href="#rgba-和opacity的区别？" class="headerlink" title="rgba()和opacity的区别？"></a>rgba()和opacity的区别？</h4><ul><li>rgba()和opacity都能实现透明效果，但是最大的不同是opacity作用于元素，以及元素内的所有内容的透明度</li><li>而rgba()只作用于元素的颜色或者其背景色(设置rgba透明的元素的子元素不会继承透明效果)</li></ul><h4 id="css中可以让文字在垂直和水平方向上重叠的属性？"><a href="#css中可以让文字在垂直和水平方向上重叠的属性？" class="headerlink" title="css中可以让文字在垂直和水平方向上重叠的属性？"></a>css中可以让文字在垂直和水平方向上重叠的属性？</h4><ul><li>垂直方向：line-height</li><li>水平方向：letter-spacing</li><li>那么问题来了，关于letter-spacing的妙用知道有哪些么？<ul><li>可以用于消除inline-block元素间的换行符空格间隙问题</li></ul></li></ul><h4 id="如何垂直居中一个浮动的元素？"><a href="#如何垂直居中一个浮动的元素？" class="headerlink" title="如何垂直居中一个浮动的元素？"></a>如何垂直居中一个浮动的元素？</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">// 方法一：已知元素的高宽</div><div class="line"><span class="selector-id">#div1</span>&#123;</div><div class="line">    <span class="attribute">background-color</span>:<span class="number">#6699FF</span>;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">    position: absolute;        //父元素需要相对定位</div><div class="line">    <span class="selector-tag">top</span>: 50%;</div><div class="line">    <span class="selector-tag">left</span>: 50%;</div><div class="line">    margin-top:-100px ;   //二分之一的height，width</div><div class="line">    <span class="selector-tag">margin-left</span>: <span class="selector-tag">-100px</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">//方法二:未知元素的高宽</div><div class="line"> </div><div class="line">  <span class="selector-id">#div1</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#6699FF</span>;</div><div class="line"> </div><div class="line">    <span class="attribute">margin</span>:auto;</div><div class="line">    position: absolute;        //父元素需要相对定位</div><div class="line">    <span class="selector-tag">left</span>: 0;</div><div class="line">    <span class="selector-tag">top</span>: 0;</div><div class="line">    <span class="selector-tag">right</span>: 0;</div><div class="line">    <span class="selector-tag">bottom</span>: 0;</div><div class="line">    &#125;</div><div class="line">``` </div><div class="line">* 那么问题来了，如何垂直居中一个`&lt;<span class="selector-tag">img</span>&gt;`?（用更简便的方法。）</div><div class="line">```<span class="selector-tag">css</span></div><div class="line">#container     //&lt;img&gt;的容器设置如下</div><div class="line">&#123;</div><div class="line">    display:table-cell;       //此元素会作为一个表格单元格显示（类似 &lt;td&gt; 和 &lt;th&gt;）</div><div class="line">    <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</div><div class="line">    <span class="selector-tag">vertical-align</span><span class="selector-pseudo">:middle</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="px和em的区别？"><a href="#px和em的区别？" class="headerlink" title="px和em的区别？"></a>px和em的区别？</h4><ul><li>px和em都是长度单位，区别是，px的值是固定的，指定是多少就是多少，计算比较容易。em得值不是固定的，并且em会继承父级元素的字体大小</li><li>浏览器的默认字体高都是16px。所以未经调整的浏览器都符合: 1em=16px。那么12px=0.75em, 10px=0.625em</li></ul><h4 id="reset-css和normalize-css的区别？"><a href="#reset-css和normalize-css的区别？" class="headerlink" title="reset.css和normalize.css的区别？"></a>reset.css和normalize.css的区别？</h4><ul><li>重置样式非常多，凡是一个前端开发人员肯定有一个常用的重置CSS文件并知道如何使用它们。他们是盲目的在做还是知道为什么这么做呢？原因是不同的浏览器对一些元素有不同的默认样式，如果你不处理，在不同的浏览器下会存在必要的风险，或者更有戏剧性的性发生</li><li>你可能会用Normalize来代替你的重置样式文件。它没有重置所有的样式风格，但仅提供了一套合理的默认样式值。既能让众多浏览器达到一致和合理，但又不扰乱其他的东西（如粗体的标题）</li><li>在这一方面，无法做每一个复位重置。它也确实有些超过一个重置，它处理了你永远都不用考虑的怪癖，像HTML的audio元素不一致或line-height不一致</li></ul><h4 id="Sass、LESS是什么？大家为什么要使用他们？"><a href="#Sass、LESS是什么？大家为什么要使用他们？" class="headerlink" title="Sass、LESS是什么？大家为什么要使用他们？"></a>Sass、LESS是什么？大家为什么要使用他们？</h4><ul><li>他们是css预处理器。他是css上的一种抽象层。他们是一种特殊的语法/语言编译成css</li><li>例如Less是一种动态语言，将css赋予了动态语言的特性，如变量、继承、运算、函数，Less即可以在客户端上运行(支持IE6+，webkit，Firfox)也可以在服务端运行(借助node.js)</li><li>为什么要使用他们？<ul><li>结构清晰，便于拓展</li><li>可以方便的屏蔽浏览器语法的私有差异，这个不用多说，封装对浏览器语法差异的重复处理，减少无意义的机械劳动</li><li>可以轻松实现多重继承</li><li>完全兼容css代码，可以方便的运用到老项目中，less只是在css语法上做了拓展，所以老的css代码也可以和less代码一同编译</li></ul></li></ul><h4 id="display：none与visibility：hidden的区别？"><a href="#display：none与visibility：hidden的区别？" class="headerlink" title="display：none与visibility：hidden的区别？"></a>display：none与visibility：hidden的区别？</h4><ul><li>visibility:隐藏对应的元素但不挤占该元素原来的空间</li><li>display:隐藏对应的元素并且挤占该元素原来的空间。<ul><li>即是，使用CSS display:none属性后，HTML元素（对象）的宽度、高度等各种属性值都将“丢失”;而使用visibility:hidden属性后，HTML元素（对象）仅仅是在视觉上看不见（完全透明），而它所占据的空间位置仍然存在</li></ul></li></ul><h4 id="css中的link和-import的区别？"><a href="#css中的link和-import的区别？" class="headerlink" title="css中的link和@import的区别？"></a>css中的link和@import的区别？</h4><ul><li>Link属于html标签，而@important是css提供的</li><li>在页面被加载的时候，link会被同时加载，而@important引用的css会在页面加载完后才会加载引用的css</li><li>@important只在ie5以上才可以被识别，而link是html标签，不存在浏览器的兼容问题</li><li>link引入样式的权重大于@important的引用(@import是将引用的样式导入当前的页面中)</li></ul><h4 id="简介盒子模型？"><a href="#简介盒子模型？" class="headerlink" title="简介盒子模型？"></a>简介盒子模型？</h4><ul><li>css的盒子模型有两种：IE盒子模型、标准的W3c盒子模型</li><li>盒模型：内容、内边距、外边距(一般不计入盒子的实际长度)、边框</li></ul><h4 id="为什么要初始化样式？"><a href="#为什么要初始化样式？" class="headerlink" title="为什么要初始化样式？"></a>为什么要初始化样式？</h4><ul><li>由于浏览器的兼容问题，不同的浏览器对标签的默认样式不同，若是不初始化会造成不同浏览器之间的显示差异</li><li>但是初始化css会对搜索引擎优化造成小小的影响</li></ul><h4 id="BFC是什么？"><a href="#BFC是什么？" class="headerlink" title="BFC是什么？"></a>BFC是什么？</h4><ul><li>BFC(块级格式化上下文)，一个创建了新的BFC的盒子是独立布局的，盒子内元素的布局不会影响盒子外面的元素。在同一个BFC中的两个相邻的盒子在垂直方向发生margin重叠的问题</li><li>BFC是指浏览器中创建了一个独立渲染区域，该区域内所有元素的布局不会影响到区域外元素的布局，这个渲染区域只对块级元素起作用</li></ul><h4 id="html语义化是什么意思？"><a href="#html语义化是什么意思？" class="headerlink" title="html语义化是什么意思？"></a>html语义化是什么意思？</h4><ul><li>当页面样式加载失败的时候能够让页面呈现出清晰的结构</li><li>有利于seo优化，利于被搜索引擎收录(更便于搜索引擎的爬虫来识别)</li><li>便于项目的开发与维护，是html代码更具有可读性，便于其他设备解析</li></ul><h4 id="Doctype的作用？严格模式和混杂模式的区别？"><a href="#Doctype的作用？严格模式和混杂模式的区别？" class="headerlink" title="Doctype的作用？严格模式和混杂模式的区别？"></a>Doctype的作用？严格模式和混杂模式的区别？</h4><ul><li><code>&lt;!DOCTYPE&gt;</code>用于告诉浏览器以何种模式来渲染文档</li><li>严格模式：页面排版及js解析是以该浏览器支持的最高标准来执行</li><li>混杂模式：不严格按照标准来执行，主要用来兼容旧的浏览器，向后兼容</li></ul><h4 id="IE的双边距BUG？"><a href="#IE的双边距BUG？" class="headerlink" title="IE的双边距BUG？"></a>IE的双边距BUG？</h4><ul><li>块级元素float后设置横向margin，ie6显示的margin比设置的比较大</li><li>加入<code>display:inline</code></li></ul><h4 id="HTML和XHTL的区别？"><a href="#HTML和XHTL的区别？" class="headerlink" title="HTML和XHTL的区别？"></a>HTML和XHTL的区别？</h4><ul><li>所有的标记都必须有一个相应的结束标记</li><li>所有标签的元素和属性的名字都必须使用小写</li><li>所有的xml标记都必须合理嵌套</li><li>所有的属性必须用引号括起来</li><li>把所有的 &lt; 和 &amp; 特殊符号用编码表示</li><li>给所有属性赋一个值</li><li>不要在注释内容中使用”–”</li><li>图片必须有说明文字</li></ul><h4 id="html常见的兼容问题？"><a href="#html常见的兼容问题？" class="headerlink" title="html常见的兼容问题？"></a>html常见的兼容问题？</h4><ul><li>双边距BUG float引起的，使用display：inline解决</li><li>3像素问题，使用float引起的，使用display：inline</li><li>超链接hover点击后失效，使用正确的书写顺序：link visited hover active </li><li>IE的z-index的问题，给父级添加position：relative</li><li>png透明使用js代码改</li><li>Min-height最小高度 ！inportant解决</li><li>select在ie6下遮盖，使用iframe嵌套</li><li>为什么没有办法定义1px左右的宽度容器(ie6默认的行高造成的，使用over：hidden，zoom：0.08，line-height：1px)</li><li><p>IE5-8不支持opacity，解决办法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.opacity</span> &#123;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">0.4</span></div><div class="line">    filter: <span class="built_in">alpha</span>(opacity=60); <span class="comment">/* for IE5-7 */</span></div><div class="line">    <span class="attribute">-ms-filter</span>: <span class="string">"progid:DXImageTransform.Microsoft.Alpha(Opacity=60)"</span>; <span class="comment">/* for IE 8*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>IE6不支持PNG透明背景，解决办法：IE6一下使用gif图</p></li></ul><h4 id="对WEB标准以及W3C的理解认识？"><a href="#对WEB标准以及W3C的理解认识？" class="headerlink" title="对WEB标准以及W3C的理解认识？"></a>对WEB标准以及W3C的理解认识？</h4><ul><li>标签的闭合，标签的小写，不乱嵌套，提高搜索机器人搜索几率，使用外链css和js脚本、结构行为表现的分离、文件下载与页面速度更快、内容可以被更多的用户所访问、内容可以被广泛设备所访问、更少的代码和组件，容易维护改版方便，不需要动页面内容、提供打印版本而不需要复制内容、提高网站易用性</li></ul><h4 id="行内元素、块级元素、css的盒模型？"><a href="#行内元素、块级元素、css的盒模型？" class="headerlink" title="行内元素、块级元素、css的盒模型？"></a>行内元素、块级元素、css的盒模型？</h4><ul><li>块级元素：div p h1-h6 form ul</li><li>行内元素：a b br i span input select</li><li>css盒模型：content border padding margin</li></ul><h4 id="前端页面的三要素？"><a href="#前端页面的三要素？" class="headerlink" title="前端页面的三要素？"></a>前端页面的三要素？</h4><ul><li>结构层：html</li><li>表现层：css</li><li>行为层：js</li></ul><h4 id="Doctype作用？"><a href="#Doctype作用？" class="headerlink" title="Doctype作用？"></a>Doctype作用？</h4><ul><li><code>&lt;!DOCTYPE&gt;</code>申明位于文档中的最前面，处于<code>&lt;html&gt;</code>标签之前，告知浏览器的解析器，用什么文档类型、规范来解析文档</li><li>严格模式的排版和JS运作模式是以浏览器支持的最高标准执行</li><li>在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作</li><li>DOCTYPE 不存在或者格式不正确，会导致文档以混杂模式呈现</li></ul><h4 id="行内元素、块级元素、空-void-元素？"><a href="#行内元素、块级元素、空-void-元素？" class="headerlink" title="行内元素、块级元素、空(void)元素？"></a>行内元素、块级元素、空(void)元素？</h4><ul><li>css规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，比如div默认的display属性值为“block”，成为块级元素；span默认的属性是“inline”是行内元素</li><li>行内元素有：a b span img input select strong（强调的语气） 块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p  </li><li>知名的空元素：<code>&lt;br&gt; &lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt;</code> 鲜为人知的是：<code>&lt;area&gt; &lt;base&gt; &lt;col&gt; &lt;command&gt; &lt;embed&gt; &lt;keygen&gt; &lt;param&gt; &lt;source&gt; &lt;track&gt; &lt;wbr&gt;</code></li></ul><h4 id="css的盒子模型？"><a href="#css的盒子模型？" class="headerlink" title="css的盒子模型？"></a>css的盒子模型？</h4><ul><li>两种， IE 盒子模型、标准 W3C 盒子模型；IE 的content部分包含了 border 和 pading</li><li>盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)</li></ul><h4 id="CSS-选择符？"><a href="#CSS-选择符？" class="headerlink" title="CSS 选择符？"></a>CSS 选择符？</h4><ul><li>id选择器（ # myid）</li><li>类选择器（.myclassname）</li><li>标签选择器（div, h1, p）</li><li>相邻选择器（h1 + p）</li><li>子选择器（ul &lt; li）</li><li>后代选择器（li a）</li><li>通配符选择器（ * ）</li><li>属性选择器（a[rel = “external”]）</li><li>伪类选择器（a: hover, li: nth - child）</li><li>可继承： font-size font-family color, UL LI DL DD DT</li><li>不可继承 ：border padding margin width height</li><li>优先级就近原则，样式定义最近者为准</li><li>载入样式以最后载入的定位为准</li><li>优先级为:<ul><li>!important &gt;  id &gt; class &gt; tag  </li><li>important 比 内联优先级高</li></ul></li><li>CSS3新增伪类举例:<ul><li>p:first-of-type 选择属于其父元素的首个 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素</li><li>p:last-of-type  选择属于其父元素的最后 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素</li><li>p:only-of-type  选择属于其父元素唯一的 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素</li><li>p:only-child    选择属于其父元素的唯一子元素的每个 <code>&lt;p&gt;</code> 元素</li><li>p:nth-child(2)  选择属于其父元素的第二个子元素的每个 <code>&lt;p&gt;</code> 元素</li><li>:enabled、:disabled 控制表单控件的禁用状态</li><li>:checked，单选框或复选框被选中</li></ul></li></ul><h4 id="47-如何居中div-如何居中一个浮动元素？"><a href="#47-如何居中div-如何居中一个浮动元素？" class="headerlink" title="47.如何居中div,如何居中一个浮动元素？"></a>47.如何居中div,如何居中一个浮动元素？</h4><ul><li><p>给div设置一个宽度，然后添加margin:0 auto属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">        <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">        <span class="attribute">margin</span>:<span class="number">0</span> auto;</div><div class="line">     &#125;</div></pre></td></tr></table></figure></li><li><p>居中一个浮动元素</p><ul><li>确定容器的宽高 宽500 高 300 的层</li><li>设置层的外边距<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.div</span> &#123; </div><div class="line">     Width:500px ; height:300px;//高度可以不设</div><div class="line">     <span class="selector-tag">Margin</span>: <span class="selector-tag">-150px</span> 0 0 <span class="selector-tag">-250px</span>;</div><div class="line">     <span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;相对定位</div><div class="line">     background-color:pink;//方便看效果</div><div class="line">     <span class="selector-tag">left</span><span class="selector-pseudo">:50</span>%;</div><div class="line">     <span class="selector-tag">top</span><span class="selector-pseudo">:50</span>%;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></li></ul></li></ul><h4 id="浏览器的内核、兼容、常用hack的技巧？"><a href="#浏览器的内核、兼容、常用hack的技巧？" class="headerlink" title="浏览器的内核、兼容、常用hack的技巧？"></a>浏览器的内核、兼容、常用hack的技巧？</h4><ul><li>IE:Trident、Firefox：gecko、safari：webkit、opera/chrome:blink</li><li>png24为背景的图片在iE6浏览器上不出现背景，解决方案是做成PNG8.</li><li>浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一</li><li><p>IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大</p><ul><li>浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 10px;}</li><li>这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——<em>display:inline;将其转化为行内属性。(</em>这个符号只有ie6会识别)</li><li>渐进识别的方式，从总体中逐渐排除局部</li><li>首先，巧妙的使用“\9”这一标记，将IE游览器从所有情况中分离出来，接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">css</span></div><div class="line">         <span class="selector-class">.bb</span>&#123;</div><div class="line">          <span class="attribute">background-color</span>:<span class="number">#f1ee18</span>;<span class="comment">/*所有识别*/</span></div><div class="line">         <span class="attribute">.background-color</span>:<span class="number">#00deff</span>\<span class="number">9</span>; <span class="comment">/*IE6、7、8识别*/</span></div><div class="line">         +background-color:#a200ff;/*IE6、7识别*/</div><div class="line">         _<span class="selector-tag">background-color</span>:<span class="selector-id">#1e0bd1</span>;<span class="comment">/*IE6识别*/</span></div><div class="line">         &#125;</div></pre></td></tr></table></figure></li></ul></li><li><p>IE下，可以使用获取常规属性的方法获取自定义属性，也可以使用getAtribute()获取自定义属性，firefox下，只能使用getAttribute()获取自定义属性，解决：统一使用geyAttribute()获取自定义属性</p></li><li>IE下，event对象有x，y属性，但是没有pageX，pageY属性，firefox下event对象有pageX，pageY属性，但是没有x，y属性</li><li>(条件注释)缺点是在IE浏览器下可能会增加额外的HTTP请求数</li><li>chrome中文页面下默认会将小于12px的文本强制按照12px显示，可以通过加入css属性<code>-webkit-text-size-adjust:none</code>解决</li><li>超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:<ul><li>l-v-h-a    a:link{}  a:visitid{}  a:hover{}  a:active{}</li></ul></li></ul><h4 id="display的值、position的值？"><a href="#display的值、position的值？" class="headerlink" title="display的值、position的值？"></a>display的值、position的值？</h4><ul><li>display：<ul><li>block 块级元素显示</li><li>none 缺省值。向行内元素类型一样显示</li><li>inline-block 像行内元素一样显示，但其内容像块类型元素一样显示</li><li>list-item 像块类型元素一样显示，并添加样式列表标记</li><li>table-cell 单元格的形式显示可以设置text-align：center;vertical:middle;</li></ul></li><li>position:<ul><li>absoult 生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位</li><li>fixed(老IE不支持) 生成绝对定位的元素，相对于浏览器窗口进行定位</li><li>relative 生成相对定位的元素，相对于其正常位置进行定位</li><li>static 默认值没有定位，元素出现在正常的流中</li><li>（忽略 top, bottom, left, right z-index 声明）</li><li>inherit 规定从父元素继承position属性的值</li></ul></li></ul><h4 id="absolute的containing-block计算方式跟正常流有什么不同？"><a href="#absolute的containing-block计算方式跟正常流有什么不同？" class="headerlink" title="absolute的containing block计算方式跟正常流有什么不同？"></a>absolute的containing block计算方式跟正常流有什么不同？</h4><ul><li>lock-level boxes<ul><li>一个 block-level element(‘display’属性值为’block’,’list-item’或者是’table’)会生成一个 block-level box，这样的盒子会参与到 block-formatting context (一种布局的方式) 中</li></ul></li><li>block formatting context<ul><li>在这种布局方式下，盒子们自所在的 containing block 顶部起一个接一个垂直排列，水平方向上撑满整个宽度 (除非内部的盒子自己内部建立了新的 BFC)</li></ul></li><li>containing block<ul><li>一般来说，盒子本身就为其子孙建立了 containing block，用来计算内部盒子的位置、大小，而对内部的盒子，具体采用哪个 containing block 来计算，需要分情况来讨论：</li><li>若此元素为 inline 元素，则 containing block 为能够包含这个元素生成的第一个和最后一个 inline box 的 padding box (除 margin, border 外的区域) 的最小矩形；否则则由这个祖先元素的 padding box 构成</li><li>根元素所在的 containing block 被称为 initial containing block，在我们常用的浏览器环境下，指的是原点与 canvas 重合，大小和 viewport 相同的矩形</li><li>对于 position 为 static 或 relative 的元素，其 containing block 为祖先元素中最近的 block container box 的 content box (除 margin, border, padding 外的区域)</li><li>对于 position:fixed 的元素，其 containing block 由 viewport 建立</li><li>对于 position:absolute 的元素，则是先找到其祖先元素中最近的 position 属性非 static 的元素，然后判断：如果都找不到，则为 initial containing block</li></ul></li></ul><h4 id="浏览器标准模式和怪异模式之间的区别"><a href="#浏览器标准模式和怪异模式之间的区别" class="headerlink" title="浏览器标准模式和怪异模式之间的区别"></a>浏览器标准模式和怪异模式之间的区别</h4><ul><li>盒子模型，渲染模式的不同</li><li>使用window.top.document.compatMode 可显示为什么模式</li></ul><blockquote><p>End — HTML&amp;CSS基础差不多就这些了，下篇来总结原生JS…</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=479949593&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
&lt;h4 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h4&gt;&lt;p&gt;&lt;b&gt;接着上篇继续来…&lt;/b&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;什么是Css-Hack？ie678的hack分别是什么？&quot;&gt;&lt;a href=&quot;#什么是Css-Hack？ie678的hack分别是什么？&quot; class=&quot;headerlink&quot; title=&quot;什么是Css Hack？ie678的hack分别是什么？&quot;&gt;&lt;/a&gt;什么是Css Hack？ie678的hack分别是什么？&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;针对不同的浏览器写不同的css code的过程，就是CSS hack&lt;/li&gt;
&lt;li&gt;示例：&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-id&quot;&gt;#test&lt;/span&gt;&amp;#123;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:blue;      &lt;span class=&quot;comment&quot;&gt;/*firefox*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:red\&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;;      &lt;span class=&quot;comment&quot;&gt;/*all ie*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:yellow;    &lt;span class=&quot;comment&quot;&gt;/*ie8*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        +background-color:pink;        /*ie7*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        _&lt;span class=&quot;selector-tag&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:orange&lt;/span&gt;;       &lt;span class=&quot;comment&quot;&gt;/*ie6*/&lt;/span&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;selector-pseudo&quot;&gt;:root&lt;/span&gt; &lt;span class=&quot;selector-id&quot;&gt;#test&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:purple\&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;; &amp;#125;  &lt;span class=&quot;comment&quot;&gt;/*ie9*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; all and (min-width:&lt;span class=&quot;number&quot;&gt;0px&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#123; &lt;span class=&quot;selector-id&quot;&gt;#test&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:black;&amp;#125; &amp;#125;  &lt;span class=&quot;comment&quot;&gt;/*opera*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; screen and (-webkit-min-device-pixel-ratio:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123; &lt;span class=&quot;selector-id&quot;&gt;#test&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:gray;&amp;#125; &amp;#125;       &lt;span class=&quot;comment&quot;&gt;/*chrome and safari*/&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="interview" scheme="http://haotengfei.oschina.io/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>面试题-HTML&amp;CSS</title>
    <link href="http://haotengfei.oschina.io/2016/03/03/interview1/"/>
    <id>http://haotengfei.oschina.io/2016/03/03/interview1/</id>
    <published>2016-03-02T23:20:00.000Z</published>
    <updated>2017-09-12T03:32:44.203Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p><b>最近突然心血来潮，想把我所经历的一些面试题从头到尾做个总结，心动不如行动，来吧，怼起来…</b></p></blockquote><h4 id="你做的页面在哪些浏览器上测试过？这些浏览器的内核分别是什么？"><a href="#你做的页面在哪些浏览器上测试过？这些浏览器的内核分别是什么？" class="headerlink" title="你做的页面在哪些浏览器上测试过？这些浏览器的内核分别是什么？"></a>你做的页面在哪些浏览器上测试过？这些浏览器的内核分别是什么？</h4><ul><li>IE：trident内核</li><li>Firefox：gecko内核</li><li>Safari：webkit内核</li><li>Opera：以前是presto内核，现在已经改用Google Chrome的blink内核</li><li>Chrome：Blink(基于webkit，Google与Opera Software共同开发)</li></ul><a id="more"></a><h4 id="每个html文件的开头都有个很重要的东西，Doctype，代表什么？"><a href="#每个html文件的开头都有个很重要的东西，Doctype，代表什么？" class="headerlink" title="每个html文件的开头都有个很重要的东西，Doctype，代表什么？"></a>每个html文件的开头都有个很重要的东西，Doctype，代表什么？</h4><ul><li>&lt;!DOCTYPE&gt;声明位于文档中最前面的位置，处于&lt;\html&gt;标签之前。此标签可以告诉浏览器文档使用哪种HTML或XHTML规范。(重点：告诉浏览器按照何种规范解析页面)</li></ul><h4 id="Quirks模式是什么？它和Standards模式有什么区别？"><a href="#Quirks模式是什么？它和Standards模式有什么区别？" class="headerlink" title="Quirks模式是什么？它和Standards模式有什么区别？"></a>Quirks模式是什么？它和Standards模式有什么区别？</h4><ul><li>从IE6开始，引入了Standards模式，标准模式中，浏览器尝试给符合标准的文档在规范上的正确处理达到指定浏览器的程度。</li><li>在IE6之前CSS还不够成熟，所以IE5等之前的浏览器对CSS的支持很差，IE6将对CSS提供更好的支持，然而这时候的问题就来了，因为很多页面是基于旧的布局方式写的，而如果IE6支持CSS则将令这些页面显示不正常，如何在即保证不破坏现有页面，又提供新的渲染机制呢？</li><li>在写程序的时候我们也会经常遇到这样的问题，如何保证原来的接口不变，又提供更强大的功能，尤其是新功能不兼容旧功能的时候。遇到这种问题的时候一个常见的做法就是增加参数和分支，即某个参数为真的时候，我们就使用新功能，而这个参数不为真的时候，就使用旧功能。这样就不破坏原有的程序，又提供新的功能。IE6也是类似这样的做法，它将DTD当作了这个参数，因为以前的页面大家都不会去写DTD，所以IE6就假定，如果写了DTD，就意味着这个页面将采用对CSS支持更好的布局，如果没有，则采用兼容之前的布局方式，这就是Quirks模式(怪癖模式，诡异模式，怪异模式)。</li><li>区别：<ul><li>总体会有布局，样式解析和脚本执行三个方面的区别。<br>盒模型：在W3C标准中，如果设置一个元素的宽高，指的是元素内容的宽高，而且在Quirks模式下，IE的宽度和高度还包含了padding和border</li><li>设置行内元素的高宽：在Standards模式下，给&lt;\span&gt;等行内元素设置width和height都不会生效，而在quirks模式下会生效。</li><li>设置百分比的高度：在Standards模式下，一个元素的高度是由其包含的内容决定的，如果父元素没有设置百分比的高度，子元素设置一个百分比的高度是无效的。</li><li>用margin：0 auto设置水平居中：使用margin：0 auto在standards模式下可以使元素水平居中，但是在quirks模式下却会失效。</li></ul></li></ul><h4 id="div-css的布局较table布局有什么优点？"><a href="#div-css的布局较table布局有什么优点？" class="headerlink" title="div+css的布局较table布局有什么优点？"></a>div+css的布局较table布局有什么优点？</h4><ul><li>改版的时候比较方便，只需要改css样式。</li><li>页面的加载速度更快、结构化清晰、页面显示简洁。</li><li>表现和结构相分离。</li><li>易于优化(seo)搜索引擎更友好，排名更容易靠前。</li></ul><h4 id="img的alt与title有何异议同？strong与em的异同？"><a href="#img的alt与title有何异议同？strong与em的异同？" class="headerlink" title="img的alt与title有何异议同？strong与em的异同？"></a>img的alt与title有何异议同？strong与em的异同？</h4><ul><li>alt为不能显示图片、窗体或applets的用户代理(UA),alt属性用来指定的替换文字。替换文字的语言有lang属性决定。(在IE浏览器下没有title时把alt当成title显示)。</li><li>title该熟悉为设置该属性的元素提出建议性的信息。</li><li>strong粗体强调的标签，强调，表示内容的重要性。</li><li>em斜体强调的标签，更强烈强调，表示内容的强调点。</li></ul><h4 id="描述一下渐进增强和优雅降级之间的不同？"><a href="#描述一下渐进增强和优雅降级之间的不同？" class="headerlink" title="描述一下渐进增强和优雅降级之间的不同？"></a>描述一下渐进增强和优雅降级之间的不同？</h4><ul><li>渐进增强：<ul><li>progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</li></ul></li><li>优雅降级：<ul><li>graceful degradation：一开始就构建完整的功能，然后针对低版本浏览器进行兼容。</li></ul></li><li>区别：<ul><li>优雅降级是从复杂的现状开始，并试图减少用户体验的功给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级(功能衰减)意味着往回看；而渐进增强则意味着超前看，同时保证其根基处于安全地带。</li></ul></li><li><p>“优雅降级”观点：</p><ul><li><p>“优雅降级”观点认为应该针对那些最高级，最完善的浏览器来设计网站。而将哪些被认为”过时”或者有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器(如IE、Mozilla等)的前一个版本。</p></li><li><p>在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。</p></li></ul></li><li>“渐进增强”观点<ul><li>“渐进增强”观点则认为应关注于内容本身。<br>内容是我们建立网站的诱因。有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo! 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。</li><li>那么问题来了。现在产品经理看到IE6,7,8网页效果相对高版本现代浏览器少了很多圆角，阴影（CSS3），要求兼容（使用图片背景，放弃CSS3），你会如何说服他？</li></ul></li></ul><h4 id="为什么用多个域名来存储网站资源会更有效？"><a href="#为什么用多个域名来存储网站资源会更有效？" class="headerlink" title="为什么用多个域名来存储网站资源会更有效？"></a>为什么用多个域名来存储网站资源会更有效？</h4><ul><li>CDN缓存会更方便</li><li>突破浏览器并发限制</li><li>节约cookie带宽</li><li>节约主域名的连接数，优化页面的响应速度</li><li>防止不必要的安全问题</li></ul><h4 id="请谈一下你对网页标准和标准制定机构重要性的理解？"><a href="#请谈一下你对网页标准和标准制定机构重要性的理解？" class="headerlink" title="请谈一下你对网页标准和标准制定机构重要性的理解？"></a>请谈一下你对网页标准和标准制定机构重要性的理解？</h4><ul><li>网页标准和标准制定机构都是为了能够让web发展的更’健康’，开发者遵循统一的标准，降低开发难度，开发成本，SEO也会更好做，也不会因为滥用代码导致各种bug，安全问题，最终提高网站易用性。</li></ul><h4 id="请描述一下cookies、sessionStorage、localStorage的区别？"><a href="#请描述一下cookies、sessionStorage、localStorage的区别？" class="headerlink" title="请描述一下cookies、sessionStorage、localStorage的区别？"></a>请描述一下cookies、sessionStorage、localStorage的区别？</h4><ul><li><p>sessionStorage用于本地存储的一个会话(session)中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束的时候数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。而localStorage用于持久化的本地存储，除非主动删除数据，否则数据永远不会过期的。</p></li><li><p>Web storage和cookie的区别</p><ul><li>web Storage的概念和cookie相似，区别是它是为了更大容量的存储设计的。cookie的大小是受限制的，并且每次请求一个新的页面的时候cookie就会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定的作用域，不可以跨域调用。</li><li>除此之外Web Storage拥有setItem、getItem、removeItem、clear等方法，不想cookie需要前端开发者自己去封装setCookie、getCookie。但是cookie也是不可或缺的。cookie的作用是用来和服务器进行交互，做为http<br>规范的一部分存在，而web storage仅仅是为了在本地存储数据而生。</li></ul></li></ul><h4 id="简述一下src和href的区别？"><a href="#简述一下src和href的区别？" class="headerlink" title="简述一下src和href的区别？"></a>简述一下src和href的区别？</h4><ul><li>src用来替换当前元素，href用于在当前文档和引用资源之间确立关系。</li><li>scr是sourve的缩写，指向外部资源的位置，指向的内容将会嵌入当前标签所在的位置，在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片，frame等元素。</li><li>当浏览器解析到该元素的时候，会暂停其他资源的加载和处理，直接将该资源加载、编译、执行完毕，图片和框架等元素也是如此，类似与将所指向资源嵌入当前标签内。这也就是为什么把js脚本放在底部而不是头部的原因。</li><li>href是Hypertext Reference的缩写，指向网络资源所在的位置，建立和当前元素(锚点)或者文档(链接)之间的链接，如果我们在文档中link加载css文件的时候，浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文件的处理。这也就是为什么建议使用link方式来加载css而不是使用@import方式。</li></ul><p>####知道网页制作会用到的图片制作会有哪些吗？</p><ul><li>png-8，png-24，jpeg，gif，svg</li><li>但是上面都不是面试官想得到的答案。面试官所希望听到的是Webp(是否关注新技术，新食物)</li><li>科普一下Webp：Webp格式，谷歌(google)开发的一种旨在加快图片加载速度的图片格式，图片压缩体积大约只有jpeg的2/3并且可以大量节省服务器的带宽资源和数据空间。facebook Ebay等知名网站已经开始测试并使用webp格式</li><li>在质量相同的情况下，webp格式图像的体积要比jpeg格式图像小40%</li></ul><h4 id="谈谈微格式的理解？"><a href="#谈谈微格式的理解？" class="headerlink" title="谈谈微格式的理解？"></a>谈谈微格式的理解？</h4><ul><li>微格式(Microformats)是一种让机器可读的语义化XHTML词汇的集合，是结构化数据的开放标准，是为特殊应用制定的特殊格式。</li><li>将智能数据添加到网页上，让网站内容在搜索引擎结果界面可以显示额外的提示(应用师范：豆瓣，有兴趣的自行google)</li></ul><h4 id="从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？"><a href="#从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？" class="headerlink" title="从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？"></a>从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？</h4><ul><li>dns缓存、cdn缓存、浏览器缓存、服务器缓存</li></ul><h4 id="你有哪些方法优化图片的加载，给用户更好的体验？"><a href="#你有哪些方法优化图片的加载，给用户更好的体验？" class="headerlink" title="你有哪些方法优化图片的加载，给用户更好的体验？"></a>你有哪些方法优化图片的加载，给用户更好的体验？</h4><ul><li>图片的懒加载，在页面的未可视区域可以添加一个滚动条事件，判断图片位置与浏览器顶端的距离与页面的距离，如果前者小于后者优先加载</li><li>如果为幻灯片相册等，可以使用图片预加载技术，将当前展示图片的前一张和后一张优先加载</li><li>如果图片为css图片，可以使用CSSsprite、SVGsprite、Iconfont、base64等技术</li><li>如果图片特别大，可以使用特殊编码的图片，加载时先加载一张压缩特别厉害的缩略图，以提高用户的体验</li><li>如果图片显示区域小于图片的真实大小，则应在服务端根据业务需要进行图片压缩，图片压缩后大小与展示的一直</li></ul><h4 id="你如何理解HTML的语义化"><a href="#你如何理解HTML的语义化" class="headerlink" title="你如何理解HTML的语义化"></a>你如何理解HTML的语义化</h4><ul><li>去掉或页面丢失的时候能够让页面呈现清晰的结构：</li><li>html本身是没有表现的，我们看到的字体加粗–h1、大小2em，’strong’是加粗的，不要认为是html的表现，这些其实是html默认的css样式在起作用，所以说在去掉或页面丢失的时候能够让页面显示清晰的结构不是语义化html的优点，但是浏览器都有默认的样式，默认的样式也是为了更好的表达html的语义，可以说浏览器的默认样式和语义化的html结构是分不开的。</li><li>屏幕阅读器会完全根据你的标记来读你的网页</li><li>例如，如果你使用含语义的标记，屏幕阅读器就会逐个拼出你的单词，而不是试着对它完整发音</li><li>PDA、手机等设备可能无法像普通电脑的浏览器一样来渲染网页（通常是因为这些设备对CSS的支持较弱</li><li>使用语义标记可以确保这些设备以一种有意义的方式来渲染网页.理想情况下,观看设备的任务是符合设备本身的条件来渲染网页</li><li>语义标记为设备提供了所需的相关信息,就省去了你自己去考虑所有可能的显示情况（包括现有的或者将来新的设备）.例如,一部手机可以选择使一段标记了标题的文字以粗体显示.而掌上电脑可能会以比较大的字体来显示.无论哪种方式一旦你对文本标记为标题,您就可以确信读取设备将根据其自身的条件来合适地显示页面</li><li>搜索引擎的爬虫也依赖于标记来确定上下文和各个关键字的权重<br>过去你可能还没有考虑搜索引擎的爬虫也是网站的”访客”,但现在它们他们实际上是极其宝贵的用户.没有他们的话,搜索引擎将无法索引你的网站,然后一般用户将很难过来访问,你的页面是否对爬虫容易理解非常重要,因为爬虫很大程度上会忽略用于表现的标记,而只注重语义标记,因此,如果页面文件的标题被标记,而不是,那么这个页面在搜索结果的位置可能会比较靠后.除了提升易用性外,语义标记有利于正确使用CSS和JavaScript,因为其本身提供了许多”钩钩”来应用页面的样式与行为</li><li>SEO主要还是靠你网站的内容和外部链接的</li><li>便于团队开发和维护 </li><li>W3C给我们定了一个很好的标准，在团队中大家都遵循这个标准，可以减少很多差异化的东西，方便开发和维护，提高开发效率，甚至实现模块化开发</li></ul><h4 id="谈谈以前端角度出发做好SEO需要考虑什么"><a href="#谈谈以前端角度出发做好SEO需要考虑什么" class="headerlink" title="谈谈以前端角度出发做好SEO需要考虑什么"></a>谈谈以前端角度出发做好SEO需要考虑什么</h4><ul><li>了解搜索引擎如何抓取网页和如何索引网页</li><li>你需要知道一些搜索引擎的基本工作原理，各个搜索引擎之间的区别，搜索机器人(SE robot 或叫 web crawler)如何进行工作，搜索引擎如何对搜索结果进行排序等等</li><li>Meta标签优化</li><li>主要包括主题(Title)，网站描述(Description)，和关键词(Keywords)。还有一些其它的隐藏文字比如Author(作者)，Category(目录)，Language(编码语种)等</li><li>如何选取关键词并在网页中放置关键词</li><li>搜索就得用关键词。关键词分析和选择是SEO最重要的工作之一。首先要给网站确定主关键词(一般在5个上下)，然后针对这些关键词进行优化，包括关键词密度(Density)，相关度(Relavancy)，突出性(Prominency)等等</li><li>了解主要的搜索引擎</li><li>虽然搜索引擎有很多，但是对网站流量起决定作用的就那么几个。比如英文的主要有Google，Yahoo，Bing等；中文的有百度，搜狗，有道等。不同的搜索引擎对页面的抓取和索引、排序的规则都不一样。还要了解各搜索门户和搜索引擎之间的关系，比如AOL网页搜索用的是Google的搜索技术，MSN用的是Bing的技术</li><li>主要的互联网目录 </li><li>Open Directory自身不是搜索引擎，而是一个大型的网站目录，他和搜索引擎的主要区别是网站内容的收集方式不同。目录是人工编辑的，主要收录网站主页；搜索引擎是自动收集的，除了主页外还抓取大量的内容页面</li><li>按点击付费的搜索引擎     </li><li>搜索引擎也需要生存，随着互联网商务的越来越成熟，收费的搜索引擎也开始大行其道。最典型的有Overture和百度，当然也包括Google的广告项目Google Adwords。越来越多的人通过搜索引擎的点击广告来定位商业网站，这里面也大有优化和排名的学问，你得学会用最少的广告投入获得最多的点击</li><li>搜索引擎登录</li><li>网站做完了以后，别躺在那里等着客人从天而降。要让别人找到你，最简单的办法就是将网站提交(submit)到搜索引擎。如果你的是商业网站，主要的搜索引擎和目录都会要求你付费来获得收录（比如Yahoo要299美元），但是好消息是(至少到目前为止)最大的搜索引擎Google目前还是免费，而且它主宰着60％以上的搜索市场</li><li>链接交换和链接广泛度(Link Popularity)</li><li>网页内容都是以超文本(Hypertext)的方式来互相链接的，网站之间也是如此。除了搜索引擎以外，人们也每天通过不同网站之间的链接来Surfing（“冲浪”）。其它网站到你的网站的链接越多，你也就会获得更多的访问量。更重要的是，你的网站的外部链接数越多，会被搜索引擎认为它的重要性越大，从而给你更高的排名</li><li>合理的标签使用</li></ul><h4 id="有哪项方式可以对一个DOM设置它的CSS样式？"><a href="#有哪项方式可以对一个DOM设置它的CSS样式？" class="headerlink" title="有哪项方式可以对一个DOM设置它的CSS样式？"></a>有哪项方式可以对一个DOM设置它的CSS样式？</h4><ul><li>外部样式，引入一个外部css文件</li><li>内部样式表，将css代码放在head标签内部</li><li>内联样式，将css样式直接定义在html元素内部</li></ul><h4 id="18-CSS都有哪些选择器？"><a href="#18-CSS都有哪些选择器？" class="headerlink" title="18.CSS都有哪些选择器？"></a>18.CSS都有哪些选择器？</h4><ul><li>派生选择器（用HTML标签申明）</li><li>id选择器（用DOM的ID申明）</li><li>类选择器（用一个样式类名申明）</li><li>属性选择器（用DOM的属性申明，属于CSS2，IE6不支持，不常用，不知道就算了）</li><li>除了前3种基本选择器，还有一些扩展选择器，包括：<ul><li>后代选择器（利用空格间隔，比如div .a{  }）</li><li>群组选择器（利用逗号间隔，比如p,div,#a{  }）</li></ul></li><li>那么问题来了，CSS选择器的优先级是怎么样定义的？<ul><li>基本原则：</li><li>一般而言，选择器越特殊，它的优先级越高。也就是选择器指向的越准确，它的优先级就越高。</li><li>复杂的计算方法：</li><li>用1表示派生选择器的优先级</li><li>用10表示类选择器的优先级</li><li>用100标示ID选择器的优先级</li><li>div.test1 .span var 优先级 1+10 +10 +1</li><li>span#xxx .songs li 优先级1+100 + 10 + 1</li><li>#xxx li 优先级 100 +1</li></ul></li><li><p>那么问题来了，看下列代码，p 标签内的文字是什么颜色的？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">  .classA&#123; color:blue;&#125;</div><div class="line">  .classB&#123; color:red;&#125;</div><div class="line">  &lt;/style&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;p class=&apos;classB classA&apos;&gt; 123 &lt;/p&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure><ul><li>答案：red。与样式定义在文件中的先后顺序有关，即是后面的覆盖前面的，与在<p class="’classB" classa’="">中的先后关系无关。</p></li></ul></li></ul><h4 id="CSS中使得一个DOM元素不显示在浏览器可视范围内"><a href="#CSS中使得一个DOM元素不显示在浏览器可视范围内" class="headerlink" title="CSS中使得一个DOM元素不显示在浏览器可视范围内"></a>CSS中使得一个DOM元素不显示在浏览器可视范围内</h4><ul><li>最基本的：<ul><li>设置display属性为none，或者设置visibility属性为hidden</li></ul></li><li>技巧性：<ul><li>设置宽高为0，设置透明度为0，设置z-index位置在-1000em</li></ul></li></ul><h4 id="20-超链接访问过后hover样式就不出现的问题是什么？如何解决？"><a href="#20-超链接访问过后hover样式就不出现的问题是什么？如何解决？" class="headerlink" title="20.超链接访问过后hover样式就不出现的问题是什么？如何解决？"></a>20.超链接访问过后hover样式就不出现的问题是什么？如何解决？</h4><ul><li>被点击访问过的超链接样式不在具有hover和active了,解决方法是改变CSS属性的排列顺序: L-V-H-A(link(连接平常的状态),visited(连接被访问过之后),hover(鼠标放到连接上的时候),active(连接被按下的时候))</li></ul><blockquote><p>不写不知道,一写吓一跳，感觉还有好多好多，写了连1/100都没有，今天先到这里了，有时间再写…</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h4 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h4&gt;&lt;p&gt;&lt;b&gt;最近突然心血来潮，想把我所经历的一些面试题从头到尾做个总结，心动不如行动，来吧，怼起来…&lt;/b&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;你做的页面在哪些浏览器上测试过？这些浏览器的内核分别是什么？&quot;&gt;&lt;a href=&quot;#你做的页面在哪些浏览器上测试过？这些浏览器的内核分别是什么？&quot; class=&quot;headerlink&quot; title=&quot;你做的页面在哪些浏览器上测试过？这些浏览器的内核分别是什么？&quot;&gt;&lt;/a&gt;你做的页面在哪些浏览器上测试过？这些浏览器的内核分别是什么？&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;IE：trident内核&lt;/li&gt;
&lt;li&gt;Firefox：gecko内核&lt;/li&gt;
&lt;li&gt;Safari：webkit内核&lt;/li&gt;
&lt;li&gt;Opera：以前是presto内核，现在已经改用Google Chrome的blink内核&lt;/li&gt;
&lt;li&gt;Chrome：Blink(基于webkit，Google与Opera Software共同开发)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="interview" scheme="http://haotengfei.oschina.io/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://haotengfei.oschina.io/2016/03/02/regexp/"/>
    <id>http://haotengfei.oschina.io/2016/03/02/regexp/</id>
    <published>2016-03-02T10:20:00.000Z</published>
    <updated>2017-09-10T09:54:42.083Z</updated>
    
    <content type="html"><![CDATA[<ul><li>了解正则表达式基本语法</li><li>能够使用JavaScript的正则对象</li></ul><h3 id="正则表达式简介"><a href="#正则表达式简介" class="headerlink" title="正则表达式简介"></a>正则表达式简介</h3><h4 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h4><p>正则表达式：用于匹配规律规则的表达式，正则表达式最初是科学家对人类神经系统的工作原理的早期研究，现在在编程语言中有广泛的应用。正则表通常被用来检索、替换那些符合某个模式(规则)的文本。<br>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。<br><a id="more"></a></p><h4 id="正则表达式的作用"><a href="#正则表达式的作用" class="headerlink" title="正则表达式的作用"></a>正则表达式的作用</h4><ol><li>给定的字符串是否符合正则表达式的过滤逻辑(匹配)</li><li>可以通过正则表达式，从字符串中获取我们想要的特定部分(提取)</li><li>强大的字符串替换能力(替换)</li></ol><h4 id="正则表达式的特点"><a href="#正则表达式的特点" class="headerlink" title="正则表达式的特点"></a>正则表达式的特点</h4><ol><li>灵活性、逻辑性和功能性非常的强</li><li>可以迅速地用极简单的方式达到字符串的复杂控制</li><li>对于刚接触的人来说，比较晦涩难懂</li></ol><h3 id="正则表达式的测试"><a href="#正则表达式的测试" class="headerlink" title="正则表达式的测试"></a>正则表达式的测试</h3><ul><li><a href="https://c.runoob.com/front-end/854" target="_blank" rel="external">在线测试正则</a></li><li>工具中使用正则表达式<ul><li>sublime/vscode/word</li><li>演示替换所有的数字</li></ul></li></ul><h3 id="正则表达式的组成"><a href="#正则表达式的组成" class="headerlink" title="正则表达式的组成"></a>正则表达式的组成</h3><ul><li>普通字符</li><li>特殊字符(元字符)：正则表达式中有特殊意义的字符</li></ul><p>示例演示：</p><ul><li><code>\d</code> 匹配数字</li><li><code>ab\d</code> 匹配 ab1、ab2</li></ul><h3 id="元字符串"><a href="#元字符串" class="headerlink" title="元字符串"></a>元字符串</h3><p>通过测试工具演示下面元字符的使用</p><h4 id="常用元字符串"><a href="#常用元字符串" class="headerlink" title="常用元字符串"></a>常用元字符串</h4><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线</td></tr><tr><td>\W</td><td>匹配任意不是字母，数字，下划线</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>.</td><td>匹配除换行符以外的任意单个字符</td></tr><tr><td>^</td><td>表示匹配行首的文本(以谁开始)</td></tr><tr><td>$</td><td>表示匹配行尾的文本(以谁结束)</td></tr></tbody></table><h4 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h4><table><thead><tr><th>限定符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[]</span> 字符串用中括号括起来，表示匹配其中的任一字符，相当于或的意思</div><div class="line"><span class="selector-attr">[^]</span>  匹配除中括号以内的内容</div><div class="line">\ 转义符</div><div class="line">| 或者，选择两者中的一个。注意|将左右两边分为两部分，而不管左右两边有多长多乱</div><div class="line">() 从两个直接量中选择一个，分组</div><div class="line">   <span class="selector-tag">eg</span>：<span class="selector-tag">gr</span>(a|e)<span class="selector-tag">y</span>匹配<span class="selector-tag">gray</span>和<span class="selector-tag">grey</span></div><div class="line"><span class="selector-attr">[\u4e00-\u9fa5]</span>  匹配汉字</div></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>验证手机号：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^\d&#123;<span class="number">11</span>&#125;$</div></pre></td></tr></table></figure><p>验证邮编：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^\d&#123;<span class="number">6</span>&#125;$</div></pre></td></tr></table></figure><p>验证日期 2012-5-01</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;$</div></pre></td></tr></table></figure><p>验证邮箱 xxx@itcast.cn：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^\w+@\w+\.\w+$</div></pre></td></tr></table></figure><p>验证IP地址 192.168.1.10</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^\d&#123;<span class="number">1</span>,<span class="number">3</span>&#125;\(.\d&#123;<span class="number">1</span>,<span class="number">3</span>&#125;)&#123;<span class="number">3</span>&#125;$</div></pre></td></tr></table></figure><h2 id="JavaScript-中使用正则表达式"><a href="#JavaScript-中使用正则表达式" class="headerlink" title="JavaScript 中使用正则表达式"></a>JavaScript 中使用正则表达式</h2><h3 id="创建正则对象"><a href="#创建正则对象" class="headerlink" title="创建正则对象"></a>创建正则对象</h3><p>方式1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> Regex(<span class="string">'\d'</span>, <span class="string">'i'</span>);</div><div class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> Regex(<span class="string">'\d'</span>, <span class="string">'gi'</span>);</div></pre></td></tr></table></figure><p>方式2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/i</span>;</div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/gi</span>;</div></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><table><thead><tr><th>标志</th><th>说明</th></tr></thead><tbody><tr><td>i</td><td>忽略大小写</td></tr><tr><td>g</td><td>全局匹配</td></tr><tr><td>gi</td><td>全局匹配+忽略大小写</td></tr></tbody></table><h3 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 匹配日期</span></div><div class="line"><span class="keyword">var</span> dateStr = <span class="string">'2015-10-10'</span>;</div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$/</span></div><div class="line"><span class="built_in">console</span>.log(reg.test(dateStr));</div></pre></td></tr></table></figure><h3 id="正则提取"><a href="#正则提取" class="headerlink" title="正则提取"></a>正则提取</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 提取工资</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">"张三：1000，李四：5000，王五：8000。"</span>;</div><div class="line"><span class="keyword">var</span> array = str.match(<span class="regexp">/\d+/g</span>);</div><div class="line"><span class="built_in">console</span>.log(array);</div><div class="line"></div><div class="line"><span class="comment">// 2. 提取email地址</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">"123123@xx.com,fangfang@valuedopinions.cn 286669312@qq.com 2、emailenglish@emailenglish.englishtown.com 286669312@qq.com..."</span>;</div><div class="line"><span class="keyword">var</span> array = str.match(<span class="regexp">/\w+@\w+\.\w+(\.\w+)?/g</span>);</div><div class="line"><span class="built_in">console</span>.log(array);</div><div class="line"></div><div class="line"><span class="comment">// 3. 分组提取  </span></div><div class="line"><span class="comment">// 3. 提取日期中的年部分  2015-5-10</span></div><div class="line"><span class="keyword">var</span> dateStr = <span class="string">'2016-1-5'</span>;</div><div class="line"><span class="comment">// 正则表达式中的()作为分组来使用，获取分组匹配到的结果用Regex.$1 $2 $3....来获取</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d&#123;4&#125;)-\d&#123;1,2&#125;-\d&#123;1,2&#125;/</span>;</div><div class="line"><span class="keyword">if</span> (reg.test(dateStr)) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 4. 提取邮件中的每一部分</span></div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w+)@(\w+)\.(\w+)(\.\w+)?/</span>;</div><div class="line"><span class="keyword">var</span> str = <span class="string">"123123@xx.com"</span>;</div><div class="line"><span class="keyword">if</span> (reg.test(str)) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">3</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="正则替换"><a href="#正则替换" class="headerlink" title="正则替换"></a>正则替换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 替换所有空白</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">"   123AD  asadf   asadfasf  adf "</span>;</div><div class="line">str = str.replace(<span class="regexp">/\s/g</span>,<span class="string">"xx"</span>);</div><div class="line"><span class="built_in">console</span>.log(str);</div><div class="line"></div><div class="line"><span class="comment">// 2. 替换所有,|，</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">"abc,efg,123，abc,123，a"</span>;</div><div class="line">str = str.replace(<span class="regexp">/,|，/g</span>, <span class="string">"."</span>);</div><div class="line"><span class="built_in">console</span>.log(str);</div></pre></td></tr></table></figure><h3 id="案例：表单验证"><a href="#案例：表单验证" class="headerlink" title="案例：表单验证"></a>案例：表单验证</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">QQ号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtQQ"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtEMail"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">手机：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtPhone"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtBirthday"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtName"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取文本框</span></div><div class="line"><span class="keyword">var</span> txtQQ = <span class="built_in">document</span>.getElementById(<span class="string">"txtQQ"</span>);</div><div class="line"><span class="keyword">var</span> txtEMail = <span class="built_in">document</span>.getElementById(<span class="string">"txtEMail"</span>);</div><div class="line"><span class="keyword">var</span> txtPhone = <span class="built_in">document</span>.getElementById(<span class="string">"txtPhone"</span>);</div><div class="line"><span class="keyword">var</span> txtBirthday = <span class="built_in">document</span>.getElementById(<span class="string">"txtBirthday"</span>);</div><div class="line"><span class="keyword">var</span> txtName = <span class="built_in">document</span>.getElementById(<span class="string">"txtName"</span>);</div><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line">txtQQ.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//获取当前文本框对应的span</span></div><div class="line">  <span class="keyword">var</span> span = <span class="keyword">this</span>.nextElementSibling;</div><div class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;5,12&#125;$/</span>;</div><div class="line">  <span class="comment">//判断验证是否成功</span></div><div class="line">  <span class="keyword">if</span>(!reg.test(<span class="keyword">this</span>.value) )&#123;</div><div class="line">    <span class="comment">//验证不成功</span></div><div class="line">    span.innerText = <span class="string">"请输入正确的QQ号"</span>;</div><div class="line">    span.style.color = <span class="string">"red"</span>;</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="comment">//验证成功</span></div><div class="line">    span.innerText = <span class="string">""</span>;</div><div class="line">    span.style.color = <span class="string">""</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//txtEMail</span></div><div class="line">txtEMail.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//获取当前文本框对应的span</span></div><div class="line">  <span class="keyword">var</span> span = <span class="keyword">this</span>.nextElementSibling;</div><div class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^\w+@\w+\.\w+(\.\w+)?$/</span>;</div><div class="line">  <span class="comment">//判断验证是否成功</span></div><div class="line">  <span class="keyword">if</span>(!reg.test(<span class="keyword">this</span>.value) )&#123;</div><div class="line">    <span class="comment">//验证不成功</span></div><div class="line">    span.innerText = <span class="string">"请输入正确的EMail地址"</span>;</div><div class="line">    span.style.color = <span class="string">"red"</span>;</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="comment">//验证成功</span></div><div class="line">    span.innerText = <span class="string">""</span>;</div><div class="line">    span.style.color = <span class="string">""</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>表单验证部分，封装成函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> regBirthday = <span class="regexp">/^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$/</span>;</div><div class="line">addCheck(txtBirthday, regBirthday, <span class="string">"请输入正确的出生日期"</span>);</div><div class="line"><span class="comment">//给文本框添加验证</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCheck</span>(<span class="params">element, reg, tip</span>) </span>&#123;</div><div class="line">  element.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//获取当前文本框对应的span</span></div><div class="line">    <span class="keyword">var</span> span = <span class="keyword">this</span>.nextElementSibling;</div><div class="line">    <span class="comment">//判断验证是否成功</span></div><div class="line">    <span class="keyword">if</span>(!reg.test(<span class="keyword">this</span>.value) )&#123;</div><div class="line">      <span class="comment">//验证不成功</span></div><div class="line">      span.innerText = tip;</div><div class="line">      span.style.color = <span class="string">"red"</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="comment">//验证成功</span></div><div class="line">      span.innerText = <span class="string">""</span>;</div><div class="line">      span.style.color = <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过给元素增加自定义验证属性对表单进行验证：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"frm"</span>&gt;</span></div><div class="line">  QQ号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtQQ"</span> <span class="attr">data-rule</span>=<span class="string">"qq"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtEMail"</span> <span class="attr">data-rule</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  手机：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtPhone"</span> <span class="attr">data-rule</span>=<span class="string">"phone"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtBirthday"</span> <span class="attr">data-rule</span>=<span class="string">"date"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtName"</span> <span class="attr">data-rule</span>=<span class="string">"cn"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 所有的验证规则</span></div><div class="line"><span class="keyword">var</span> rules = [</div><div class="line">  &#123;</div><div class="line">    name: <span class="string">'qq'</span>,</div><div class="line">    reg: <span class="regexp">/^\d&#123;5,12&#125;$/</span>,</div><div class="line">    tip: <span class="string">"请输入正确的QQ"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    name: <span class="string">'email'</span>,</div><div class="line">    reg: <span class="regexp">/^\w+@\w+\.\w+(\.\w+)?$/</span>,</div><div class="line">    tip: <span class="string">"请输入正确的邮箱地址"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    name: <span class="string">'phone'</span>,</div><div class="line">    reg: <span class="regexp">/^\d&#123;11&#125;$/</span>,</div><div class="line">    tip: <span class="string">"请输入正确的手机号码"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    name: <span class="string">'date'</span>,</div><div class="line">    reg: <span class="regexp">/^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$/</span>,</div><div class="line">    tip: <span class="string">"请输入正确的出生日期"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    name: <span class="string">'cn'</span>,</div><div class="line">    reg: <span class="regexp">/^[\u4e00-\u9fa5]&#123;2,4&#125;$/</span>,</div><div class="line">    tip: <span class="string">"请输入正确的姓名"</span></div><div class="line">  &#125;];</div><div class="line"></div><div class="line">addCheck(<span class="string">'frm'</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//给文本框添加验证</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCheck</span>(<span class="params">formId</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> i = <span class="number">0</span>,</div><div class="line">      len = <span class="number">0</span>,</div><div class="line">      frm =<span class="built_in">document</span>.getElementById(formId);</div><div class="line">  len = frm.children.length;</div><div class="line">  <span class="keyword">for</span> (; i &lt; len; i++) &#123;</div><div class="line">    <span class="keyword">var</span> element = frm.children[i];</div><div class="line">    <span class="comment">// 表单元素中有name属性的元素添加验证</span></div><div class="line">    <span class="keyword">if</span> (element.name) &#123;</div><div class="line">      element.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 使用dataset获取data-自定义属性的值</span></div><div class="line">        <span class="keyword">var</span> ruleName = <span class="keyword">this</span>.dataset.rule;</div><div class="line">        <span class="keyword">var</span> rule =getRuleByRuleName(rules, ruleName);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> span = <span class="keyword">this</span>.nextElementSibling;</div><div class="line">        <span class="comment">//判断验证是否成功</span></div><div class="line">        <span class="keyword">if</span>(!rule.reg.test(<span class="keyword">this</span>.value) )&#123;</div><div class="line">          <span class="comment">//验证不成功</span></div><div class="line">          span.innerText = rule.tip;</div><div class="line">          span.style.color = <span class="string">"red"</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">          <span class="comment">//验证成功</span></div><div class="line">          span.innerText = <span class="string">""</span>;</div><div class="line">          span.style.color = <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 根据规则的名称获取规则对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRuleByRuleName</span>(<span class="params">rules, ruleName</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> i = <span class="number">0</span>,</div><div class="line">      len = rules.length;</div><div class="line">  <span class="keyword">var</span> rule = <span class="literal">null</span>;</div><div class="line">  <span class="keyword">for</span> (; i &lt; len; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (rules[i].name == ruleName) &#123;</div><div class="line">      rule = rules[i];</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> rule;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;了解正则表达式基本语法&lt;/li&gt;
&lt;li&gt;能够使用JavaScript的正则对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;正则表达式简介&quot;&gt;&lt;a href=&quot;#正则表达式简介&quot; class=&quot;headerlink&quot; title=&quot;正则表达式简介&quot;&gt;&lt;/a&gt;正则表达式简介&lt;/h3&gt;&lt;h4 id=&quot;什么是正则表达式&quot;&gt;&lt;a href=&quot;#什么是正则表达式&quot; class=&quot;headerlink&quot; title=&quot;什么是正则表达式&quot;&gt;&lt;/a&gt;什么是正则表达式&lt;/h4&gt;&lt;p&gt;正则表达式：用于匹配规律规则的表达式，正则表达式最初是科学家对人类神经系统的工作原理的早期研究，现在在编程语言中有广泛的应用。正则表通常被用来检索、替换那些符合某个模式(规则)的文本。&lt;br&gt;正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。&lt;br&gt;
    
    </summary>
    
    
      <category term="notes" scheme="http://haotengfei.oschina.io/tags/notes/"/>
    
      <category term="summary" scheme="http://haotengfei.oschina.io/tags/summary/"/>
    
      <category term="RegExp" scheme="http://haotengfei.oschina.io/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>pjax: 当ajax遇上pushState</title>
    <link href="http://haotengfei.oschina.io/2016/02/12/about-pjax/"/>
    <id>http://haotengfei.oschina.io/2016/02/12/about-pjax/</id>
    <published>2016-02-12T00:55:00.000Z</published>
    <updated>2017-09-08T05:51:50.162Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>var pjax = pushState + ajax;<br>小时候，小浣熊方便面里面有各种水浒人物的卡片。我买了一包，吃了方便面，饱了。而我又买了第二包，不是想吃方便面，而是仅仅想得到里面的卡片…          </p></blockquote><a id="more"></a><h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><p>pushState是html5中提供的方法，用以</p><ul><li>无刷新的更新浏览器地址栏；            </li><li>如其名称，将新地址push到历史堆栈中            </li></ul><p>用法：<code>pushState(data, title ,url)</code>            </p><p>data为保存的对象，可以在window.onpopstate时获取到；title为页面标题；url为需地址栏和历史发生改变的url。<br>正是这点看似很平常的功能，跟ajax结合到一起产生了火花。因为，ajax最擅长的事情就是局部刷新页面。</p><h4 id="二、ajax的纠结历史"><a href="#二、ajax的纠结历史" class="headerlink" title="二、ajax的纠结历史"></a>二、ajax的纠结历史</h4><p>一切可以从ajax最擅长的事情说起。<br>ajax作为一个异步请求模型，从最初设计开始，也许压根就没打算将它跟浏览器历史挂钩。原因是历史堆栈所记录的，某种意思上可以说是顺序，跟我们理解的“同步”更为密切。</p><p>因而，<code>ajax可以无刷新改变页面内容，却无法改变页面的url</code>。</p><ul><li>历史问题1 - 如何操控历史</li></ul><p>当页面越来越流行，操作记录却很容易被忽略。假设有这样的单页面，按照分类点击，界面逐层递进：<code>体育 - 篮球 -nba -马刺队 - 邓肯</code><br>当我们点了4下到“邓肯”界面时，一个不小心的刷新，出现在你面前的也许是“体育”。原因是操作记录没有被记录。<br>而通常的解决方案是修改hash，每递进一层，去更新url的hash值，这样的方法：</p><ol><li>刷新时预先判断url的hash，从而知道这是哪一层，加载相应数据；          </li><li>支持了历史</li></ol><p>这样的方式貌似比较完善，其实不然。</p><ul><li>历史问题2 - 对搜索引擎不友好</li></ul><p>最大的问题是，hash后生成的内容是不会被搜索引擎引用到。数据不能被爬取，无疑是浪费和损失。因此google放言，咱可以约定个协议：<code>#!xxx</code>这样hash的url，google也去爬取。称之为<code>hash bang</code>（哈希大爆炸？）。这一协议，在g+，twitter，人人，新浪微博上都可以看到。</p><p>事实上，ajax最或缺的两个问题，恰好被pushState的功能补充完善。</p><h4 id="三、pjax带来的价值"><a href="#三、pjax带来的价值" class="headerlink" title="三、pjax带来的价值"></a>三、pjax带来的价值</h4><p>除去补齐了ajax的问题，我们发现pjax会给web带来更多的好处。<br>回到开始说的“两包方便面”，我的意思是，有时你访问两个url，部分数据是相同的。比如百度贴吧，第一页和第二页的区别只是帖子内容（卡片）的不同，网站外框部分（方便面）都是一样的，这些东西就不需要在页面刷新时重复加载。</p><p>ajax处理这样的局部刷新，已经给我们带来了web2.0的体验，而加上pushstate的ajax则更进一步：</p><ol><li>一个url对应一套数据，有利于SEO；</li><li>更改数据和url时，只是局部刷新，带来较好的用户体验；</li><li>兼容性好，对不支持pushstate的浏览器，url也能正常请求页面（虽然有重复加载）；</li><li>刷新页面时，由于是url唯一，能正常加载到用户希望看到的数据，比处理hash的方式更方便；</li><li>后退与前进的浏览器操作，依然可以局部刷新（通过onpushstate事件捕获）</li></ol><h4 id="四、注意事项"><a href="#四、注意事项" class="headerlink" title="四、注意事项"></a>四、注意事项</h4><p>然而pjax不等于单纯的分离使用pushstate与ajax，还必须得做一些封装。缘于以下我能想到的注意事项：</p><ul><li>服务器端增加额外处理逻辑<br>服务器端，需要根据请求的参数，作出全页渲染或局部渲染响应<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">Accept:</span>text<span class="regexp">/html, */</span>*; q=<span class="number">0.01</span></div><div class="line">Accept-<span class="string">Encoding:</span>gzip,deflate,sdch</div><div class="line"><span class="string">Connection:</span>keep-alive</div><div class="line"><span class="string">Host:</span>qianduannotes.duapp.com</div><div class="line">User-<span class="string">Agent:</span>AppleWebKit<span class="regexp">/537.36 (KHTML, like Gecko) Chrome/</span><span class="number">31.0</span><span class="number">.1650</span><span class="number">.63</span> Safari/<span class="number">537.36</span></div><div class="line">X-Requested-<span class="string">With:</span>XMLHttpRequest</div><div class="line">X-<span class="string">PJAX:</span><span class="literal">true</span></div></pre></td></tr></table></figure></li></ul><p>比如请求头部可以设定一个X-PAJX:true，用以通知服务器。</p><ul><li><p>浏览器兼容<br>假如浏览器不支持pushstate，提供fallback操作，直接打开需更改url的地址：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$.support.pjax = <span class="built_in">window</span>.history &amp;&amp; <span class="built_in">window</span>.history.pushState</div><div class="line"><span class="comment">// Fallback</span></div><div class="line"><span class="keyword">if</span> ( !$.support.pjax ) &#123;</div><div class="line">  $.pjax = <span class="function"><span class="keyword">function</span>(<span class="params"> options </span>) </span>&#123;</div><div class="line">    <span class="built_in">window</span>.location = $.isFunction(options.url) ? options.url() : options.url</div><div class="line">  &#125;</div><div class="line">  $.fn.pjax = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>本地存储机制<br>无疑pjax与localstorage共同使用可以进一步提升体验，但这一步容易忽略的是数据上报。</p></li></ul><h4 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h4><p><a href="https://github.com/defunkt/jquery-pjax" target="_blank" rel="external">jquery-pjax</a><br><a href="https://github.com/welefen/pjax" target="_blank" rel="external">welefen封装的pjax</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;var pjax = pushState + ajax;&lt;br&gt;小时候，小浣熊方便面里面有各种水浒人物的卡片。我买了一包，吃了方便面，饱了。而我又买了第二包，不是想吃方便面，而是仅仅想得到里面的卡片…          &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://haotengfei.oschina.io/tags/js/"/>
    
      <category term="html5" scheme="http://haotengfei.oschina.io/tags/html5/"/>
    
      <category term="ajax" scheme="http://haotengfei.oschina.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>hexo + 码云 搭建个人博客</title>
    <link href="http://haotengfei.oschina.io/2016/02/01/hexo/"/>
    <id>http://haotengfei.oschina.io/2016/02/01/hexo/</id>
    <published>2016-02-01T02:36:00.000Z</published>
    <updated>2017-09-10T10:56:14.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><ul><li>node</li><li>git<ul><li>git 是源代码版本管理工具</li><li><a href="https://git-scm.com/downloads" target="_blank" rel="external">https://git-scm.com/downloads</a></li><li>安装：傻瓜式的下一步下一步安装即可</li></ul></li></ul><a id="more"></a><h3 id="安装-hexo-1"><a href="#安装-hexo-1" class="headerlink" title="安装 hexo"></a>安装 hexo</h3><p>打开 cmd ，执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --global hexo-cli --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure><p>等待安装结束，可以在 cmd 中输入 <code>hexo --version</code> 测试是否安装成功。<br>如果可以看到以下内容的输出，则意味着 hexo 安装成功了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">hexo-cli</span>: 1<span class="selector-class">.0</span><span class="selector-class">.3</span></div><div class="line"><span class="selector-tag">os</span>: <span class="selector-tag">Windows_NT</span> 10<span class="selector-class">.0</span><span class="selector-class">.14393</span> <span class="selector-tag">win32</span> <span class="selector-tag">x64</span></div><div class="line"><span class="selector-tag">http_parser</span>: 2<span class="selector-class">.7</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">node</span>: 7<span class="selector-class">.10</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">v8</span>: 5<span class="selector-class">.5</span><span class="selector-class">.372</span><span class="selector-class">.43</span></div><div class="line"><span class="selector-tag">uv</span>: 1<span class="selector-class">.11</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">zlib</span>: 1<span class="selector-class">.2</span><span class="selector-class">.11</span></div><div class="line"><span class="selector-tag">ares</span>: 1<span class="selector-class">.10</span><span class="selector-class">.1-DEV</span></div><div class="line"><span class="selector-tag">modules</span>: 51</div><div class="line"><span class="selector-tag">openssl</span>: 1<span class="selector-class">.0</span><span class="selector-class">.2k</span></div><div class="line"><span class="selector-tag">icu</span>: 58<span class="selector-class">.2</span></div><div class="line"><span class="selector-tag">unicode</span>: 9<span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">cldr</span>: 30<span class="selector-class">.0</span><span class="selector-class">.3</span></div><div class="line"><span class="selector-tag">tz</span>: 2016<span class="selector-tag">j</span></div></pre></td></tr></table></figure><hr><h2 id="使用-hexo"><a href="#使用-hexo" class="headerlink" title="使用 hexo"></a>使用 hexo</h2><h3 id="初始化生成博客"><a href="#初始化生成博客" class="headerlink" title="初始化生成博客"></a>初始化生成博客</h3><p>打开 cmd ，切入你希望存储你的博客文件的目录，例如，我这里切入到 Desktop 目录，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 这个命令会在 Desktop 目录下创建一个 blog 文件夹，然后在里面初始化一些文件</span></div><div class="line">hexo init blog</div></pre></td></tr></table></figure><p>如果你能看到类似于下面的输出，则表示安装成功了：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">success </span>Saved lockfile.</div><div class="line">Done in 22.90s.</div><div class="line">INFO  Start blogging with Hexo!</div></pre></td></tr></table></figure><h3 id="启动预览博客"><a href="#启动预览博客" class="headerlink" title="启动预览博客"></a>启动预览博客</h3><p>切入你刚刚生成的 blog 目录，然后执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 该命令会在本地启动一个 http 服务，默认占用 4000 端口</span></div><div class="line">hexo server</div></pre></td></tr></table></figure><p>接下来，你就可以直接在浏览器中访问：<code>http://localhost:4000</code> 来预览你刚刚使用 hexo 生成的这个静态博客了。</p><h3 id="编写博客"><a href="#编写博客" class="headerlink" title="编写博客"></a>编写博客</h3><p>找到 blog/source/_posts 目录，然后在里面新建你的 md 文件写博客就可以了。</p><hr><h2 id="将本地的静态博客发布部署到互联网上"><a href="#将本地的静态博客发布部署到互联网上" class="headerlink" title="将本地的静态博客发布部署到互联网上"></a>将本地的静态博客发布部署到互联网上</h2><p>码云是一个代码托管平台，你可以把你的文件代码托管到码云上。<br>咱们要做的是就是用使用码云作为咱们的静态博客的服务器。</p><h3 id="注册码云：https-git-oschina-net"><a href="#注册码云：https-git-oschina-net" class="headerlink" title="注册码云：https://git.oschina.net/"></a>注册码云：<a href="https://git.oschina.net/" target="_blank" rel="external">https://git.oschina.net/</a></h3><h3 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h3><ul><li>名称：你注册时候的用户名</li><li>勾选掉：使用 README 文件初始化这个项目</li><li>点击创建</li><li>然后复制刚刚创建的仓库地址<ul><li><a href="https://git.oschina.net/SuiBianLaiYiGe/SuiBianLaiYiGe.git" target="_blank" rel="external">https://git.oschina.net/SuiBianLaiYiGe/SuiBianLaiYiGe.git</a></li></ul></li></ul><h3 id="然后在本地"><a href="#然后在本地" class="headerlink" title="然后在本地"></a>然后在本地</h3><p>在 cmd 中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 用户名填写你注册码云的用户名</span></div><div class="line">git config --global user.name <span class="string">"SuiBianLaiYiGe"</span></div><div class="line"></div><div class="line"><span class="comment"># 邮箱填写你注册码云的邮箱</span></div><div class="line">git config --global user.email <span class="string">"czbk123456@sina.com"</span></div></pre></td></tr></table></figure><p>然后修改博客目录中的 <code>_condig.yml</code> 文件，加入以下内容：</p><p><a href="https://git.oschina.net/SuiBianLaiYiGe/SuiBianLaiYiGe.git" target="_blank" rel="external">https://git.oschina.net/SuiBianLaiYiGe/SuiBianLaiYiGe.git</a></p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>: </div><div class="line">  <span class="attribute">type</span>: git</div><div class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//suibianlaiyige:czbk123@git.oschina.net/SuiBianLaiYiGe/SuiBianLaiYiGe.git</span></div></pre></td></tr></table></figure><p>接下来安装一个发布工具：</p><p>通过 cmd 进入 blog 目录，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure><p>接下来，还是在 cmd 中的 blog 目录，执行：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy --<span class="keyword">generate</span></div></pre></td></tr></table></figure><p>然后，第一次发布成功之后，在你的码云项目中，找到 服务 -&gt; Pages -&gt; 启动服务</p><p>接下来，你要做的就是：在本地写文章，然后选择性的部署到互联网上。</p><h2 id="本地写"><a href="#本地写" class="headerlink" title="本地写"></a>本地写</h2><ul><li>写文章</li><li>通过 <code>hexo server</code> 在本地预览</li></ul><h2 id="发布部署"><a href="#发布部署" class="headerlink" title="发布部署"></a>发布部署</h2><ul><li><p><code>hexo deploy --generate</code></p></li><li><p>lipengzhou@itcast.cn</p></li></ul><h2 id="更多内容"><a href="#更多内容" class="headerlink" title="更多内容"></a>更多内容</h2><blockquote><p>参考：<a href="https://hexo.io/" target="_blank" rel="external">https://hexo.io/</a></p></blockquote><ul><li>例如定期发布日期</li><li>定制主题</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装-hexo&quot;&gt;&lt;a href=&quot;#安装-hexo&quot; class=&quot;headerlink&quot; title=&quot;安装 hexo&quot;&gt;&lt;/a&gt;安装 hexo&lt;/h2&gt;&lt;h3 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;node&lt;/li&gt;
&lt;li&gt;git&lt;ul&gt;
&lt;li&gt;git 是源代码版本管理工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://git-scm.com/downloads&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://git-scm.com/downloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;安装：傻瓜式的下一步下一步安装即可&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://haotengfei.oschina.io/tags/hexo/"/>
    
  </entry>
  
</feed>
